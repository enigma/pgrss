{"href":"startupideas.html","title":"How to Get Startup Ideas","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\nNovember 2012<br/><br>The way to get startup ideas is not to try to think of startup\nideas.  It's to look for problems, preferably problems you have\nyourself.<br/><br/>The very best startup ideas tend to have three things in common:\nthey're something the founders themselves want, that they themselves\ncan build, and that few others realize are worth doing.  Microsoft,\nApple, Yahoo, Google, and Facebook all began this way.<br/><br/>\n<b>Problems</b><br/><br/>Why is it so important to work on a problem you have?  Among other\nthings, it ensures the problem really exists.  It sounds obvious\nto say you should only work on problems that exist.  And yet by far\nthe most common mistake startups make is to solve problems no one\nhas.<br/><br/>I made it myself.  In 1995 I started a company to put art galleries\nonline.  But galleries didn't want to be online.  It's not how the\nart business works.  So why did I spend 6 months working on this\nstupid idea?  Because I didn't pay attention to users.  I invented\na model of the world that didn't correspond to reality, and worked\nfrom that.  I didn't notice my model was wrong until I tried\nto convince users to pay for what we'd built.  Even then I took\nembarrassingly long to catch on.  I was attached to my model of the\nworld, and I'd spent a lot of time on the software.  They had to\nwant it!<br/><br/>Why do so many founders build things no one wants?  Because they\nbegin by trying to think of startup ideas.  That m.o. is doubly\ndangerous: it doesn't merely yield few good ideas; it yields bad\nideas that sound plausible enough to fool you into working on them.<br/><br/>At YC we call these \"made-up\" or \"sitcom\" startup ideas.  Imagine\none of the characters on a TV show was starting a startup.  The\nwriters would have to invent something for it to do.  But coming\nup with good startup ideas is hard.  It's not something you can do\nfor the asking.  So (unless they got amazingly lucky) the writers\nwould come up with an idea that sounded plausible, but was actually\nbad.<br/><br/>For example, a social network for pet owners.  It doesn't sound\nobviously mistaken.  Millions of people have pets.  Often they care\na lot about their pets and spend a lot of money on them.  Surely\nmany of these people would like a site where they could talk to\nother pet owners.  Not all of them perhaps, but if just 2 or 3\npercent were regular visitors, you could have millions of users.\nYou could serve them targeted offers, and maybe charge for premium\nfeatures. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f1n\"><font color=\"#999999\">1</font></a>]</font><br/><br/>The danger of an idea like this is that when you run it by your\nfriends with pets, they don't say \"I would <i>never</i> use this.\" They\nsay \"Yeah, maybe I could see using something like that.\" Even when\nthe startup launches, it will sound plausible to a lot of people.\nThey don't want to use it themselves, at least not right now, but\nthey could imagine other people wanting it.  Sum that reaction\nacross the entire population, and you have zero users. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f2n\"><font color=\"#999999\">2</font></a>]</font><br/><br/>\n<b>Well</b><br/><br/>When a startup launches, there have to be at least some users who\nreally need what they're making â€” not just people who could see\nthemselves using it one day, but who want it urgently.  Usually\nthis initial group of users is small, for the simple reason that\nif there were something that large numbers of people urgently needed\nand that could be built with the amount of effort a startup usually\nputs into a version one, it would probably already exist.  Which\nmeans you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something\na small number of people want a large amount.  Choose the latter.\nNot all ideas of that type are good startup ideas, but nearly all\ngood startup ideas are of that type.<br/><br/>Imagine a graph whose x axis represents all the people who might\nwant what you're making and whose y axis represents how much they\nwant it.  If you invert the scale on the y axis, you can envision\ncompanies as holes.  Google is an immense crater: hundreds of\nmillions of people use it, and they need it a lot.  A startup just\nstarting out can't expect to excavate that much volume.  So you\nhave two choices about the shape of hole you start with.  You can\neither dig a hole that's broad but shallow, or one that's narrow\nand deep, like a well.<br/><br/>Made-up startup ideas are usually of the first type.  Lots of people\nare mildly interested in a social network for pet owners.<br/><br/>Nearly all good startup ideas are of the second type.  Microsoft\nwas a well when they made Altair Basic.  There were only a couple\nthousand Altair owners, but without this software they were programming\nin machine language.  Thirty years later Facebook had the same\nshape.  Their first site was exclusively for Harvard students, of\nwhich there are only a few thousand, but those few thousand users\nwanted it a lot.<br/><br/>When you have an idea for a startup, ask yourself: who wants this\nright now?  Who wants this so much that they'll use it even when\nit's a crappy version one made by a two-person startup they've never\nheard of?  If you can't answer that, the idea is probably bad. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f3n\"><font color=\"#999999\">3</font></a>]</font><br/><br/>You don't need the narrowness of the well per se.  It's depth you\nneed; you get narrowness as a byproduct of optimizing for depth\n(and speed).  But you almost always do get it.  In practice the\nlink between depth and narrowness is so strong that it's a good\nsign when you know that an idea will appeal strongly to a specific\ngroup or type of user.<br/><br/>But while demand shaped like a well is almost a necessary condition\nfor a good startup idea, it's not a sufficient one.  If Mark\nZuckerberg had built something that could only ever have appealed\nto Harvard students, it would not have been a good startup idea.\nFacebook was a good idea because it started with a small market\nthere was a fast path out of.  Colleges are similar enough that if\nyou build a facebook that works at Harvard, it will work at any\ncollege. So you spread rapidly through all the colleges.  Once you\nhave all the college students, you get everyone else simply by\nletting them in.<br/><br/>Similarly for Microsoft: Basic for the Altair; Basic for other\nmachines; other languages besides Basic; operating systems;\napplications; IPO.<br/><br/>\n<b>Self</b><br/><br/>How do you tell whether there's a path out of an idea?  How do you\ntell whether something is the germ of a giant company, or just a\nniche product?  Often you can't. The founders of Airbnb didn't\nrealize at first how big a market they were tapping.  Initially\nthey had a much narrower idea.  They were going to let hosts rent\nout space on their floors during conventions.  They didn't foresee\nthe expansion of this idea; it forced itself upon them gradually.\nAll they knew at first is that they were onto something.  That's\nprobably as much as Bill Gates or Mark Zuckerberg knew at first.<br/><br/>Occasionally it's obvious from the beginning when there's a path\nout of the initial niche.  And sometimes I can see a path that's\nnot immediately obvious; that's one of our specialties at YC.  But\nthere are limits to how well this can be done, no matter how much\nexperience you have.  The most important thing to understand about\npaths out of the initial idea is the meta-fact that these are hard\nto see.<br/><br/>So if you can't predict whether there's a path out of an idea, how\ndo you choose between ideas?  The truth is disappointing but\ninteresting: if you're the right sort of person, you have the right\nsort of hunches.  If you're at the leading edge of a field that's\nchanging fast, when you have a hunch that something is worth doing,\nyou're more likely to be right.<br/><br/>In <i>Zen and the Art of Motorcycle Maintenance</i>, Robert Pirsig says:\n<blockquote>\n  You want to know how to paint a perfect painting? It's easy.  Make\n  yourself perfect and then just paint naturally.\n</blockquote>\nI've wondered about that passage since I read it in high school.\nI'm not sure how useful his advice is for painting specifically,\nbut it fits this situation well.  Empirically, the way to have good\nstartup ideas is to become the sort of person who has them.<br/><br/>Being at the leading edge of a field doesn't mean you have to be\none of the people pushing it forward.  You can also be at the leading\nedge as a user.  It was not so much because he was a programmer\nthat Facebook seemed a good idea to Mark Zuckerberg as because he\nused computers so much.  If you'd asked most 40 year olds in 2004\nwhether they'd like to publish their lives semi-publicly on the\nInternet, they'd have been horrified at the idea.  But Mark already\nlived online; to him it seemed natural.<br/><br/>Paul Buchheit says that people at the leading edge of a rapidly\nchanging field \"live in the future.\"  Combine that with Pirsig and\nyou get:\n<blockquote>\n  Live in the future, then build what's missing.\n</blockquote>\nThat describes the way many if not most of the biggest startups got\nstarted.  Neither Apple nor Yahoo nor Google nor Facebook were even\nsupposed to be companies at first.  They grew out of things their\nfounders built because there seemed a gap in the world.<br/><br/>If you look at the way successful founders have had their ideas,\nit's generally the result of some external stimulus hitting a\nprepared mind.  Bill Gates and Paul Allen hear about the Altair and\nthink \"I bet we could write a Basic interpreter for it.\" Drew Houston\nrealizes he's forgotten his USB stick and thinks \"I really need to\nmake my files live online.\" Lots of people heard about the Altair.\nLots forgot USB sticks.  The reason those stimuli caused those\nfounders to start companies was that their experiences had prepared\nthem to notice the opportunities they represented.<br/><br/>The verb you want to be using with respect to startup ideas is not\n\"think up\" but \"notice.\" At YC we call ideas that grow naturally\nout of the founders' own experiences \"organic\" startup ideas.  The\nmost successful startups almost all begin this way.<br/><br/>That may not have been what you wanted to hear.  You may have\nexpected recipes for coming up with startup ideas, and instead I'm\ntelling you that the key is to have a mind that's prepared in the\nright way.  But disappointing though it may be, this is the truth.\nAnd it is a recipe of a sort, just one that in the worst case takes\na year rather than a weekend.<br/><br/>If you're not at the leading edge of some rapidly changing field,\nyou can get to one.  For example, anyone reasonably smart can\nprobably get to an edge of programming (e.g. building mobile apps)\nin a year.  Since a successful startup will consume at least 3-5\nyears of your life, a year's preparation would be a reasonable\ninvestment.  Especially if you're also looking for a cofounder.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f4n\"><font color=\"#999999\">4</font></a>]</font><br/><br/>You don't have to learn programming to be at the leading edge of a\ndomain that's changing fast.  Other domains change fast.  But while\nlearning to hack is not necessary, it is for the forseeable future\nsufficient. As Marc Andreessen put it, software is eating the world,\nand this trend has decades left to run.<br/><br/>Knowing how to hack also means that when you have ideas, you'll be\nable to implement them.  That's not absolutely necessary (Jeff Bezos\ncouldn't) but it's an advantage.  It's a big advantage, when you're\nconsidering an idea like putting a college facebook online, if\ninstead of merely thinking \"That's an interesting idea,\" you can\nthink instead \"That's an interesting idea.  I'll try building an\ninitial version tonight.\"  It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating\nnew versions and testing them on users can happen inside one head.<br/><br/>\n<b>Noticing</b><br/><br/>Once you're living in the future in some respect, the way to notice\nstartup ideas is to look for things that seem to be missing.  If\nyou're really at the leading edge of a rapidly changing field, there\nwill be things that are obviously missing.  What won't be obvious\nis that they're startup ideas.  So if you want to find startup\nideas, don't merely turn on the filter \"What's missing?\" Also turn\noff every other filter, particularly \"Could this be a big company?\"\nThere's plenty of time to apply that test later.  But if you're\nthinking about that initially, it may not only filter out lots\nof good ideas, but also cause you to focus on bad ones.<br/><br/>Most things that are missing will take some time to see.  You almost\nhave to trick yourself into seeing the ideas around you.<br/><br/>But you <i>know</i> the ideas are out there.  This is not one of those\nproblems where there might not be an answer.  It's impossibly\nunlikely that this is the exact moment when technological progress\nstops.  You can be sure people are going to build things in the\nnext few years that will make you think \"What did I do before x?\"<br/><br/>And when these problems get solved, they will probably seem flamingly\nobvious in retrospect.  What you need to do is turn off the filters\nthat usually prevent you from seeing them.  The most powerful is\nsimply taking the current state of the world for granted.  Even the\nmost radically open-minded of us mostly do that.  You couldn't get\nfrom your bed to the front door if you stopped to question everything.<br/><br/>But if you're looking for startup ideas you can sacrifice some of\nthe efficiency of taking the status quo for granted and start to\nquestion things.  Why is your inbox overflowing?  Because you get\na lot of email, or because it's hard to get email out of your inbox?\nWhy do you get so much email?  What problems are people trying to\nsolve by sending you email?  Are there better ways to solve them?\nAnd why is it hard to get emails out of your inbox?  Why do you\nkeep emails around after you've read them?  Is an inbox the optimal\ntool for that?<br/><br/>Pay particular attention to things that chafe you.  The advantage\nof taking the status quo for granted is not just that it makes life\n(locally) more efficient, but also that it makes life more tolerable.\nIf you knew about all the things we'll get in the next 50 years but\ndon't have yet, you'd find present day life pretty constraining,\njust as someone from the present would if they were sent back 50\nyears in a time machine.  When something annoys you, it could be\nbecause you're living in the future.<br/><br/>When you find the right sort of problem, you should probably be\nable to describe it as <i>obvious</i>, at least to you.  When we started\nViaweb, all the online stores were built by hand, by web designers\nmaking individual HTML pages.  It was obvious to us as programmers\nthat these sites would have to be generated by software.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f5n\"><font color=\"#999999\">5</font></a>]</font><br/><br/>Which means, strangely enough, that coming up with startup ideas\nis a question of seeing the obvious.  That suggests how weird this\nprocess is: you're trying to see things that are obvious, and yet\nthat you hadn't seen.<br/><br/>Since what you need to do here is loosen up your own mind, it may\nbe best not to make too much of a direct frontal attack on the\nproblem â€” i.e. to sit down and try to think of ideas.  The best\nplan may be just to keep a background process running, looking for\nthings that seem to be missing.  Work on hard problems, driven\nmainly by curiosity, but have a second self watching over your\nshoulder, taking note of gaps and anomalies.  \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f6n\"><font color=\"#999999\">6</font></a>]</font><br/><br/>Give yourself some time.  You have a lot of control over the rate\nat which you turn yours into a prepared mind, but you have less\ncontrol over the stimuli that spark ideas when they hit it.  If\nBill Gates and Paul Allen had constrained themselves to come up\nwith a startup idea in one month, what if they'd chosen a month\nbefore the Altair appeared?  They probably would have worked on a\nless promising idea.  Drew Houston did work on a less promising\nidea before Dropbox: an SAT prep startup.  But Dropbox was a much\nbetter idea, both in the absolute sense and also as a match for his\nskills.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f7n\"><font color=\"#999999\">7</font></a>]</font><br/><br/>A good way to trick yourself into noticing ideas is to work on\nprojects that seem like they'd be cool.  If you do that, you'll\nnaturally tend to build things that are missing.  It wouldn't seem\nas interesting to build something that already existed.<br/><br/>Just as trying to think up startup ideas tends to produce bad ones,\nworking on things that could be dismissed as \"toys\" often produces\ngood ones.  When something is described as a toy, that means it has\neverything an idea needs except being important.  It's cool; users\nlove it; it just doesn't matter.  But if you're living in the future\nand you build something cool that users love, it may matter more\nthan outsiders think.  Microcomputers seemed like toys when Apple\nand Microsoft started working on them.  I'm old enough to remember\nthat era; the usual term for people with their own microcomputers\nwas \"hobbyists.\"  BackRub seemed like an inconsequential science\nproject.  The Facebook was just a way for undergrads to stalk one\nanother.<br/><br/>At YC we're excited when we meet startups working on things that\nwe could imagine know-it-alls on forums dismissing as toys.  To us\nthat's positive evidence an idea is good.<br/><br/>If you can afford to take a long view (and arguably you can't afford\nnot to), you can turn \"Live in the future and build what's missing\"\ninto something even better:\n<blockquote>\n  Live in the future and build what seems interesting.\n</blockquote><br/><br/>\n<b>School</b><br/><br/>That's what I'd advise college students to do, rather than trying\nto learn about \"entrepreneurship.\"  \"Entrepreneurship\" is something\nyou learn best by doing it.  The examples of the most successful\nfounders make that clear.  What you should be spending your time\non in college is ratcheting yourself into the future.  College is\nan incomparable opportunity to do that.  What a waste to sacrifice\nan opportunity to solve the hard part of starting a startup â€” becoming \nthe sort of person who can have organic startup ideas â€” by \nspending time learning about the easy part.  Especially since\nyou won't even really learn about it, any more than you'd learn\nabout sex in a class.  All you'll learn is the words for things.<br/><br/>The clash of domains is a particularly fruitful source of ideas.\nIf you know a lot about programming and you start learning about\nsome other field, you'll probably see problems that software could\nsolve.  In fact, you're doubly likely to find good problems in\nanother domain: (a) the inhabitants of that domain are not as likely\nas software people to have already solved their problems with\nsoftware, and (b) since you come into the new domain totally ignorant,\nyou don't even know what the status quo is to take it for granted.<br/><br/>So if you're a CS major and you want to start a startup, instead\nof taking a class on entrepreneurship you're better off taking a\nclass on, say, genetics.  Or better still, go work for a biotech\ncompany.  CS majors normally get summer jobs at computer hardware\nor software companies.  But if you want to find startup ideas, you\nmight do better to get a summer job in some unrelated field. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f8n\"><font color=\"#999999\">8</font></a>]</font><br/><br/>Or don't take any extra classes, and just build things.  It's no\ncoincidence that Microsoft and Facebook both got started in January.\nAt Harvard that is (or was) Reading Period, when students have no\nclasses to attend because they're supposed to be studying for finals.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f9n\"><font color=\"#999999\">9</font></a>]</font><br/><br/>But don't feel like you have to build things that will become startups.  That's\npremature optimization. Just build things.  Preferably with other\nstudents.  It's not just the classes that make a university such a\ngood place to crank oneself into the future.  You're also surrounded\nby other people trying to do the same thing.  If you work together\nwith them on projects, you'll end up producing not just organic\nideas, but organic ideas with organic founding teams â€” and that,\nempirically, is the best combination.<br/><br/>Beware of research.  If an undergrad writes something all his friends\nstart using, it's quite likely to represent a good startup idea.\nWhereas a PhD dissertation is extremely unlikely to.  For some\nreason, the more a project has to count as research, the less likely\nit is to be something that could be turned into a startup.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f10n\"><font color=\"#999999\">10</font></a>]</font>\nI think the reason is that the subset of ideas that count as research\nis so narrow that it's unlikely that a project that satisfied that\nconstraint would also satisfy the orthogonal constraint of solving\nusers' problems.  Whereas when students (or professors) build\nsomething as a side-project, they automatically gravitate toward\nsolving users' problems â€” perhaps even with an additional energy\nthat comes from being freed from the constraints of research.<br/><br/>\n<b>Competition</b><br/><br/>Because a good idea should seem obvious, when you have one you'll\ntend to feel that you're late.  Don't let that deter you.  Worrying\nthat you're late is one of the signs of a good idea.  Ten minutes\nof searching the web will usually settle the question.  Even if you\nfind someone else working on the same thing, you're probably not\ntoo late.  It's exceptionally rare for startups to be killed by\ncompetitors â€” so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that\nwould prevent users from choosing you, don't discard the idea.<br/><br/>If you're uncertain, ask users.  The question of whether you're too\nlate is subsumed by the question of whether anyone urgently needs\nwhat you plan to make.  If you have something that no competitor\ndoes and that some subset of users urgently need, you have a\nbeachhead.  \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f11n\"><font color=\"#999999\">11</font></a>]</font><br/><br/>The question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing\nsomething lots more people will be doing in the future, then it's\nprobably big enough no matter how small it is.  For example, if\nyou're building something differentiated from competitors by the\nfact that it works on phones, but it only works on the newest phones,\nthat's probably a big enough beachhead.<br/><br/>Err on the side of doing things where you'll face competitors.\nInexperienced founders usually give competitors more credit than\nthey deserve.  Whether you succeed depends far more on you than on\nyour competitors.  So better a good idea with competitors than a\nbad one without.<br/><br/>You don't need to worry about entering a \"crowded market\" so long\nas you have a thesis about what everyone else in it is overlooking.\nIn fact that's a very promising starting point.  Google was that\ntype of idea.  Your thesis has to be more precise than \"we're going\nto make an x that doesn't suck\" though. You have to be able to\nphrase it in terms of something the incumbents are overlooking.\nBest of all is when you can say that they didn't have the courage\nof their convictions, and that your plan is what they'd have done\nif they'd followed through on their own insights.  Google was that\ntype of idea too.  The search engines that preceded them shied away\nfrom the most radical implications of what they were doing â€” particularly \nthat the better a job they did, the faster users would\nleave.<br/><br/>A crowded market is actually a good sign, because it means both\nthat there's demand and that none of the existing solutions are\ngood enough.  A startup can't hope to enter a market that's obviously\nbig and yet in which they have no competitors.  So any startup that\nsucceeds is either going to be entering a market with existing\ncompetitors, but armed with some secret weapon that will get them\nall the users (like Google), or entering a market that looks small\nbut which will turn out to be big (like Microsoft).  \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f12n\"><font color=\"#999999\">12</font></a>]</font><br/><br/>\n<b>Filters</b><br/><br/>There are two more filters you'll need to turn off if you want to\nnotice startup ideas: the unsexy filter and the schlep filter.<br/><br/>Most programmers wish they could start a startup by just writing\nsome brilliant code, pushing it to a server, and having users pay\nthem lots of money.  They'd prefer not to deal with tedious problems\nor get involved in messy ways with the real world.  Which is a\nreasonable preference, because such things slow you down.  But this\npreference is so widespread that the space of convenient startup\nideas has been stripped pretty clean.  If you let your mind wander\na few blocks down the street to the messy, tedious ideas, you'll\nfind valuable ones just sitting there waiting to be implemented.<br/><br/>The schlep filter is so dangerous that I wrote a separate essay\nabout the condition it induces, which I called \n<a href=\"https://paulgraham.com/schlep.html\">schlep blindness</a>.\nI gave Stripe as an example of a startup that benefited from turning\noff this filter, and a pretty striking example it is.  Thousands\nof programmers were in a position to see this idea; thousands of\nprogrammers knew how painful it was to process payments before\nStripe.  But when they looked for startup ideas they didn't see\nthis one, because unconsciously they shrank from having to deal\nwith payments.  And dealing with payments is a schlep for Stripe,\nbut not an intolerable one.  In fact they might have had net less\npain; because the fear of dealing with payments kept most people\naway from this idea, Stripe has had comparatively smooth sailing\nin other areas that are sometimes painful, like user acquisition.\nThey didn't have to try very hard to make themselves heard by users,\nbecause users were desperately waiting for what they were building.<br/><br/>The unsexy filter is similar to the schlep filter, except it keeps\nyou from working on problems you despise rather than ones you fear.\nWe overcame this one to work on Viaweb. There were interesting\nthings about the architecture of our software, but we weren't\ninterested in ecommerce per se.  We could see the problem was one\nthat needed to be solved though.<br/><br/>Turning off the schlep filter is more important than turning off\nthe unsexy filter, because the schlep filter is more likely to be\nan illusion.  And even to the degree it isn't, it's a worse form\nof self-indulgence.  Starting a successful startup is going to be\nfairly laborious no matter what.  Even if the product doesn't entail\na lot of schleps, you'll still have plenty dealing with investors,\nhiring and firing people, and so on.  So if there's some idea you\nthink would be cool but you're kept away from by fear of the schleps\ninvolved, don't worry: any sufficiently good idea will have as many.<br/><br/>The unsexy filter, while still a source of error, is not as entirely\nuseless as the schlep filter.  If you're at the leading edge of a\nfield that's changing rapidly, your ideas about what's sexy will\nbe somewhat correlated with what's valuable in practice.  Particularly\nas you get older and more experienced.  Plus if you find an idea\nsexy, you'll work on it more enthusiastically. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f13n\"><font color=\"#999999\">13</font></a>]</font><br/><br/>\n<b>Recipes</b><br/><br/>While the best way to discover startup ideas is to become the sort\nof person who has them and then build whatever interests you,\nsometimes you don't have that luxury.  Sometimes you need an idea\nnow.  For example, if you're working on a startup and your initial\nidea turns out to be bad.<br/><br/>For the rest of this essay I'll talk about tricks for coming up\nwith startup ideas on demand.  Although empirically you're better\noff using the organic strategy, you could succeed this way. You\njust have to be more disciplined.  When you use the organic method,\nyou don't even notice an idea unless it's evidence that something\nis truly missing.  But when you make a conscious effort to think\nof startup ideas, you have to replace this natural constraint with\nself-discipline.  You'll see a lot more ideas, most of them bad,\nso you need to be able to filter them.<br/><br/>One of the biggest dangers of not using the organic method is the\nexample of the organic method.  Organic ideas feel like inspirations.\nThere are a lot of stories about successful startups that began\nwhen the founders had what seemed a crazy idea but \"just knew\" it\nwas promising.  When you feel that about an idea you've had while\ntrying to come up with startup ideas, you're probably mistaken.<br/><br/>When searching for ideas, look in areas where you have some expertise.\nIf you're a database expert, don't build a chat app for teenagers\n(unless you're also a teenager).  Maybe it's a good idea, but you\ncan't trust your judgment about that, so ignore it.  There have to\nbe other ideas that involve databases, and whose quality you can\njudge.  Do you find it hard to come up with good ideas involving\ndatabases?  That's because your expertise raises your standards.\nYour ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.<br/><br/>The place to start looking for ideas is things you need.  There\n<i>must</i> be things you need.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f14n\"><font color=\"#999999\">14</font></a>]</font><br/><br/>One good trick is to ask yourself whether in your previous job you\never found yourself saying \"Why doesn't someone make x?  If someone\nmade x we'd buy it in a second.\" If you can think of any x people\nsaid that about, you probably have an idea.  You know there's demand,\nand people don't say that about things that are impossible to build.<br/><br/>More generally, try asking yourself whether there's something unusual\nabout you that makes your needs different from most other people's.\nYou're probably not the only one.  It's especially good if you're\ndifferent in a way people will increasingly be.<br/><br/>If you're changing ideas, one unusual thing about you is the idea\nyou'd previously been working on.  Did you discover any needs while\nworking on it?  Several well-known startups began this way.  Hotmail\nbegan as something its founders wrote to talk about their previous\nstartup idea while they were working at their day jobs. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f15n\"><font color=\"#999999\">15</font></a>]</font><br/><br/>A particularly promising way to be unusual is to be young.  Some\nof the most valuable new ideas take root first among people in their\nteens and early twenties.  And while young founders are at a\ndisadvantage in some respects, they're the only ones who really\nunderstand their peers.  It would have been very hard for someone\nwho wasn't a college student to start Facebook.  So if you're a\nyoung founder (under 23 say), are there things you and your friends\nwould like to do that current technology won't let you?<br/><br/>The next best thing to an unmet need of your own is an unmet need\nof someone else.  Try talking to everyone you can about the gaps\nthey find in the world.  What's missing?  What would they like to\ndo that they can't?  What's tedious or annoying, particularly in\ntheir work?  Let the conversation get general; don't be trying too\nhard to find startup ideas.  You're just looking for something to\nspark a thought.  Maybe you'll notice a problem they didn't consciously\nrealize they had, because you know how to solve it.<br/><br/>When you find an unmet need that isn't your own, it may be somewhat\nblurry at first.  The person who needs something may not know exactly\nwhat they need.  In that case I often recommend that founders act\nlike consultants â€” that they do what they'd do if they'd been\nretained to solve the problems of this one user.  People's problems\nare similar enough that nearly all the code you write this way will\nbe reusable, and whatever isn't will be a small price to start out\ncertain that you've reached the bottom of the well.\n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f16n\"><font color=\"#999999\">16</font></a>]</font><br/><br/>One way to ensure you do a good job solving other people's problems\nis to make them your own.  When Rajat Suri of E la Carte decided\nto write software for restaurants, he got a job as a waiter to learn\nhow restaurants worked.  That may seem like taking things to extremes,\nbut startups are extreme.  We love it when founders do such things.<br/><br/>In fact, one strategy I recommend to people who need a new idea is\nnot merely to turn off their schlep and unsexy filters, but to seek\nout ideas that are unsexy or involve schleps.  Don't try to start\nTwitter.  Those ideas are so rare that you can't find them by looking\nfor them.  Make something unsexy that people will pay you for.<br/><br/>A good trick for bypassing the schlep and to some extent the unsexy\nfilter is to ask what you wish someone else would build, so that\nyou could use it.  What would you pay for right now?<br/><br/>Since startups often garbage-collect broken companies and industries,\nit can be a good trick to look for those that are dying, or deserve\nto, and try to imagine what kind of company would profit from their\ndemise.  For example, journalism is in free fall at the moment.\nBut there may still be money to be made from something like journalism.\nWhat sort of company might cause people in the future to say \"this\nreplaced journalism\" on some axis?<br/><br/>But imagine asking that in the future, not now.  When one company\nor industry replaces another, it usually comes in from the side.\nSo don't look for a replacement for x; look for something that\npeople will later say turned out to be a replacement for x.  And\nbe imaginative about the axis along which the replacement occurs.\nTraditional journalism, for example, is a way for readers to get\ninformation and to kill time, a way for writers to make money and\nto get attention, and a vehicle for several different types of\nadvertising.  It could be replaced on any of these axes (it has\nalready started to be on most).<br/><br/>When startups consume incumbents, they usually start by serving\nsome small but important market that the big players ignore.  It's\nparticularly good if there's an admixture of disdain in the big\nplayers' attitude, because that often misleads them.  For example,\nafter Steve Wozniak built the computer that became the Apple I, he\nfelt obliged to give his then-employer Hewlett-Packard the option\nto produce it.  Fortunately for him, they turned it down, and one\nof the reasons they did was that it used a TV for a monitor, which\nseemed intolerably dï¿½classï¿½ to a high-end hardware company like HP\nwas at the time. \n<font color=\"#999999\">[<a href=\"https://paulgraham.com/startupideas.html#f17n\"><font color=\"#999999\">17</font></a>]</font><br/><br/>Are there groups of \n<a href=\"https://paulgraham.com/marginal.html\">scruffy</a> \nbut sophisticated users like the early\nmicrocomputer \"hobbyists\" that are currently being ignored by the\nbig players?  A startup with its sights set on bigger things can\noften capture a small market easily by expending an effort that\nwouldn't be justified by that market alone.<br/><br/>Similarly, since the most successful startups generally ride some\nwave bigger than themselves, it could be a good trick to look for\nwaves and ask how one could benefit from them.  The prices of gene\nsequencing and 3D printing are both experiencing Moore's Law-like\ndeclines.  What new things will we be able to do in the new world\nwe'll have in a few years?  What are we unconsciously ruling out\nas impossible that will soon be possible?<br/><br/>\n<b>Organic</b><br/><br/>But talking about looking explicitly for waves makes it clear that\nsuch recipes are plan B for getting startup ideas.  Looking for\nwaves is essentially a way to simulate the organic method.  If\nyou're at the leading edge of some rapidly changing field, you don't\nhave to look for waves; you are the wave.<br/><br/>Finding startup ideas is a subtle business, and that's why most\npeople who try fail so miserably.  It doesn't work well simply to\ntry to think of startup ideas.  If you do that, you get bad ones\nthat sound dangerously plausible.  The best approach is more indirect:\nif you have the right sort of background, good startup ideas will\nseem obvious to you.  But even then, not immediately.  It takes\ntime to come across situations where you notice something missing.\nAnd often these gaps won't seem to be ideas for companies, just\nthings that would be interesting to build.  Which is why it's good\nto have the time and the inclination to build things just because\nthey're interesting.<br/><br/>Live in the future and build what seems interesting.  Strange as\nit sounds, that's the real recipe.<br/><br/><br/><br/><br/><br/><br/><br/>\n<b>Notes</b><br/><br/>[<a name=\"f1n\"><font color=\"#000000\">1</font></a>]\nThis form of bad idea has been around as long as the web.  It\nwas common in the 1990s, except then people who had it used to say\nthey were going to create a portal for x instead of a social network\nfor x.  Structurally the idea is stone soup: you post a sign saying\n\"this is the place for people interested in x,\" and all those people\nshow up and you make money from them.  What lures founders into\nthis sort of idea are statistics about the millions of people who\nmight be interested in each type of x.  What they forget is that\nany given person might have 20 affinities by this standard, and no\none is going to visit 20 different communities regularly.<br/><br/>[<a name=\"f2n\"><font color=\"#000000\">2</font></a>]\nI'm not saying, incidentally, that I know for sure a social\nnetwork for pet owners is a bad idea.  I know it's a bad idea the\nway I know randomly generated DNA would not produce a viable organism.\nThe set of plausible sounding startup ideas is many times larger\nthan the set of good ones, and many of the good ones don't even\nsound that plausible.  So if all you know about a startup idea is\nthat it sounds plausible, you have to assume it's bad.<br/><br/>[<a name=\"f3n\"><font color=\"#000000\">3</font></a>]\nMore precisely, the users' need has to give them sufficient\nactivation energy to start using whatever you make, which can vary\na lot.  For example, the activation energy for enterprise software\nsold through traditional channels is very high, so you'd have to\nbe a <i>lot</i> better to get users to switch.  Whereas the activation\nenergy required to switch to a new search engine is low.  Which in\nturn is why search engines are so much better than enterprise\nsoftware.<br/><br/>[<a name=\"f4n\"><font color=\"#000000\">4</font></a>]\nThis gets harder as you get older.  While the space of ideas\ndoesn't have dangerous local maxima, the space of careers does.\nThere are fairly high walls between most of the paths people take\nthrough life, and the older you get, the higher the walls become.<br/><br/>[<a name=\"f5n\"><font color=\"#000000\">5</font></a>]\nIt was also obvious to us that the web was going to be a big\ndeal.  Few non-programmers grasped that in 1995, but the programmers\nhad seen what GUIs had done for desktop computers.<br/><br/>[<a name=\"f6n\"><font color=\"#000000\">6</font></a>]\nMaybe it would work to have this second self keep a journal,\nand each night to make a brief entry listing the gaps and anomalies\nyou'd noticed that day.  Not startup ideas, just the raw gaps and\nanomalies.<br/><br/>[<a name=\"f7n\"><font color=\"#000000\">7</font></a>]\nSam Altman points out that taking time to come up with an\nidea is not merely a better strategy in an absolute sense, but also\nlike an undervalued stock in that so few founders do it.<br/><br/>There's comparatively little competition for the best ideas, because\nfew founders are willing to put in the time required to notice them.\nWhereas there is a great deal of competition for mediocre ideas,\nbecause when people make up startup ideas, they tend to make up the\nsame ones.<br/><br/>[<a name=\"f8n\"><font color=\"#000000\">8</font></a>]\nFor the computer hardware and software companies, summer jobs\nare the first phase of the recruiting funnel.  But if you're good\nyou can skip the first phase.  If you're good you'll have no trouble\ngetting hired by these companies when you graduate, regardless of\nhow you spent your summers.<br/><br/>[<a name=\"f9n\"><font color=\"#000000\">9</font></a>]\nThe empirical evidence suggests that if colleges want to help\ntheir students start startups, the best thing they can do is leave\nthem alone in the right way.<br/><br/>[<a name=\"f10n\"><font color=\"#000000\">10</font></a>]\nI'm speaking here of IT startups; in biotech things are different.<br/><br/>[<a name=\"f11n\"><font color=\"#000000\">11</font></a>]\nThis is an instance of a more general rule: focus on users,\nnot competitors.  The most important information about competitors\nis what you learn via users anyway.<br/><br/>[<a name=\"f12n\"><font color=\"#000000\">12</font></a>]\nIn practice most successful startups have elements of both.\nAnd you can describe each strategy in terms of the other by adjusting\nthe boundaries of what you call the market.  But it's useful to\nconsider these two ideas separately.<br/><br/>[<a name=\"f13n\"><font color=\"#000000\">13</font></a>]\nI almost hesitate to raise that point though.  Startups are\nbusinesses; the point of a business is to make money; and with that\nadditional constraint, you can't expect you'll be able to spend all\nyour time working on what interests you most.<br/><br/>[<a name=\"f14n\"><font color=\"#000000\">14</font></a>]\nThe need has to be a strong one.  You can retroactively\ndescribe any made-up idea as something you need.  But do you really\nneed that recipe site or local event aggregator as much as Drew\nHouston needed Dropbox, or Brian Chesky and Joe Gebbia needed Airbnb?<br/><br/>Quite often at YC I find myself asking founders \"Would you use this\nthing yourself, if you hadn't written it?\" and you'd be surprised\nhow often the answer is no.<br/><br/>[<a name=\"f15n\"><font color=\"#000000\">15</font></a>]\nPaul Buchheit points out that trying to sell something bad\ncan be a source of better ideas:<br/><br/>\"The best technique I've found for dealing with YC companies that\nhave bad ideas is to tell them to go sell the product ASAP (before\nwasting time building it). Not only do they learn that nobody\nwants what they are building, they very often come back with a\nreal idea that they discovered in the process of trying to sell\nthe bad idea.\"<br/><br/>[<a name=\"f16n\"><font color=\"#000000\">16</font></a>]\nHere's a recipe that might produce the next Facebook, if\nyou're college students.  If you have a connection to one of the\nmore powerful sororities at your school, approach the queen bees\nthereof and offer to be their personal IT consultants, building\nanything they could imagine needing in their social lives that\ndidn't already exist.  Anything that got built this way would be\nvery promising, because such users are not just the most demanding\nbut also the perfect point to spread from.<br/><br/>I have no idea whether this would work.<br/><br/>[<a name=\"f17n\"><font color=\"#000000\">17</font></a>]\nAnd the reason it used a TV for a monitor is that Steve Wozniak\nstarted out by solving his own problems.  He, like most of his\npeers, couldn't afford a monitor.<br/><br/><br/><br/><b>Thanks</b> to Sam Altman, Mike Arrington, Paul Buchheit, John Collison,\nPatrick Collison, Garry Tan, and Harj Taggar for reading drafts of\nthis, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan,\nMike Moritz and Kevin Systrom for answering my questions about\nstartup history.<br/><br/></br></p></font>","date":"2012-11-01T00:00:00Z"}
{"href":"start.html","title":"How to Start a Startup","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\nMarch 2005<br/><br><i>(This essay is derived from a talk at the Harvard Computer\nSociety.)</i><br/><br/>You need three things to create a successful startup: to start with\ngood people, to make something customers actually want, and to spend\nas little money as possible.  Most startups that fail do it because\nthey fail at one of these.  A startup that does all three will\nprobably succeed.<br/><br/>And that's kind of exciting, when you think about it, because all\nthree are doable.  Hard, but doable.  And since a startup that\nsucceeds ordinarily makes its founders rich, that implies getting\nrich is doable too.  Hard, but doable.<br/><br/>If there is one message I'd like to get across about startups,\nthat's it.  There is no magically difficult step that requires\nbrilliance to solve.<br/><br/><b>The Idea</b><br/><br/>In particular, you don't need a brilliant \n<a href=\"https://paulgraham.com/ideas.html\">idea</a> to start a startup\naround.   The way a startup makes money is to offer people better\ntechnology than they have now.  But what people have now is often\nso bad that it doesn't take brilliance to do better.<br/><br/>Google's plan, for example, was simply to create a search site that\ndidn't suck.  They had three new ideas: index more of the Web, use\nlinks to rank search results, and have clean, simple web pages with\nunintrusive keyword-based ads.  Above all, they were determined to\nmake a site that was good to use.  No doubt there are great technical\ntricks within Google, but the overall plan was straightforward.\nAnd while they probably have bigger ambitions now, this alone brings\nthem a billion dollars a year. [1]<br/><br/>There are plenty of other areas that are just as backward as search\nwas before Google.  I can think of several heuristics for generating\nideas for startups, but most reduce to this: look at something\npeople are trying to do, and figure out how to do it in a way that\ndoesn't suck.<br/><br/>For example, dating sites currently suck far worse than search did\nbefore Google.  They all use the same simple-minded model.\nThey seem to have approached the problem by thinking about how to\ndo database matches instead of how dating works in the real world.\nAn undergrad could build something better as a class project.  And\nyet there's a lot of money at stake.  Online dating is a valuable\nbusiness now, and it might be worth a hundred times as much if it\nworked.<br/><br/>An idea for a startup, however, is only a beginning.  A lot of\nwould-be startup founders think the key to the whole process is the\ninitial idea, and from that point all you have to do is execute.\nVenture capitalists know better.  If you go to VC firms with a\nbrilliant idea that you'll tell them about if they sign a nondisclosure\nagreement, most will tell you to get lost.   That shows how much a \nmere idea is worth. The market price is less than the inconvenience \nof signing an NDA.<br/><br/>Another sign of how little the initial idea is worth is the number\nof startups that change their plan en route. Microsoft's original\nplan was to make money selling programming languages, of all things.\nTheir current business model didn't occur to them until IBM dropped\nit in their lap five years later.<br/><br/>Ideas for startups are worth something, certainly, but the trouble\nis, they're not transferrable.  They're not something you could\nhand to someone else to execute.  Their value is mainly as starting\npoints: as questions for the people who had them to continue thinking\nabout.<br/><br/>What matters is not ideas, but the people who have them.  Good\npeople can fix bad ideas, but good ideas can't save bad people.  \n<!-- So let's talk about people. --><br/><br/><b>People</b><br/><br/>What do I mean by good people?  One of the best tricks I learned   \nduring <a href=\"https://paulgraham.com/road.html\">our</a> startup was a rule for deciding \nwho to hire.  Could you\ndescribe the person as an animal?  It might be hard to translate   \nthat into another language, but I think everyone in the US knows  \nwhat it means.  It means someone who takes their work a little too   \nseriously; someone who does what they do so well that they pass\nright through professional and cross over into obsessive.<br/><br/>What it means specifically depends on the job: a salesperson who\njust won't take no for an answer; a hacker who will stay up till   \n4:00 AM rather than go to bed leaving code with a bug in it; a PR   \nperson who will cold-call <i>New York Times</i> reporters on their cell\nphones; a graphic designer who feels physical pain when something \nis two millimeters out of place.<br/><br/>Almost everyone who worked for us was an animal at what they did. \nThe woman in charge of sales was so tenacious that I used to feel\nsorry for potential customers on the phone with her.  You could  \nsense them squirming on the hook, but you knew there would be no  \nrest for them till they'd signed up.<br/><br/>If you think about people you know, you'll find the animal test is\neasy to apply.  Call the person's image to mind and imagine the\nsentence \"so-and-so is an animal.\"  If you laugh, they're not.  You\ndon't need or perhaps even want this quality in big companies, but\nyou need it in a startup.<br/><br/>For programmers we had three additional tests.  Was the person\ngenuinely smart?  If so, could they actually get things done?  And\nfinally, since a few good hackers have unbearable personalities,   \ncould we stand to have them around?<br/><br/>That last test filters out surprisingly few people.  We could bear\nany amount of nerdiness if someone was truly smart.  What we couldn't\nstand were people with a lot of attitude.  But most of those weren't\ntruly smart, so our third test was largely a restatement of the\nfirst.<br/><br/>When nerds are unbearable it's usually because they're trying too\nhard to seem smart.  But the smarter they are, the less pressure\nthey feel to act smart.  So as a rule you can recognize genuinely\nsmart people by their ability to say things like \"I don't know,\"   \n\"Maybe you're right,\" and \"I don't understand x well enough.\"<br/><br/>This technique doesn't always work, because people can be influenced\nby their environment.  In the MIT CS department, there seems to be\na tradition of acting like a brusque know-it-all. I'm told it derives\nultimately from Marvin Minsky, in the same way the classic airline\npilot manner is said to derive from Chuck Yeager.  Even genuinely\nsmart people start to act this way there, so you have to make\nallowances.<br/><br/>It helped us to have Robert Morris, who is one of the readiest to\nsay \"I don't know\" of anyone I've met.  (At least, he was before he \nbecame a professor at MIT.)  No one dared put on attitude around   \nRobert, because he was obviously smarter than they were and yet had\nzero attitude himself.<br/><br/>Like most startups, ours began with a group of friends, and it was\nthrough personal contacts that we got most of the people we hired.\nThis is a crucial difference between startups and big companies.\nBeing friends with someone for even a couple days will tell you \nmore than companies could ever learn in interviews.  [2]<br/><br/>It's no coincidence that startups start around universities, because\nthat's where smart people meet.  It's not what people learn in    \nclasses at MIT and Stanford that has made technology companies\nspring up around them.  They could sing campfire songs in the classes\nso long as admissions worked the same.<br/><br/>If you start a startup, there's a good chance it will be with people\nyou know from college or grad school.  So in theory you ought to  \ntry to make friends with as many smart people as you can in school,\nright?  Well, no.  Don't make a conscious effort to schmooze; that\ndoesn't work well with hackers.<br/><br/>What you should do in college is work on your own projects.  Hackers\nshould do this even if they don't plan to start startups, because \nit's the only real way to learn how to program.   In some cases you\nmay collaborate with other students, and this is the best way to\nget to know good hackers.  The project may even grow into a startup.\nBut once again, I wouldn't aim too directly at either target.  Don't\nforce things; just work on stuff you like with people you like.<br/><br/>Ideally you want between two and four founders.  It would be hard\nto start with just one.  One person would find the moral weight of\nstarting a company hard to bear.  Even Bill Gates, who seems to be   \nable to bear a good deal of moral weight, had to have a co-founder. \nBut you don't want so many founders that the company starts to look\nlike a group photo.  Partly because you don't need a lot of people\nat first, but mainly because the more founders you have, the worse\ndisagreements you'll have. When there are just two or three founders,\nyou know you have to resolve disputes immediately or perish.  If\nthere are seven or eight, disagreements can linger and harden into\nfactions.  You don't want mere voting; you need unanimity.<br/><br/>In a technology startup, which most startups are, the founders\nshould include technical people.   During the Internet Bubble there \nwere a number of startups founded by business people who then went\nlooking for hackers to create their product for them.  This doesn't  \nwork well.  Business people are bad at deciding what to do with   \ntechnology, because they don't know what the options are, or which\nkinds of problems are hard and which are easy.  And when business\npeople try to hire hackers, they can't tell which ones are \n<a href=\"https://paulgraham.com/gh.html\">good</a>.\nEven other hackers have a hard time doing that. \nFor business people it's roulette.<br/><br/>Do the founders of a startup have to include business people?  That\ndepends.  We thought so when we started ours, and we asked several \npeople who were said to know about this mysterious thing called\n\"business\" if they would be the president.  But they all said no,\nso I had to do it myself.  And what I discovered was that business\nwas no great mystery.   It's not something like physics or medicine\nthat requires extensive study.  You just try to get people to pay\nyou for stuff.<br/><br/>I think the reason I made such a mystery of business was that I was\ndisgusted by the idea of doing it.  I wanted to work in the pure,   \nintellectual world of software, not deal with customers' mundane  \nproblems.  People who don't want to get dragged into some kind of\nwork often develop a protective incompetence at it.  Paul Erdos was\nparticularly good at this.  By seeming unable even to cut a grapefruit\nin half (let alone go to the store and buy one), he forced other\npeople to do such things for him, leaving all his time free for\nmath.  Erdos was an extreme case, but most husbands use the same  \ntrick to some degree.<br/><br/>Once I was forced to discard my protective incompetence, I found\nthat business was neither so hard nor so boring as I feared.  There\nare esoteric areas of business that are quite hard, like tax law\nor the pricing of derivatives, but you don't need to know about   \nthose in a startup.  All you need to know about business to run a  \nstartup are commonsense things people knew before there were business\nschools, or even universities.<br/><br/>If you work your way down the Forbes 400 making an x next to the   \nname of each person with an MBA, you'll learn something important\nabout business school.  After Warren Buffett, you don't hit another \nMBA till number 22,\nPhil Knight, the CEO of Nike.  There are only 5 MBAs in the top\n50.  What you notice in the Forbes 400 are a lot of people with      \ntechnical backgrounds.  Bill Gates, Steve Jobs, Larry Ellison,\nMichael Dell, Jeff Bezos, Gordon Moore.  The rulers of the technology\nbusiness tend to come from technology, not business.  So if you   \nwant to invest two years in something that will help you succeed  \nin business, the evidence suggests you'd do better to learn how to   \nhack than get an MBA. [3]<br/><br/>There is one reason you might want to include business people in a\nstartup, though: because you have to have at least one person willing\nand able to focus on what customers want. Some believe only business\npeople can do this-- that hackers can implement software, but not   \ndesign it.  That's nonsense.  There's nothing about knowing how to\nprogram that prevents hackers from understanding users, or about\nnot knowing how to program that magically enables business people \nto understand them.<br/><br/>If you can't understand users, however, you should either learn how\nor find a co-founder who can.  That is the single most important\nissue for technology startups, and the rock that sinks more of them\nthan anything else.<br/><br/><b>What Customers Want</b><br/><br/>It's not just startups that have to worry about this.  I think most\nbusinesses that fail do it because they don't give customers what\nthey want.  Look at restaurants.  A large percentage fail, about a\nquarter in the first year.  But can you think of one restaurant\nthat had really good food and went out of business?<br/><br/>Restaurants with great food seem to prosper no matter what.  A    \nrestaurant with great food can be expensive, crowded, noisy, dingy,\nout of the way, and even have bad service, and people will keep\ncoming.  It's true that a restaurant with mediocre food can sometimes \nattract customers through gimmicks.  But that approach is very  \nrisky.  It's more straightforward just to make the food good.<br/><br/>It's the same with technology.  You hear all kinds of reasons why\nstartups fail.  But can you think of one that had a massively popular\nproduct and still failed?<br/><br/>In nearly every failed startup, the real problem was that customers\ndidn't want the product.  For most, the cause of death is listed  \nas \"ran out of funding,\" but that's only the immediate cause.  Why \ncouldn't they get more funding?  Probably because the product was\na dog, or never seemed likely to be done, or both.<br/><br/>When I was trying to think of the things every startup needed to   \ndo, I almost included a fourth: get a version 1 out as soon as you\ncan.  But I decided not to, because that's implicit in making\nsomething customers want.  The only way to make something customers\nwant is to get a prototype in front of them and refine it based on   \ntheir reactions.<br/><br/>The other approach is what I call the \"Hail Mary\" strategy.  You  \nmake elaborate plans for a product, hire a team of engineers to   \ndevelop it (people who do this tend to use the term \"engineer\" for   \nhackers), and then find after a year that you've spent two million\ndollars to develop something no one wants.  This was not uncommon\nduring the Bubble, especially in companies run by business types, \nwho thought of software development as something terrifying that\ntherefore had to be carefully planned.<br/><br/>We never even considered that approach.  As a Lisp hacker, I come \nfrom the tradition of rapid prototyping.  I would not claim (at\nleast, not here) that this is the right way to write every program,\nbut it's certainly the right way to write software for a startup.\nIn a startup, your initial plans are almost certain to be wrong in\nsome way, and your first priority should be to figure out where.   \nThe only way to do that is to try implementing them.<br/><br/>Like most startups, we changed our plan on the fly.  At first we\nexpected our customers to be Web consultants.  But it turned out\nthey didn't like us, because our software was easy to use and we hosted\nthe site.  It would be too easy for clients to fire them.  We also\nthought we'd be able to sign up a lot of catalog companies, because\nselling online was a natural extension of their existing business.\nBut in 1996 that was a hard sell.  The middle managers we talked   \nto at catalog companies saw the Web not as an opportunity, but as\nsomething that meant more work for them.<br/><br/>We did get a few of the more adventurous catalog companies.  Among\nthem was Frederick's of Hollywood, which gave us valuable experience\ndealing with heavy loads on our servers.  But most of our users   \nwere small, individual merchants who saw the Web as an opportunity \nto build a business.  Some had retail stores, but many only existed\nonline.  And so we changed direction to focus on these users.\nInstead of concentrating on the features Web consultants and catalog\ncompanies would want, we worked to make the software easy to use.<br/><br/>I learned something valuable from that.  It's worth trying very, \nvery hard to make technology easy to use.  Hackers are so used to\ncomputers that they have no idea how horrifying software seems to\nnormal people.  Stephen Hawking's editor told him that every equation\nhe included in his book would cut sales in half.  When you work on\nmaking technology easier to use, you're riding that curve up instead  \nof down. A 10% improvement in ease of use doesn't just increase    \nyour sales 10%.  It's more likely to double your sales.<br/><br/>How do you figure out what customers want?  Watch them.  One of the\nbest places to do this was at trade shows.  Trade shows didn't pay \nas a way of getting new customers, but they were worth it as market\nresearch.  We didn't just give canned presentations at trade shows.\nWe used to show people how to build real, working stores.  Which   \nmeant we got to watch as they used our software, and talk to them    \nabout what they needed.<br/><br/>No matter what kind of startup you start, it will probably be a   \nstretch for you, the founders, to understand what users want.  The\nonly kind of software you can build without studying users is the    \nsort for which you are the typical user.  But this is just the kind\nthat tends to be open source: operating systems, programming\nlanguages, editors, and so on.  So if you're developing technology\nfor money, you're probably not going to be developing it for people\nlike you.  Indeed, you can use this as a way to generate ideas for\nstartups: what do people who are not like you want from technology?<br/><br/>When most people think of startups, they think of companies like\nApple or Google.  Everyone knows these, because they're big consumer\nbrands.  But for every startup like that, there are twenty more  \nthat operate in niche markets or live quietly down in the infrastructure.\nSo if you start a successful startup, odds are you'll start one of \nthose.<br/><br/>Another way to say that is, if you try to start the kind of startup\nthat has to be a big consumer brand, the odds against succeeding\nare steeper.  The best odds are in niche markets.  Since startups  \nmake money by offering people something better than they had before,\nthe best opportunities are where things suck most.  And it would   \nbe hard to find a place where things suck more than in corporate  \nIT departments.  You would not believe the amount of money companies\nspend on software, and the crap they get in return.  This imbalance\nequals opportunity.<br/><br/>If you want ideas for startups, one of the most valuable things you\ncould do is find a middle-sized non-technology company and spend a  \ncouple weeks just watching what they do with computers.  Most good\nhackers have no more idea of the horrors perpetrated in these places\nthan rich Americans do of what goes on in Brazilian slums.<br/><br/>Start by writing software for smaller companies, because it's easier\nto sell to them.  It's worth so much to sell stuff to big companies\nthat the people selling them the crap they currently use spend a\nlot of time and money to do it.  And while you can outhack Oracle\nwith one frontal lobe tied behind your back, you can't outsell an\nOracle salesman.  So if you want to win through better technology,\naim at smaller customers.  [4]<br/><br/>They're the more strategically valuable part of the market anyway.    \nIn technology, the low end always eats the high end.  It's easier  \nto make an inexpensive product more powerful than to make a powerful\nproduct cheaper.  So the products that start as cheap, simple options\ntend to gradually grow more powerful till, like water rising in a  \nroom, they squash the \"high-end\" products against the ceiling.  Sun\ndid this to mainframes, and Intel is doing it to Sun.  Microsoft\nWord did it to desktop publishing software like Interleaf and\nFramemaker.  Mass-market digital cameras are doing it to the expensive\nmodels made for professionals.  Avid did it to the manufacturers     \nof specialized video editing systems, and now Apple is doing it to\nAvid.  <i>Henry Ford</i> did it to the car makers that preceded\nhim.  If you build the simple, inexpensive option, you'll not only\nfind it easier to sell at first, but you'll also be in the best   \nposition to conquer the rest of the market.<br/><br/>It's very dangerous to let anyone fly under you.  If you have the\ncheapest, easiest product, you'll own the low end.  And if you\ndon't, you're in the crosshairs of whoever does.<br/><br/><b>Raising Money</b><br/><br/>To make all this happen, you're going to need money.  Some startups\nhave been self-funding-- Microsoft for example-- but most aren't.\nI think it's wise to take money from investors.  To be self-funding,\nyou have to start as a consulting company, and it's hard to switch\nfrom that to a product company.<br/><br/>Financially, a startup is like a pass/fail course.  The way to get\nrich from a startup is to maximize the company's chances of succeeding,\nnot to maximize the amount of stock you retain.  So if you can trade\nstock for something that improves your odds, it's probably a smart \nmove.<br/><br/>To most hackers, getting investors seems like a terrifying and\nmysterious process.  Actually it's merely tedious.  I'll try to\ngive an outline of how it works.<br/><br/>The first thing you'll need is a few tens of thousands of dollars   \nto pay your expenses while you develop a prototype.  This is called\nseed capital.  Because so little money is involved, raising seed\ncapital is comparatively easy-- at least in the sense of getting a\nquick yes or no.<br/><br/>Usually you get seed money from individual rich people called\n\"angels.\" Often they're people who themselves got rich from technology.\nAt the seed stage, investors don't expect you to have an elaborate\nbusiness plan.  Most know that they're supposed to decide quickly.\nIt's not unusual to get a check within a week based on a half-page\nagreement.<br/><br/>We started Viaweb with $10,000 of seed money from our friend Julian.\nBut he gave us a lot more than money.  He's a former CEO and also\na corporate lawyer, so he gave us a lot of valuable advice about\nbusiness, and also did all the legal work of getting us set up as\na company.  Plus he introduced us to one of the two \nangel investors who supplied our next round of funding.<br/><br/>Some angels, especially those with technology backgrounds, may be     \nsatisfied with a demo and a verbal description of what you plan to \ndo.  But many will want a copy of your business plan, if only to\nremind themselves what they invested in.<br/><br/>Our angels asked for one, and looking back, I'm amazed how much\nworry it caused me.  \"Business plan\" has that word \"business\" in\nit, so I figured it had to be something I'd have to read a book\nabout business plans to write.  Well, it doesn't.  At this stage,\nall most investors expect is a brief description of what you plan    \nto do and how you're going to make money from it, and the resumes \nof the founders.  If you just sit down and write out what you've\nbeen saying to one another, that should be fine.  It shouldn't take\nmore than a couple hours, and you'll probably find that writing it\nall down gives you more ideas about what to do.<br/><br/>For the angel to have someone to make the check out to, you're going\nto have to have some kind of company.  Merely incorporating yourselves\nisn't hard.  The problem is, for the company to exist, you have to\ndecide who the founders are, and how much stock they each have.  If\nthere are two founders with the same qualifications who are both\nequally committed to the business, that's easy.  But if you have a\nnumber of people who are expected to contribute in varying degrees,\narranging the proportions of stock can be hard.  And once you've\ndone it, it tends to be set in stone.<br/><br/>I have no tricks for dealing with this problem.  All I can say is,\ntry hard to do it right.  I do have a rule of thumb for recognizing\nwhen you have, though.  When everyone feels they're getting a\nslightly bad deal, that they're doing more than they should for the\namount of stock they have, the stock is optimally apportioned.<br/><br/>There is more to setting up a company than incorporating it, of\ncourse: insurance, business license, unemployment compensation,    \nvarious things with the IRS.  I'm not even sure what the list is,\nbecause we, ah, skipped all that.  When we got real funding near\nthe end of 1996, we hired a great CFO, who fixed everything   \nretroactively.  It turns out that no one comes and arrests you if\nyou don't do everything you're supposed to when starting a company.\nAnd a good thing too, or a lot of startups would never get started.\n[5]<br/><br/>It can be dangerous to delay turning yourself into a company, because\none or more of the founders might decide to split off and start   \nanother company doing the same thing.  This does happen.  So when\nyou set up the company, as well as as apportioning the stock, you\nshould get all the founders to sign something agreeing that everyone's\nideas belong to this company, and that this company is going to be\neveryone's only job.<br/><br/>[If this were a movie, ominous music would begin here.]<br/><br/>While you're at it, you should ask what else they've signed.  One\nof the worst things that can happen to a startup is to run into       \nintellectual property problems.  We did, and it came closer to \nkilling us than any competitor ever did.<br/><br/>As we were in the middle of getting bought, we discovered that one\nof our people had, early on, been bound by an agreement that said\nall his ideas belonged to the giant company that was paying for him\nto go to grad school.  In theory, that could have meant someone\nelse owned big chunks of our software.  So the acquisition came to\na screeching halt while we tried to sort this out.  The problem      \nwas, since we'd been about to be acquired, we'd allowed ourselves \nto run low on cash.  Now we needed to raise more to keep going. \nBut it's hard to raise money with an IP cloud over your head, because\ninvestors can't judge how serious it is.<br/><br/>Our existing investors, knowing that we needed money and had nowhere\nelse to get it, at this point attempted certain gambits which I\nwill not describe in detail, except to remind readers that the word   \n\"angel\" is a metaphor.  The founders thereupon proposed to walk   \naway from the company, after giving the investors a brief tutorial \non how to administer the servers themselves.  And while this was\nhappening, the acquirers used the delay as an excuse to welch on  \nthe deal.<br/><br/>Miraculously it all turned out ok.  The investors backed down; we\ndid another round of funding at a reasonable valuation; the giant\ncompany finally gave us a piece of paper saying they didn't own our\nsoftware; and six months later we were bought by Yahoo for much\nmore than the earlier acquirer had agreed to pay.  So we were happy\nin the end, though the experience probably took several years off  \nmy life.<br/><br/>Don't do what we did.  Before you consummate a startup, ask \neveryone about their previous IP history.<br/><br/>Once you've got a company set up, it may seem presumptuous to go\nknocking on the doors of rich people and asking them to invest tens\nof thousands of dollars in something that is really just a bunch \nof guys with some ideas.  But when you look at it from the rich\npeople's point of view, the picture is more encouraging. Most rich \npeople are looking for good investments.  If you really think you\nhave a chance of succeeding, you're doing them a favor by letting\nthem invest.  Mixed with any annoyance they might feel about being   \napproached will be the thought: are these guys the next Google?<br/><br/>Usually angels are financially equivalent to founders.  They get \nthe same kind of stock and get diluted the same amount in future\nrounds.  How much stock should they get?  That depends on how\nambitious you feel.  When you offer x percent of your company for\ny dollars, you're implicitly claiming a certain value for the whole\ncompany.  Venture investments are usually described in terms of\nthat number.  If you give an investor new shares equal to 5% of\nthose already outstanding in return for $100,000, then you've done\nthe deal at a pre-money valuation of $2 million.<br/><br/>How do you decide what the value of the company should be?  There\nis no rational way.  At this stage the company is just a bet.  I\ndidn't realize that when we were raising money.  Julian\nthought we ought to value the company at several million \ndollars.  I thought it was preposterous to claim that a couple\nthousand lines of code, which was all we had at the time, were worth\nseveral million dollars.  Eventually we settled on one million,\nbecause Julian said no one would invest in a company with a valuation\nany lower. [6]<br/><br/>What I didn't grasp at the time was that the valuation wasn't just   \nthe value of the code we'd written so far.  It was also the value\nof our ideas, which turned out to be right, and of all the future\nwork we'd do, which turned out to be a lot.<br/><br/>The next round of funding is the one in which you might deal with \nactual \n<a href=\"https://paulgraham.com/venturecapital.html\">venture capital firms</a>.  \nBut don't wait till you've burned   \nthrough your last round of funding to start approaching them.  VCs are slow to\nmake up their minds.  They can take months.  You don't want to be \nrunning out of money while you're trying to negotiate with them.<br/><br/>Getting money from an actual VC firm is a bigger deal than getting\nmoney from angels.  The amounts of money involved are larger, millions\nusually.  So the deals take longer, dilute you more, and impose\nmore onerous conditions.<br/><br/>Sometimes the VCs want to install a new CEO of their own choosing. \nUsually the claim is that you need someone mature and experienced,\nwith a business background.  Maybe in some cases this is true.   And\nyet Bill Gates was young and inexperienced and had no business \nbackground, and he seems to have done ok.  Steve Jobs got booted\nout of his own company by someone mature and experienced, with a\nbusiness background, who then proceeded to ruin the company.  So I\nthink people who are mature and experienced, with a business\nbackground, may be overrated.  We used to call these guys \"newscasters,\"\nbecause they had neat hair and spoke in deep, confident voices, and\ngenerally didn't know much more than they read on the teleprompter.<br/><br/>We talked to a number of VCs, but eventually we ended up financing\nour startup entirely with angel money.  The main reason was that     \nwe feared a brand-name VC firm would stick us with a newscaster as\npart of the deal.  That might have been ok if he was content to\nlimit himself to talking to the press, but what if he wanted to  \nhave a say in running the company?   That would have led to disaster,\nbecause our software was so complex.  We were a company whose whole\nm.o. was to win through better technology.  The strategic decisions\nwere mostly decisions about technology, and we didn't need any help\nwith those.<br/><br/>This was also one reason we didn't go public.  Back in 1998 our CFO\ntried to talk me into it.  In those days you could go public as a\ndogfood portal, so as a company with a real product and real revenues,\nwe might have done well.  But I feared it would have meant taking\non a newscaster-- someone who, as they say, \"can talk Wall Street's\nlanguage.\"<br/><br/>I'm happy to see Google is bucking that trend.  They didn't talk\nWall Street's language when they did their IPO, and Wall Street\ndidn't buy.  And now Wall Street is collectively kicking itself.\nThey'll pay attention next time.  Wall Street learns new languages   \nfast when money is involved.<br/><br/>You have more leverage negotiating with VCs than you realize.  The   \nreason is other VCs.  I know a number of VCs now, and when you talk\nto them you realize that it's a seller's market.  Even now there\nis too much money chasing too few good deals.<br/><br/>VCs form a pyramid.  At the top are famous ones like Sequoia and\nKleiner Perkins, but beneath those are a huge number you've never \nheard of.  What they all have in common is that a dollar from them \nis worth one dollar.  Most VCs will tell you that they don't just \nprovide money, but connections and advice.  If you're talking to  \nVinod Khosla or John Doerr or Mike Moritz, this is true.  But such\nadvice and connections can come very expensive.  And as you go down\nthe food chain the VCs get rapidly \n<!-- href=\"http://ricksegal.typepad.com/pmv/2005/03/vcs_suck_shocki.html\"-->\ndumber.  A few steps down from \nthe top you're basically talking to bankers who've picked up a few\nnew vocabulary words from reading <i>Wired</i>.  (Does your product\nuse <i>XML?</i>)  So I'd advise you to be skeptical about claims\nof experience and connections.  Basically, a VC is a source of\nmoney.  I'd be inclined to go with whoever offered the most money  \nthe soonest with the least strings attached.<br/><br/>You may wonder how much to tell VCs.  And you should, because some\nof them may one day be funding your competitors.  I think the best\nplan is not to be overtly secretive, but not to tell them everything\neither.  After all, as most VCs say, they're more interested in the\npeople than the ideas.  The main reason they want to talk about\nyour idea is to judge you, not the idea.  So as long as you seem\nlike you know what you're doing, you can probably keep a few things\nback from them. [7]<br/><br/>Talk to as many VCs as you can, even if you don't want their money,\nbecause a) they may be on the board of someone who will buy you,     \nand b) if you seem impressive, they'll be discouraged from investing\nin your competitors.  The most efficient way to reach VCs, especially\nif you only want them to know about you and don't want their money,\nis at the conferences that are occasionally organized for startups   \nto present to them.<br/><br/><b>Not Spending It</b><br/><br/>When and if you get an infusion of real money from investors, what\nshould you do with it?  Not spend it, that's what.  In nearly every   \nstartup that fails, the proximate cause is running out of money. \nUsually there is something deeper wrong.  But even a proximate cause\nof death is worth trying hard to avoid.<br/><br/>During the Bubble many startups tried to \"get big fast.\" Ideally\nthis meant getting a lot of customers fast.  But it was easy for\nthe meaning to slide over into hiring a lot of people fast.<br/><br/>Of the two versions, the one where you get a lot of customers fast\nis of course preferable.  But even that may be overrated.  The idea\nis to get there first and get all the users, leaving none for\ncompetitors.  But I think in most businesses the advantages of being\nfirst to market are not so overwhelmingly great.  Google is again\na case in point.  When they appeared it seemed as if search was a\nmature market, dominated by big players who'd spent millions to\nbuild their brands: Yahoo, Lycos, Excite, Infoseek, Altavista,  \nInktomi.  Surely 1998 was a little late to arrive at the party.<br/><br/>But as the founders of Google knew, brand is worth next to nothing\nin the search business.  You can come along at any point and make \nsomething better, and users will gradually seep over to you.  As  \nif to emphasize the point, Google never did any advertising.  They're\nlike dealers; they sell the stuff, but they know better than to use\nit themselves.<br/><br/>The competitors Google buried would have done better to spend those\nmillions improving their software.  Future startups should learn\nfrom that mistake.  Unless you're in a market where products are   \nas undifferentiated as cigarettes or vodka or laundry detergent,\nspending a lot on brand advertising is a sign of breakage.  And few\nif any Web businesses are so undifferentiated.  The dating sites  \nare running big ad campaigns right now, which is all the \nmore evidence they're ripe for the picking.  (Fee, fie, fo, fum, I  \nsmell a company run by marketing guys.)<br/><br/>We were compelled by circumstances to grow slowly, and in retrospect\nit was a good thing.  The founders all learned to do every job in  \nthe company.  As well as writing software, I had to do sales and\ncustomer support.  At sales I was not very good.  I was persistent,\nbut I didn't have the smoothness of a good salesman.  My message   \nto potential customers was: you'd be stupid not to sell online, and  \nif you sell online you'd be stupid to use anyone else's software.   \nBoth statements were true, but that's not the way to convince people.<br/><br/>I was great at customer support though.  Imagine talking to a\ncustomer support person who not only knew everything about the\nproduct, but would apologize abjectly if there was a bug, and then\nfix it immediately, while you were on the phone with them.  Customers\nloved us.  And we loved them, because when you're growing slow by\nword of mouth, your first batch of users are the ones who were smart\nenough to find you by themselves.  There is nothing more valuable,\nin the early stages of a startup, than smart users.  If you listen\nto them, they'll tell you exactly how to make a winning product.      \nAnd not only will they give you this advice for free, they'll pay\nyou.<br/><br/>We officially launched in early 1996.  By the end of that year we\nhad about 70 users.  Since this was the era of \"get big fast,\" I\nworried about how small and obscure we were.  But in fact we were\ndoing exactly the right thing.  Once you get big (in users or\nemployees) it gets hard to change your product.  That year was\neffectively a laboratory for improving our software.  By the end  \nof it, we were so far ahead of our competitors that they never had \na hope of catching up.  And since all the hackers had spent many\nhours talking to users, we understood online commerce way better\nthan anyone else.<br/><br/>That's the key to success as a startup.  There is nothing more \nimportant than understanding your business.  You might think that\nanyone in a business must, ex officio, understand it.  Far from it.   \nGoogle's secret\nweapon was simply that they understood search.  I was working for \nYahoo when Google appeared, and Yahoo didn't understand search.  I\nknow because I once tried to convince the powers that be that we\nhad to make search better, and I got in reply what was then the\nparty line about it: that Yahoo was no longer a mere \"search engine.\"\nSearch was now only a small percentage of our page views, less than\none month's growth, and now that we were established as a \"media   \ncompany,\" or \"portal,\" or whatever we were, search could safely be\nallowed to wither and drop off, like an umbilical cord.<br/><br/>Well, a small fraction of page views they may be, but they are an  \nimportant fraction, because they are the page views that Web sessions  \nstart with.  I think Yahoo gets that now.<br/><br/>Google understands a few other things most Web companies still\ndon't.  The most important is that you should put users before\nadvertisers, even though the advertisers are paying and users aren't.\nOne of my favorite bumper stickers reads \"if the people lead, the  \nleaders will follow.\" Paraphrased for the Web, this becomes \"get\nall the users, and the advertisers will follow.\"  More generally,\ndesign your product to please users first, and then think about how\nto make money from it.  If you don't put users first, you leave a    \ngap for competitors who do.<br/><br/>To make something users love, you have to understand them.  And the\nbigger you are, the harder that is.  So I say \"get big slow.\" The\nslower you burn through your funding, the more time you have to\nlearn.<br/><br/>The other reason to spend money slowly is to encourage a culture \nof cheapness.  That's something Yahoo did understand.  David Filo's \ntitle was \"Chief Yahoo,\" but he was proud that his unofficial title\nwas \"Cheap Yahoo.\"  Soon after we arrived at Yahoo, we got an email\nfrom Filo, who had been crawling around our directory hierarchy,      \nasking if it was really necessary to store so much of our data on\nexpensive RAID drives.  I was impressed by that.  Yahoo's market\ncap then was already in the billions, and they were still worrying\nabout wasting a few gigs of disk space.<br/><br/>When you get a couple million dollars from a VC firm, you tend to\nfeel rich.  It's important to realize you're not.  A rich company\nis one with large revenues.  This money isn't revenue.  It's money\ninvestors have given you in the hope you'll be able to generate   \nrevenues.  So despite those millions in the bank, you're still poor.<br/><br/>For most startups the model should be grad student, not law firm.\nAim for cool and cheap, not expensive and impressive.  For us the\ntest of whether a startup understood this was whether they had Aeron\nchairs.  The Aeron came out during the Bubble and was very popular\nwith startups.  Especially the type, all too common then, that was\nlike a bunch of kids playing house with money supplied by VCs.   We   \nhad office chairs so cheap that the arms all fell off.  This was \nslightly embarrassing at the time, but in retrospect the grad-studenty\natmosphere of our office was another of those things we did right \nwithout knowing it.<br/><br/>Our offices were in a wooden triple-decker in Harvard Square.  It\nhad been an apartment until about the 1970s, and there was still a   \nclaw-footed bathtub in the bathroom.  It must once have been inhabited\nby someone fairly eccentric, because a lot of the chinks in the    \nwalls were stuffed with aluminum foil, as if to protect against   \ncosmic rays.  When eminent visitors came to see us, we were a bit\nsheepish about the low production values.  But in fact that place\nwas the perfect space for a startup.  We felt like our role was to \nbe impudent underdogs instead of corporate stuffed shirts, and that    \nis exactly the spirit you want.<br/><br/>An apartment is also the right kind of place for developing software.\nCube farms suck for that, as you've probably discovered if you've\ntried it.  Ever notice how much easier it is to hack at home than\nat work?  So why not make work more like home?<br/><br/>When you're looking for space for a startup, don't feel that it has\nto look professional.  Professional means doing good work, not\nelevators and glass walls.  I'd advise most startups to avoid\ncorporate space at first and just rent an apartment.  You want to\nlive at the office in a startup, so why not have a place designed\nto be lived in as your office?<br/><br/>Besides being cheaper and better to work in, apartments tend to be\nin better locations than office buildings.  And for a startup\nlocation is very important.  The key to productivity is for people\nto come back to work after dinner.  Those hours after the phone\nstops ringing are by far the best for getting work done.  Great\nthings happen when a group of employees go out to dinner together, \ntalk over ideas, and then come back to their offices to implement  \nthem.  So you want to be in a place where there are a lot of\nrestaurants around, not some dreary office park that's a wasteland\nafter 6:00 PM.  Once a company shifts over into the model where \neveryone drives home to the suburbs for dinner, however late, you've\nlost something extraordinarily valuable.  God help you if you\nactually start in that mode.<br/><br/>If I were going to start a startup today, there are only three   \nplaces I'd consider doing it: on the Red Line near Central, Harvard,\nor Davis Squares (Kendall is too sterile); in Palo Alto on University\nor California Aves; and in Berkeley immediately north or south of   \ncampus.  These are the only places I know that have the right kind\nof vibe.<br/><br/>The most important way to not spend money is by not hiring people.  \nI may be an extremist, but I think hiring people is the worst thing\na company can do.  To start with, people are a recurring expense, \nwhich is the worst kind.  They also tend to cause you to grow out     \nof your space, and perhaps even move to the sort of uncool office\nbuilding that will make your software worse.  But worst of all,\nthey slow you down: instead of sticking your head in someone's    \noffice and checking out an idea with them, eight people have to\nhave a meeting about it.  So the fewer people you can hire, the\nbetter.<br/><br/>During the Bubble a lot of startups had the opposite policy.  They\nwanted to get \"staffed up\" as soon as possible, as if you couldn't \nget anything done unless there was someone with the corresponding \njob title.  That's big company thinking.  Don't hire people to fill\nthe gaps in some a priori org chart.  The only reason to hire someone\nis to do something you'd like to do but can't.<br/><br/>If hiring unnecessary people is expensive and slows you down, why\ndo nearly all companies do it?  I think the main reason is that\npeople like the idea of having a lot of people working for them.\nThis weakness often extends right up to the CEO.  If you ever end\nup running a company, you'll find the most common question people\nask is how many employees you have.  This is their way of weighing\nyou.  It's not just random people who ask this; even reporters do.\nAnd they're going to be a lot more impressed if the answer is a\nthousand than if it's ten.<br/><br/>This is ridiculous, really.  If two companies have the same revenues,\nit's the one with fewer employees that's more impressive.  When  \npeople used to ask me how many people our startup had, and I answered\n\"twenty,\" I could see them thinking that we didn't count for much.\nI used to want to add \"but our main competitor, whose ass we regularly\nkick, has a hundred and forty, so can we have credit for the larger\nof the two numbers?\"<br/><br/>As with office space, the number of your employees is a choice \nbetween seeming impressive, and being impressive.  Any of you who  \nwere <a href=\"https://paulgraham.com/nerds.html\">nerds</a> in high school know about this \nchoice.  Keep doing it when you start a company.<br/><br/><b>Should You?</b><br/><br/>But should you start a company?  Are you the right sort of person\nto do it?  If you are, is it worth it?<br/><br/>More people are the right sort of person to start a startup than\nrealize it.  That's the main reason I wrote this.  There could be   \nten times more startups than there are, and that would probably be\na good thing.<br/><br/>I was, I now realize, exactly the right sort of person to start a   \nstartup.  But the idea terrified me at first.  I was forced into   \nit because I was a <a href=\"https://paulgraham.com/icad.html\">Lisp</a> hacker.  The company\nI'd been consulting for seemed to be running into trouble, and there  \nwere not a lot of other companies using Lisp.  Since I couldn't  \nbear the thought of programming in another language (this was 1995,\nremember, when \"another language\" meant C++) the only option seemed\nto be to start a new company using Lisp.<br/><br/>I realize this sounds far-fetched, but if you're a Lisp hacker\nyou'll know what I mean.  And if the idea of starting a startup\nfrightened me so much that I only did it out of necessity, there  \nmust be a lot of people who would be good at it but who are too    \nintimidated to try.<br/><br/>So who should start a startup?  Someone who is a good hacker, between\nabout 23 and 38, and who wants to solve the money problem in one\nshot instead of getting paid gradually over a conventional working\nlife.<br/><br/>I can't say precisely what a good hacker is.  At a first rate   \nuniversity this might include the top half of computer science   \nmajors.  Though of course you don't have to be a CS major to be a\nhacker; I was a philosophy major in college.<br/><br/>It's hard to tell whether you're a good hacker, especially when\nyou're young.  Fortunately the process of starting startups tends\nto select them automatically.  What drives people to start startups\nis (or should be) looking at existing technology and thinking, don't \nthese guys realize they should be doing x, y, and z?  And that's \nalso a sign that one is a good hacker.<br/><br/>I put the lower bound at 23 not because there's something that\ndoesn't happen to your brain till then, but because you need to see\nwhat it's like in an existing business before you try running your\nown.  The business doesn't have to be a startup.  I spent a year\nworking for a software company to pay off my college loans.  It was\nthe worst year of my adult life, but I learned, without realizing  \nit at the time, a lot of valuable lessons about the software business.\nIn this case they were mostly negative lessons: don't have a lot\nof meetings; don't have chunks of code that multiple people own;\ndon't have a sales guy running the company; don't make a high-end\nproduct; don't let your code get too big; don't leave finding bugs\nto QA people; don't go too long between releases; don't isolate\ndevelopers from users; don't move from Cambridge to Route 128; and\nso on. [8] But negative lessons are just as valuable as positive \nones.  Perhaps even more valuable: it's hard to repeat a brilliant\nperformance, but it's straightforward to avoid errors. [9]<br/><br/>The other reason it's hard to start a company before 23 is that     \npeople won't take you seriously.  VCs won't trust you, and will try\nto reduce you to a mascot as a condition of funding.  Customers\nwill worry you're going to flake out and leave them stranded.  Even\nyou yourself, unless you're very unusual, will feel your age to     \nsome degree; you'll find it awkward to be the boss of someone much \nolder than you, and if you're 21, hiring only people younger rather \nlimits your options.<br/><br/>Some people could probably start a company at 18 if they wanted to.\nBill Gates was 19 when he and Paul Allen started Microsoft.  (Paul \nAllen was 22, though, and that probably made a difference.) So if\nyou're thinking, I don't care what he says, I'm going to start a\ncompany now, you may be the sort of person who could get away with\nit.<br/><br/>The other cutoff, 38, has a lot more play in it.  One reason I put \nit there is that I don't think many people have the physical stamina\nmuch past that age.   I used to work till 2:00 or 3:00 AM every\nnight, seven days a week.  I don't know if I could do that now.<br/><br/>Also,\nstartups are a big risk financially.  If you try something that\nblows up and leaves you broke at 26, big deal; a lot of 26 year\nolds are broke.  By 38 you can't take so many risks-- especially\nif you have kids.<br/><br/>My final test may be the most restrictive.  Do you actually want\nto start a startup?  What it amounts to, economically, is compressing\nyour working life into the smallest possible space.  Instead of\nworking at an ordinary rate for 40 years, you work like hell for \nfour.  And maybe end up with nothing-- though in that case it\nprobably won't take four years.<br/><br/>During this time you'll do little but work, because when you're not\nworking, your competitors will be.  My only leisure activities were\nrunning, which I needed to do to keep working anyway, and about\nfifteen minutes of reading a night.  I had a girlfriend for a total\nof two months during that three year period.  Every couple weeks I\nwould take a few hours off to visit a used bookshop or go to a  \nfriend's house for dinner.  I went to visit my family twice.\nOtherwise I just worked.<br/><br/>Working was often fun, because the people I worked with were some\nof my best friends.  Sometimes it was even technically interesting.\nBut only about 10% of the time.  The best I can say for the other\n90% is that some of it is funnier in hindsight than it seemed then.\nLike the time the power went off in Cambridge for about six hours,\nand we made the mistake of trying to start a gasoline powered\ngenerator inside our offices. I won't try that again.<br/><br/>I don't think the amount of bullshit you have to deal with in a\nstartup is more than you'd endure in an ordinary working life.  It's\nprobably less, in fact; it just seems like a lot because it's       \ncompressed into a short period.  So mainly what a startup buys you \nis time.  That's the way to think about it if you're trying to \ndecide whether to start one.  If you're the sort of person who would\nlike to solve the money problem once and for all instead of working \nfor a salary for 40 years, then a startup makes sense.<br/><br/>For a lot of people the conflict is between startups and graduate\nschool.  Grad students are just the age, and just the sort of people,\nto start software startups.  You may worry that if you do you'll   \nblow your chances of an academic career.  But it's possible to be  \npart of a startup and stay in grad school, especially at first.  \nTwo of our three original hackers were in grad school the whole \ntime, and both got their <a href=\"https://paulgraham.com/tlbphd.html\">degrees</a>. \nThere are few sources of energy\nso powerful as a procrastinating grad student.<br/><br/>If you do have to\nleave grad school, in the worst case it won't be for too long.  If\na startup fails, it will probably fail quickly enough that you can \nreturn to academic life.  And if it succeeds, you may find you no   \nlonger have such a burning desire to be an assistant professor.<br/><br/>If you want to do it, do it.  Starting a startup is not the great\nmystery it seems from outside.  It's not something you have to know\nabout \"business\" to do.  Build something users love, and spend less\nthan you make.  How hard is that?<br/><br/><br/><br/><br/><br/><br/><br/><b>Notes</b><br/><br/>[1] Google's revenues are about two billion a year, but half comes\nfrom ads on other sites.<br/><br/>[2] One advantage startups have over established companies is that\nthere are no discrimination laws about starting businesses.  For   \nexample, I would be reluctant to start a startup with a woman\nwho had small children, or was likely to have them soon.  But you're\nnot allowed to ask prospective employees if they plan to have kids \nsoon.  Believe it or not, under current US law, you're not even   \nallowed to discriminate on the basis of intelligence.  Whereas when\nyou're starting a company, you can discriminate on any basis you\nwant about who you start it with.<br/><br/>[3] Learning to hack is a lot cheaper than business school, because\nyou can do it mostly on your own.  For the price of a Linux box, a\ncopy of K&amp;R, and a few hours of advice from your neighbor's fifteen\nyear old son, you'll be well on your way.<br/><br/>[4] Corollary: Avoid starting a startup to sell things to the biggest\ncompany of all, the government.  Yes, there are lots of opportunities\nto sell them technology.  But let someone else start those startups.<br/><br/>[5] A friend who started a company in Germany told me they do care \nabout the paperwork there, and that there's more of it.  Which helps\nexplain why there are not more startups in Germany.<br/><br/>[6] At the seed stage our valuation was in principle $100,000, because\nJulian got 10% of the company.  But this is a very misleading number,\nbecause the money was the least important of the things Julian gave us.<br/><br/>[7] The same goes for companies that seem to want to acquire you.\nThere will be a few that are only pretending to in order to pick\nyour brains.  But you can never tell for sure which these are, so\nthe best approach is to seem entirely open, but to fail to mention\na few critical technical secrets.<br/><br/>[8]  I was as bad an employee as this place was a company.  I\napologize to anyone who had to work with me there.<br/><br/>[9]  You could probably write a book about how to succeed in business\nby doing everything in exactly the opposite way from the DMV.<br/><br/><b>Thanks</b> to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this essay, and to Steve\nMelendez and Gregory Price for inviting me to speak.<br/><br/></br></p></font>","date":"2005-03-01T00:00:00Z"}
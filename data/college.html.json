{"href":"college.html","title":"Undergraduation","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\n<!--<table width=375 cellpadding=0 cellspacing=0>\n<tr><td bgcolor=#ffe722><img src=\"http://www.virtumundo.com/images/spacer.gif\"\nheight=15 width=1><font size=2>\nWant a summer job?  Why not be a \n<a href=\"summerfounder.html\"><b>Summer Founder</b></a>?\n</font>\n<br><img src=\"http://www.virtumundo.com/images/spacer.gif\" height=5 width=1></td\n></tr>\n</table>\n-->\nMarch 2005<br><br/><i>(Parts of this essay began as replies to students who wrote to\nme with questions.)</i><br/><br/>Recently I've had several emails from computer science\nundergrads asking what to do in college. I might not\nbe the best source of advice, because I was a philosophy major in\ncollege.  But I took so many CS classes that most CS majors thought\nI was one.  I was certainly a hacker, at least.<br/><br/><b>Hacking</b><br/><br/>What should you do in college to become a \n<a href=\"gh.html\">good hacker</a>?  There are two\nmain things you can do: become very good at programming, and learn\na lot about specific, cool problems.  These turn out to be equivalent,\nbecause each drives you to do the other.<br/><br/>The way to be good at programming is to work (a) a lot (b) on hard\nproblems.  And the way to make yourself work on hard problems is\nto work on some very engaging project.<br/><br/><!-- The first\nderivative of \"imagination is more important than knowledge\" is\n\"curiosity is more important than discipline.\" [1] Nothing will\nmake you smarter faster than an engaging project.\n-->\nOdds are this project won't be a class assignment.  My friend Robert\nlearned a lot by writing network software when he was an\nundergrad. One of his projects was to connect Harvard to the\nArpanet; it had been one of the original nodes, but by 1984 the\nconnection had died. [1]  Not only was this\nwork not for a class, but because he spent all his time on it\nand neglected his studies, he was kicked out of\nschool for a year. [2]  It all evened out in the end, and now he's\na professor at MIT.  But you'll probably be happier if you don't\ngo to that extreme; it caused him a lot of worry at the time.<br/><br/>Another way to be good at programming is to find other people who\nare good at it, and learn what they know.  Programmers tend to sort\nthemselves into tribes according to the type of work they do and\nthe tools they use, and some tribes are \n<a href=\"pypar.html\">smarter</a> than others.  Look\naround you and see what the smart people seem to be working on;\nthere's usually a reason.<br/><br/>Some of the smartest people around you are professors.  So one way\nto find interesting work is to volunteer as a research assistant.\nProfessors are especially interested in people who can solve tedious\nsystem-administration type problems for them, so that is a way to\nget a foot in the door.  What they fear are\nflakes and resume padders.  It's all too\ncommon for an assistant to result in a net increase in work.  So\nyou have to make it clear you'll mean a net decrease.<br/><br/>Don't be put off if they say no.  Rejection is almost always less\npersonal than the rejectee imagines.  Just move on to the next.\n(This applies to dating too.)<br/><br/>Beware, because although most professors are smart, not all of them\nwork on interesting stuff.  Professors have to publish novel results\nto advance their careers, but there is more competition in more\ninteresting areas of research.  So what less ambitious professors\ndo is turn out a series of papers whose conclusions are novel because\nno one else cares about them.  You're better off avoiding these.<br/><br/>I never worked as a research assistant, so I feel a bit dishonest\nrecommending that route.  I learned to program by writing stuff of\nmy own, particularly by trying to reverse-engineer Winograd's\nSHRDLU.  I was as obsessed with that program as a mother with a new baby.<br/><br/>Whatever the disadvantages of working by yourself, the advantage\nis that the project is all your own.  You never have to compromise\nor ask anyone's permission, and if you have a new idea you can just\nsit down and start implementing it.<br/><br/>In your own projects you don't have to worry about novelty (as\nprofessors do) or profitability (as businesses do).  All that matters\nis how hard the project is technically, and that has no correlation\nto the nature of the application.  \"Serious\" applications like   \ndatabases are often trivial and dull technically (if you ever suffer\nfrom insomnia, try reading the technical literature about databases)\nwhile \"frivolous\" applications like games are often very sophisticated.\nI'm sure there are game companies out there working on products\nwith more intellectual content than the research at the\nbottom nine tenths of university CS departments.<br/><br/>If I were in college now I'd probably work on\ngraphics: a network game, for example, or a tool for 3D animation.\nWhen I was an undergrad there weren't enough cycles around to make\ngraphics interesting, but it's hard to imagine anything more fun\nto work on now.<br/><br/><b>Math</b><br/><br/>When I was in college, a lot of the professors believed (or at least\nwished) that \n<a href=\"hp.html\">computer science</a> was a branch of math.  This idea was\nstrongest at Harvard, where there wasn't even a CS major till the\n1980s; till then one had to major in applied math.  But it was\nnearly as bad at Cornell.  When I told the fearsome Professor Conway\nthat I was interested in AI (a hot topic then), he told me I should\nmajor in math.  I'm still not sure whether he thought AI required\nmath, or whether he thought AI was nonsense and that majoring in\nsomething rigorous would cure me of such stupid ambitions.<br/><br/>In fact, the amount of math you need as a hacker is a lot less   \nthan most university departments like to admit.  I don't think you  \nneed much more than high school math plus a few concepts from the\ntheory of computation.  (You have to know what an n^2 algorithm is\nif you want to avoid writing them.) Unless you're planning to write\nmath applications, of course.  Robotics, for example, is all math.<br/><br/>But while you don't literally need math for most kinds of hacking,\nin the sense of knowing 1001 tricks for differentiating formulas, \nmath is very much worth studying for its own sake.  It's a \nvaluable source of metaphors for almost any kind of work.[3] I wish \nI'd studied more math in college for that reason.<br/><br/>Like a lot of people, I was mathematically abused as a child.  I   \nlearned to think of math as a collection of formulas that were\nneither beautiful nor had any relation to my life (despite attempts\nto translate them into \"word problems\"), but had to be memorized \nin order to do well on tests.<br/><br/>One of the most valuable things you could do in college would be\nto learn what math is really about.  This may not be easy, because\na lot of good mathematicians are bad teachers.  And while there are\nmany popular books on math, few seem good.  The best I can think\nof are W. W. Sawyer's.  And of course Euclid. [4]<br/><br/><b>Everything</b><br/><br/>Thomas Huxley said \"Try to learn something about everything and \neverything about something.\"  Most universities aim at this\nideal.<br/><br/>But what's everything?  To me it means, all that people\nlearn in the course of working honestly on hard problems.  All such \nwork tends to be related, in that ideas and techniques from one   \nfield can often be transplanted successfully to others.  Even others\nthat seem quite distant.  For example, I write \n<a href=\"essay.html\">essays</a> the same way\nI write software: I sit down and blow out a lame version 1 as fast\nas I can type, then spend several weeks rewriting it.<br/><br/>Working on hard problems is not, by itself, enough.  Medieval   \nalchemists were working on a hard problem, but their approach was \nso bogus that there was little\nto learn from studying it, except possibly about people's ability  \nto delude themselves.  Unfortunately the sort of AI I was trying    \nto learn in college had the same flaw: a very hard problem, blithely\napproached with hopelessly inadequate techniques.  Bold?  Closer \nto fraudulent.\n<!--\nThere is a good deal of such bogusness around.  For example, the\nfield of literary theory is almost entirely bogus.  They seem to \nbe writing about hard questions, at least some of the time, but\nstandards in the field are so low that one need not say anything \ninteresting, so long as one says it in a sufficiently complicated \nway. [6]<br /><br />I'm not saying that literature is bogus, by the way, just that the\nway to study it is the way its practitioners do.  Novelists work  \nhonestly on hard problems.  Indeed, it's precisely because this    \nwork is so hard that literary theory happens.   Most literary\ntheorists would be writers if they could, just as most art critics\nwould be artists. --><br/><br/>The social sciences are also fairly bogus, because they're so much \ninfluenced by intellectual <a href=\"say.html\">fashions</a>.  If a \nphysicist met a colleague\nfrom 100 years ago, he could teach him some new things; if a psychologist\nmet a colleague from 100 years ago, they'd just get into an\nideological argument.\nYes, of course, you'll learn something by taking a\npsychology class.  The point is, you'll learn more by taking\na class in another department.<br/><br/>The worthwhile departments, in my opinion, are math, the hard\nsciences, engineering, history (especially economic and social  \nhistory, and the history of science), architecture, and the classics.\nA survey course in art history may be worthwhile.  Modern literature\nis important, but the way to learn about it is just to read.  I\ndon't know enough about music to say.<br/><br/>You can skip the social sciences, philosophy, and the various\ndepartments created recently in response to political pressures.\nMany of these fields talk about important problems, certainly.  But\nthe way they talk about them is useless.  For example, philosophy   \ntalks, among other things, about our obligations to one another;    \nbut you can learn more about this from a wise grandmother or E. B.\nWhite than from an academic philosopher.<br/><br/>I speak here from experience.  I should probably have been offended \nwhen people laughed at Clinton for saying \"It depends on what the  \nmeaning of the word 'is' is.\"  I took about five classes in college\non what the meaning of \"is\" is.<br/><br/>Another way to figure out which fields are worth studying is to  \ncreate the <i> dropout graph.</i> For example, I know many people  \nwho switched from math to computer science because they found math  \ntoo hard, and no one who did the opposite.  People don't do hard\nthings gratuitously; no one will work on a harder problem unless  \nit is proportionately (or at least log(n)) more rewarding.  So\nprobably math is more worth studying than computer science.  By\nsimilar comparisons you can make a graph of all the departments in\na university.  At the bottom you'll find the subjects with least \nintellectual content.<br/><br/>If you use this method, you'll get roughly the same answer I just \ngave.<br/><br/>Language courses are an anomaly.  I think they're better considered\nas extracurricular activities, like pottery classes.  They'd be far\nmore useful when combined with some time living in a country where \nthe language is spoken.  On a whim I studied Arabic as a freshman.\nIt was a lot of work, and the only lasting benefits were a weird  \nability to identify semitic roots and some insights into how people\nrecognize words.<br/><br/>Studio art and creative writing courses are wildcards.  Usually \nyou don't get taught much:  you just work (or don't work) on whatever\nyou want, and then sit around offering \"crits\" of one another's\ncreations under the vague supervision of the teacher.  But writing and\nart are both very hard problems that (some) people work honestly\nat, so they're worth doing, especially if you can find a good\nteacher.<br/><br/><b>Jobs</b><br/><br/>Of course college students have to think about more than just\nlearning.  There are also two practical problems to consider: jobs,\nand graduate school.<br/><br/>In theory a liberal education is not supposed to supply job training.\nBut everyone knows this is a bit of a fib.  Hackers at every college\nlearn practical skills, and not by accident.<br/><br/>What you should learn to get a job depends on the kind you want.\nIf you want to work in a big company, learn how to hack \n<a href=\"avg.html\">Blub</a> on\nWindows.  If you want to work at a cool little company or research  \nlab, you'll do better to learn Ruby on Linux.  And if you want to  \nstart your own company, which I think will be more and more common,\nmaster the most powerful tools you can find, because you're going\nto be in a race against your competitors, and they'll be your horse.<br/><br/>There is not a direct correlation between the skills you should    \nlearn in college and those you'll use in a job.  You should aim     \nslightly high in college.<br/><br/>In workouts a football player may bench press 300 pounds, even\nthough he may never have to exert anything like that much force in\nthe course of a game.  Likewise, if your professors try to make you\nlearn stuff that's more advanced than you'll need in a job, it may\nnot just be because they're academics, detached from the real world.\nThey may be trying to make you lift weights with your brain.<br/><br/>The programs you write in classes differ in three critical ways\nfrom the ones you'll write in the real world: they're small; you\nget to start from scratch; and the problem is usually artificial   \nand predetermined.  In the real world, programs are bigger, tend   \nto involve existing code, and often require you to figure out what \nthe problem is before you can solve it.<br/><br/>You don't have to wait to leave (or even enter) college to learn   \nthese skills.  If you want to learn how to deal with existing code,\nfor example, you can contribute to open-source projects.  The sort\nof employer you want to work for will be as impressed by that as \ngood grades on class assignments.<br/><br/>In existing open-source projects you don't get much practice at\nthe third skill, deciding what problems to solve.  But there's \nnothing to stop you starting new projects of your own.  And  good\nemployers will be even more impressed\nwith that.<br/><br/>What sort of problem should you try to solve?  One way to answer\nthat is to ask what you need as a user.  For example, I stumbled\non a good algorithm for spam filtering because I wanted to stop  \ngetting spam.  Now what I wish I had was a mail reader that somehow\nprevented my inbox from filling up.  I tend to use my inbox as a\ntodo list.  But that's like using a screwdriver to open\nbottles; what one really wants is a bottle opener.<br/><br/><b>Grad School</b><br/><br/>What about grad school?  Should you go?  And how do you get into a  \ngood one?<br/><br/>In principle, grad school is professional training in research, and\nyou shouldn't go unless you want to do research as a career.  And   \nyet half the people who get PhDs in CS don't go into research.\nI didn't go to grad school to become a professor.  I went because   \nI wanted to learn more.<br/><br/>So if you're mainly interested in hacking and you go to grad school,\nyou'll find a lot of other people who are similarly out of their  \nelement.  And if half the people around you are out of their element in the\nsame way you are, are you really out of your element?<br/><br/>There's a fundamental problem in \"computer science,\" and it surfaces\nin situations like this.  No one is sure what \"research\" is supposed to be.  \nA lot\nof research is hacking that had to be crammed into the form of an\nacademic paper to yield one more quantum of publication.<br/><br/>So it's kind of misleading to ask whether you'll be at home in grad\nschool, because very few people are quite at home in computer\nscience.  The whole field is uncomfortable in its own skin.  So\nthe fact that you're mainly interested in hacking shouldn't deter  \nyou from going to grad school.  Just be warned you'll have to do a lot of stuff   \nyou don't like.<br/><br/>Number one will be your dissertation.  Almost everyone hates their\ndissertation by the time they're done with it.  The\nprocess inherently tends to produce an unpleasant result, like a cake made out\nof whole wheat flour and baked for twelve hours.  Few dissertations \nare read with pleasure, especially by their authors.<br/><br/>But thousands before you have suffered through writing a dissertation.\nAnd aside from that, grad school is close to paradise.  Many people\nremember it as the happiest time of their lives.  And nearly all\nthe rest, including me, remember it as a period that would have \nbeen, if they hadn't had to write a dissertation. [5]<br/><br/>The danger with grad school is that you don't see the scary part\nupfront.  PhD programs start out as college part 2, with several\nyears of classes.  So by the time you face the horror of writing a  \ndissertation, you're already several years in.  If you quit now,\nyou'll be a grad-school dropout, and you probably won't like that\nidea.  When Robert got kicked out of grad school for writing the\nInternet worm of 1988, I envied him enormously for finding a way out\nwithout the stigma of failure. <!-- And he was unhappy that Cornell\nexpelled him, the ingrate.--><br/><br/>On the whole, grad school is probably better than most alternatives.  You meet a \nlot of smart people, and your glum procrastination will at least    \nbe a powerful common bond.  And of course you have a PhD at the\nend.  I forgot about that. I suppose that's worth something.<br/><br/>The greatest advantage of a PhD (besides being the union card of\nacademia, of course) may be that it gives you some baseline confidence.\nFor example, the Honeywell thermostats in my house have the most\natrocious UI.  My mother, who has the same model, diligently spent\na day reading the user's manual to learn how to operate hers.  She\nassumed the problem was with her.  But I can think to myself \"If\nsomeone with a PhD in computer science can't understand this\nthermostat, it <i>must</i> be badly \ndesigned.\"<br/><br/>If you still want to go to grad school after this equivocal\nrecommendation, I can give you solid advice about how to get in. \nA lot of my friends are CS professors now, so I have the inside\nstory about admissions.  It's quite different from college.  At\nmost colleges, admissions officers decide who gets in.  For PhD\nprograms, the professors do.  And they try to do\nit well, because the people they admit are going to be working for\nthem.<br/><br/>Apparently only recommendations really matter at the best schools.\nStandardized tests count for nothing, and grades for little.  The\nessay is mostly an opportunity to disqualify yourself by saying   \nsomething stupid.  The only thing professors\ntrust is recommendations, preferably from people they know. [6]<br/><br/>So if you want to get into a PhD program, the key is to impress\nyour professors.  And from my friends who are professors I know \nwhat impresses them: not merely trying to impress them.  They're\nnot impressed by students who get good grades or want to be their\nresearch assistants so they can get into grad school.  They're\nimpressed by students who get good grades and want to be their  \nresearch assistants because they're genuinely interested in the \ntopic.<br/><br/>So the best thing you can do in college, whether you want to get\ninto grad school or just be good at hacking, is figure out what you\ntruly like.  It's hard to trick professors into letting you into\ngrad school, and impossible to trick problems into letting you solve\nthem.  College is where faking stops working.  From this point,\nunless you want to go work for a big company, which is like reverting\nto high school, the only way forward is through doing what you \n<a href=\"love.html\">love</a>.<br/><br/><br/><br/><br/><br/><b>Notes</b><br/><br/><!-- [1] When I was in college a lot of people had posters of Einstein\nwith \"imagination is more important than knowledge\" printed on them.\nI think for many it was wishful thinking; it seemed to mean one\ndidn't have to study.  In fact what Einstein probably meant was:\nknowledge is enormously important, but of two people who both have\ngreat knowledge, the one with more imagination will do better.  That\ndoesn't make as good a quote, though.\n-->\n[1] No one seems to have minded, which shows how unimportant\nthe Arpanet (which became the Internet) was as late as\n1984.<br/><br/>[2] This is why, when I became an employer, I didn't care\nabout GPAs.  In fact, we actively sought out people   \nwho'd failed out of school.  We once put up posters around Harvard\nsaying \"Did you just get kicked out for doing badly in your classes\nbecause you spent all your time working on some project of your   \nown?  Come work for us!\"  We managed to find a kid who had been, \nand he was a great hacker.<br/><br/>When Harvard kicks undergrads out for a year, they have to get jobs.\nThe idea is to show them how awful the real world is, so they'll    \nunderstand how lucky they are to be in college.  This plan backfired\nwith the guy who came to work for us, because he had more fun than\nhe'd had in school, and made more that year from stock options than\nany of his professors did in salary.  So instead of crawling back\nrepentant at the end of the year, he took another year off and went\nto Europe.  He did eventually graduate at about 26.<br/><br/>[3] Eric Raymond says the best metaphors for hackers are\nin set theory, combinatorics, and graph theory.<br/><br/>Trevor Blackwell reminds you to take math classes intended for math majors.\n\"'Math for engineers' classes sucked mightily. In fact any 'x for\nengineers' sucks, where x includes math, law, writing and visual\ndesign.\"<br/><br/>[4] Other highly recommended books: <i>What is Mathematics?</i>, by\nCourant and Robbins;  <i>Geometry and the Imagination</i> by Hilbert and \nCohn-Vossen.\nAnd for those interested in graphic design,\n<a href=\"http://www.math.ubc.ca/people/faculty/cass/Euclid/byrne.html\">Byrne's Euclid</a>.<br/><br/><!-- [6] You can't get any lower than publishing placebos, as happened\nin the Sokal Affair.\n-->\n[5] If you wanted to have the perfect life, the thing to do would\nbe to go to grad school, secretly write your dissertation in the\nfirst year or two, and then just enjoy yourself for the next three\nyears, dribbling out a chapter at a time.  This prospect will make\ngrad students' mouths water, but I know of no one who's had the\ndiscipline to pull it off.<br/><br/>[6] One professor friend says that 15-20% of the grad students they\nadmit each year are \"long shots.\"  But what he means by long shots\nare people whose applications are perfect in every way, except\nthat no one on the admissions committee knows the professors who\nwrote the recommendations.<br/><br/>So if you want to get into\ngrad school in the sciences, you need to go to college somewhere with\nreal research professors.  Otherwise you'll seem a risky bet\nto admissions committees, no matter how good you are.<br/><br/>Which implies\na surprising but apparently inevitable consequence:\nlittle liberal arts colleges are doomed.\n<!--, except those few that\nmake a conscious effort to\nexcel in the sciences.--> Most smart\nhigh school kids at least consider going into the sciences, even\nif they ultimately choose not to.\nWhy go to a college that limits their options?<br/><br/><br/><br/><b>Thanks</b> to Trevor Blackwell, Alex Lewin, Jessica Livingston,\nRobert Morris, Eric\nRaymond, and several \n<a href=\"undergrad2.html\">anonymous CS professors</a> \nfor reading drafts of this, and to the students whose questions\nbegan it.<br/><br/><br clear=\"all\"/></br></p></font>","date":"2005-03-01T00:00:00Z"}
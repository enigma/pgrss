{"href":"startupmistakes.html","title":"The 18 Mistakes That Kill Startups","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\nOctober 2006<br/><br>In the Q &amp; A period after a recent talk, someone asked what made\nstartups fail.  After standing there gaping for a few seconds I\nrealized this was kind of a trick question.  It's equivalent to\nasking how to make a startup succeed — if you avoid every cause of\nfailure, you succeed — and that's too big a question to answer on\nthe fly.<br/><br/>Afterwards I realized it could be helpful to look at the problem\nfrom this direction.  If you have a list of all the things you\nshouldn't do, you can turn that into a recipe for succeeding just\nby negating.  And this form of list may be more useful in practice.\nIt's easier to catch yourself doing something you shouldn't than\nalways to remember to do something you should.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f1n\"><font color=\"#777777\">1</font></a>]</font><br/><br/>In a sense there's just one mistake that kills startups: not making\nsomething users want.  If you make something users want, you'll\nprobably be fine, whatever else you do or don't do.  And if you\ndon't make something users want, then you're dead, whatever else\nyou do or don't do.  So really this is a list of 18 things that\ncause startups not to make something users want.  Nearly all failure\nfunnels through that.<br/><br/><b>1. Single Founder</b><br/><br/>Have you ever noticed how few successful startups were founded by\njust one person?  Even companies you think of as having one founder,\nlike Oracle, usually turn out to have more.  It seems unlikely this\nis a coincidence.<br/><br/>What's wrong with having one founder?  To start with, it's a vote\nof no confidence.  It probably means the founder couldn't talk any\nof his friends into starting the company with him.  That's pretty\nalarming, because his friends are the ones who know him best.<br/><br/>But even if the founder's friends were all wrong and the company\nis a good bet, he's still at a disadvantage.  Starting a startup\nis too hard for one person.  Even if you could do all the work\nyourself, you need colleagues to brainstorm with, to talk you out\nof stupid decisions, and to cheer you up when things go wrong.<br/><br/>The last one might be the most important.  The low points in a\nstartup are so low that few could bear them alone.  When you have\nmultiple founders, esprit de corps binds them together in a way\nthat seems to violate conservation laws.  Each thinks \"I can't let\nmy friends down.\"  This is one of the most powerful forces in human\nnature, and it's missing when there's just one founder.<br/><br/><b>2. Bad Location</b><br/><br/>Startups prosper in some places and not others.  Silicon Valley\ndominates, then Boston, then Seattle, Austin, Denver, and New York.  After\nthat there's not much.  Even in New York the number of startups per\ncapita is probably a 20th of what it is in Silicon Valley.  In towns\nlike Houston and Chicago and Detroit it's too small to measure.<br/><br/>Why is the falloff so sharp?  Probably for the same reason it is\nin other industries.  What's the sixth largest fashion center in\nthe US?  The sixth largest center for oil, or finance, or publishing?\nWhatever they are they're probably so far from the top that it would\nbe misleading even to call them centers.<br/><br/>It's an interesting question why cities \n<a href=\"https://paulgraham.com/siliconvalley.html\">become</a> startup hubs, but\nthe reason startups prosper in them is probably the same as it is\nfor any industry: that's where the experts are.  Standards are\nhigher; people are more sympathetic to what you're doing; the kind\nof people you want to hire want to live there; supporting industries\nare there; the people you run into in chance meetings are in the\nsame business.  Who knows exactly how these factors combine to boost\nstartups in Silicon Valley and squish them in Detroit, but it's\nclear they do from the number of startups per capita in each.<br/><br/><b>3. Marginal Niche</b><br/><br/>Most of the groups that apply to Y Combinator suffer from a common\nproblem: choosing a small, obscure niche in the hope of avoiding\ncompetition.<br/><br/>If you watch little kids playing sports, you notice that below a\ncertain age they're afraid of the ball.  When the ball comes near\nthem their instinct is to avoid it.  I didn't make a lot of catches\nas an eight year old outfielder, because whenever a fly ball came\nmy way, I used to close my eyes and hold my glove up more for\nprotection than in the hope of catching it.<br/><br/>Choosing a marginal project is the startup equivalent of my eight\nyear old strategy for dealing with fly balls.  If you make anything\ngood, you're going to have competitors, so you may as well face\nthat.  You can only avoid competition by avoiding good ideas.<br/><br/>I think this shrinking from big problems is mostly unconscious.\nIt's not that people think of grand ideas but decide to pursue\nsmaller ones because they seem safer.  Your unconscious won't even\nlet you think of grand ideas.  So the solution may be to think about\nideas without involving yourself.  What would be a great idea for\n<i>someone else</i> to do as a startup?<br/><br/><b>4. Derivative Idea</b><br/><br/>Many of the applications we get are imitations of some existing\ncompany.  That's one source of ideas, but not the best.  If you\nlook at the origins of successful startups, few were started in\nimitation of some other startup.  Where did they get their ideas?\nUsually from some specific, unsolved problem the founders identified.<br/><br/>Our startup made software for making online stores.  When we started\nit, there wasn't any; the few sites you could order from were\nhand-made at great expense by web consultants.  We knew that if\nonline shopping ever took off, these sites would have to be generated\nby software, so we wrote some.  Pretty straightforward.<br/><br/>It seems like the best problems to solve are ones that affect you\npersonally.  Apple happened because Steve Wozniak wanted a computer,\nGoogle because Larry and Sergey couldn't find stuff online, Hotmail\nbecause Sabeer Bhatia and Jack Smith couldn't exchange email at\nwork.<br/><br/>So instead of copying the Facebook, with some variation that the\nFacebook rightly ignored, look for ideas from the other direction.\nInstead of starting from companies and working back to the problems\nthey solved, look for problems and imagine the company that might\nsolve them. \n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f2n\"><font color=\"#777777\">2</font></a>]</font>\nWhat do people complain about?  What do you wish there was?<br/><br/><b>5. Obstinacy</b><br/><br/>In some fields the way to succeed is to have a vision of what you\nwant to achieve, and to hold true to it no matter what setbacks you\nencounter.  Starting startups is not one of them.  The stick-to-your-vision\napproach works for something like winning an Olympic gold medal,\nwhere the problem is well-defined.  Startups are more like science,\nwhere you need to follow the trail wherever it leads.<br/><br/>So don't get too attached to your original plan, because it's\nprobably wrong.  Most successful startups end up doing something\ndifferent than they originally intended — often so different that\nit doesn't even seem like the same company.  You have to be prepared\nto see the better idea when it arrives.  And the hardest part of\nthat is often discarding your old idea.<br/><br/>But openness to new ideas has to be tuned just right.  Switching\nto a new idea every week will be equally fatal.  Is there some kind\nof external test you can use?  One is to ask whether the ideas\nrepresent some kind of progression.  If in each new idea you're\nable to re-use most of what you built for the previous ones, then\nyou're probably in a process that converges.  Whereas if you keep\nrestarting from scratch, that's a bad sign.<br/><br/>Fortunately there's someone you can ask for advice: your users.  If\nyou're thinking about turning in some new direction and your users\nseem excited about it, it's probably a good bet.<br/><br/><b>6. Hiring Bad Programmers</b><br/><br/>I forgot to include this in the early versions of the list,\nbecause nearly all the founders I know are programmers.  This is\nnot a serious problem for them.  They might accidentally hire someone\nbad, but it's not going to kill the company.  In a pinch they can\ndo whatever's required themselves.<br/><br/>But when I think about what killed most of the startups in the\ne-commerce business back in the 90s, it was bad programmers.  A lot\nof those companies were started by business guys who thought the\nway startups worked was that you had some clever idea and then hired\nprogrammers to implement it.  That's actually much harder than it\nsounds — almost impossibly hard in fact — because business guys\ncan't tell which are the good programmers.  They don't even get a\nshot at the best ones, because no one really good wants a job\nimplementing the vision of a business guy.<br/><br/>In practice what happens is that the business guys choose people\nthey think are good programmers (it says here on his resume that\nhe's a Microsoft Certified Developer) but who aren't.  Then they're\nmystified to find that their startup lumbers along like a World War\nII bomber while their competitors scream past like jet fighters.\nThis kind of startup is in the same position as a big company,\nbut without the advantages.<br/><br/>So how do you pick good programmers if you're not a programmer?  I\ndon't think there's an answer.  I was about to say you'd have to\nfind a good programmer to help you hire people.  But if you can't\nrecognize good programmers, how would you even do that?<br/><br/><b>7. Choosing the Wrong Platform</b><br/><br/>A related problem (since it tends to be done by bad programmers)\nis choosing the wrong platform.  For example, I think a lot of\nstartups during the Bubble killed themselves by deciding to build\nserver-based applications on Windows.  Hotmail was still running\non FreeBSD for years after Microsoft bought it, presumably because\nWindows couldn't handle the load.  If Hotmail's founders\nhad chosen to use Windows, they would have been swamped.<br/><br/>PayPal only just dodged this bullet.  After they merged with X.com,\nthe new CEO wanted to switch to Windows — even after PayPal cofounder\nMax Levchin showed that their software scaled only 1% as well on\nWindows as Unix.  Fortunately for PayPal they switched CEOs instead.<br/><br/>Platform is a vague word.  It could mean an operating system, or a\nprogramming language, or a \"framework\" built on top of a programming\nlanguage.  It implies something that both supports and limits, like\nthe foundation of a house.<br/><br/>The scary thing about platforms is that there are always some that\nseem to outsiders to be fine, responsible choices and yet, like\nWindows in the 90s, will destroy you if you choose them.  Java\napplets were probably the most spectacular example.  This was\nsupposed to be the new way of delivering applications.  Presumably\nit killed just about 100% of the startups who believed that.<br/><br/>How do you pick the right platforms?  The usual way is to hire good\nprogrammers and let them choose.  But there is a trick you could\nuse if you're not a programmer: visit a top computer science\ndepartment and see what they use in research projects.<br/><br/><b>8. Slowness in Launching</b><br/><br/>Companies of all sizes have a hard time getting software done.  It's\nintrinsic to the medium; software is always 85% done.  It takes an\neffort of will to push through this and get something released to\nusers.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f3n\"><font color=\"#777777\">3</font></a>]</font><br/><br/>Startups make all kinds of excuses for delaying their launch.  Most\nare equivalent to the ones people use for procrastinating in everyday\nlife.  There's something that needs to happen first.  Maybe.  But\nif the software were 100% finished and ready to launch at the push\nof a button, would they still be waiting?<br/><br/>One reason to launch quickly is that it forces you to actually\n<i>finish</i> some quantum of work.  Nothing is truly finished till it's\nreleased; you can see that from the rush of work that's always\ninvolved in releasing anything, no matter how finished you thought\nit was.  The other reason you need to launch is that it's only by\nbouncing your idea off users that you fully understand it.<br/><br/>Several distinct problems manifest themselves as delays in launching:\nworking too slowly; not truly understanding the problem; fear of\nhaving to deal with users; fear of being judged; working on too\nmany different things; excessive perfectionism.  Fortunately you\ncan combat all of them by the simple expedient of forcing yourself\nto launch <i>something</i> fairly quickly.<br/><br/><b>9. Launching Too Early</b><br/><br/>Launching too slowly has probably killed a hundred times more\nstartups than launching too fast, but it is possible to launch too\nfast.  The danger here is that you ruin your reputation.  You launch\nsomething, the early adopters try it out, and if it's no good they\nmay never come back.<br/><br/>So what's the minimum you need to launch?  We suggest startups think\nabout what they plan to do, identify a core that's both (a) useful\non its own and (b) something that can be incrementally expanded\ninto the whole project, and then get that done as soon as possible.<br/><br/>This is the same approach I (and many other programmers) use for\nwriting software.  Think about the overall goal, then start by\nwriting the smallest subset of it that does anything useful.  If\nit's a subset, you'll have to write it anyway, so in the worst case\nyou won't be wasting your time.  But more likely you'll find that\nimplementing a working subset is both good for morale and helps you\nsee more clearly what the rest should do.<br/><br/>The early adopters you need to impress are fairly tolerant.  They\ndon't expect a newly launched product to do everything; it just has\nto do <i>something</i>.<br/><br/><b>10. Having No Specific User in Mind</b><br/><br/>You can't build things users like without understanding them.  I\nmentioned earlier that the most successful startups seem to have\nbegun by trying to solve a problem their founders had.  Perhaps\nthere's a rule here: perhaps you create wealth in proportion to how\nwell you understand the problem you're solving, and the problems\nyou understand best are your own. \n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f4n\"><font color=\"#777777\">4</font></a>]</font><br/><br/>That's just a theory.  What's not a theory is the converse: if\nyou're trying to solve problems you don't understand, you're hosed.<br/><br/>And yet a surprising number of founders seem willing to\nassume that someone, they're not sure exactly who, will want what\nthey're building.  Do the founders want it?  No, they're not the\ntarget market.  Who is?  Teenagers.  People interested in local\nevents (that one is a perennial tarpit).  Or \"business\" users.  What\nbusiness users?  Gas stations?  Movie studios?  Defense contractors?<br/><br/>You can of course build something for users other than yourself.\nWe did.  But you should realize you're stepping into dangerous\nterritory.  You're flying on instruments, in effect, so you should\n(a) consciously shift gears, instead of assuming you can rely on\nyour intuitions as you ordinarily would, and (b) look at the\ninstruments.<br/><br/>In this case the instruments are the users.  When designing for\nother people you have to be empirical.  You can no longer guess\nwhat will work; you have to find users and measure their responses.\nSo if you're going to make something for teenagers or \"business\"\nusers or some other group that doesn't include you, you have to be\nable to talk some specific ones into using what you're making.  If\nyou can't, you're on the wrong track.<br/><br/><b>11. Raising Too Little Money</b><br/><br/>Most successful startups take funding at some point.  Like having\nmore than one founder, it seems a good bet statistically.  How much\nshould you take, though?<br/><br/>Startup funding is measured in time.  Every startup that isn't\nprofitable (meaning nearly all of them, initially) has a certain\namount of time left before the money runs out and they have to stop.\nThis is sometimes referred to as runway, as in \"How much runway do\nyou have left?\"  It's a good metaphor because it reminds you that\nwhen the money runs out you're going to be airborne or dead.<br/><br/>Too little money means not enough to get airborne.  What airborne\nmeans depends on the situation.  Usually you have to advance to a\nvisibly higher level: if all you have is an idea, a working prototype;\nif you have a prototype, launching; if you're launched, significant\ngrowth.  It depends on investors, because until you're profitable\nthat's who you have to convince.<br/><br/>So if you take money from investors, you have to take enough to get\nto the next step, whatever that is.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f5n\"><font color=\"#777777\">5</font></a>]</font>\nFortunately you have some\ncontrol over both how much you spend and what the next step is.  We\nadvise startups to set both low, initially: spend practically\nnothing, and make your initial goal simply to build a solid prototype.\nThis gives you maximum flexibility.<br/><br/><b>12. Spending Too Much</b><br/><br/>It's hard to distinguish spending too much from raising too little.\nIf you run out of money, you could say either was the cause.  The\nonly way to decide which to call it is by comparison with other\nstartups.  If you raised five million and ran out of money, you\nprobably spent too much.<br/><br/>Burning through too much money is not as common as it used to be.\nFounders seem to have learned that lesson.  Plus it keeps getting\ncheaper to start a startup.  So as of this writing few startups\nspend too much.  None of the ones we've funded have.  (And not just\nbecause we make small investments; many have gone on to raise further\nrounds.)<br/><br/>The classic way to burn through cash is by hiring a lot of people.\nThis bites you twice: in addition to increasing your costs, it slows\nyou down—so money that's getting consumed faster has to last\nlonger.  Most hackers understand why that happens; Fred Brooks\nexplained it in The Mythical Man-Month.<br/><br/>We have three general suggestions about hiring: (a) don't do it if\nyou can avoid it, (b) pay people with equity rather than salary,\nnot just to save money, but because you want the kind of people who\nare committed enough to prefer that, and (c) only hire people who\nare either going to write code or go out and get users, because\nthose are the only things you need at first.<br/><br/><b>13. Raising Too Much Money</b><br/><br/>It's obvious how too little money could kill you, but is there such\na thing as having too much?<br/><br/>Yes and no.  The problem is not so much the money itself as what\ncomes with it.  As one VC who spoke at Y Combinator said, \"Once you\ntake several million dollars of my money, the clock is ticking.\"\nIf VCs fund you, they're not going to let you just put the money\nin the bank and keep operating as two guys living on ramen.  They\nwant that money to go to work. \n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f6n\"><font color=\"#777777\">6</font></a>]</font>\nAt the very least you'll move\ninto proper office space and hire more people.  That will change\nthe atmosphere, and not entirely for the better.  Now most of your\npeople will be employees rather than founders. They won't be as\ncommitted; they'll need to be told what to do; they'll start to\nengage in office politics.<br/><br/>When you raise a lot of money, your company moves to the suburbs\nand has kids.<br/><br/>Perhaps more dangerously, once you take a lot of money it gets\nharder to change direction.  Suppose your initial plan was to sell\nsomething to companies.  After taking VC money you hire a sales\nforce to do that. What happens now if you realize you should be\nmaking this for consumers instead of businesses?  That's a completely\ndifferent kind of selling.  What happens, in practice, is that you\ndon't realize that.  The more people you have, the more you stay\npointed in the same direction.<br/><br/>Another drawback of large investments is the time they take.  The\ntime required to raise money grows with the amount.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f7n\"><font color=\"#777777\">7</font></a>]</font>\nWhen the\namount rises into the millions, investors get very cautious.  VCs\nnever quite say yes or no; they just engage you in an apparently\nendless conversation.  Raising VC scale investments is thus a huge\ntime sink — more work, probably, than the startup itself.   And you\ndon't want to be spending all your time talking to investors while\nyour competitors are spending theirs building things.<br/><br/>We advise founders who go on to seek VC money to take the first\nreasonable deal they get.  If you get an offer from a reputable\nfirm at a reasonable valuation with no unusually onerous terms,\njust take it and get on with building the company.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f8n\"><font color=\"#777777\">8</font></a>]</font>\nWho cares\nif you could get a 30% better deal elsewhere?  Economically, startups\nare an all-or-nothing game.  Bargain-hunting among investors is a\nwaste of time.<br/><br/><b>14. Poor Investor Management</b><br/><br/>As a founder, you have to manage your investors.  You shouldn't\nignore them, because they may have useful insights.  But neither\nshould you let them run the company.  That's supposed to be your\njob.  If investors had sufficient vision to run the companies\nthey fund, why didn't they start them?<br/><br/>Pissing off investors by ignoring them is probably less dangerous\nthan caving in to them.  In our startup, we erred on the ignoring\nside.  A lot of our energy got drained\naway in disputes with investors instead of going into the product.\nBut this was less costly than giving in, which would probably have\ndestroyed the company.  If the founders know what they're doing,\nit's better to have half their attention focused on the product\nthan the full attention of investors who don't.<br/><br/>How hard you have to work on managing investors usually depends on\nhow much money you've taken.  When you raise VC-scale money, the\ninvestors get a great deal of control.  If they have a board majority,\nthey're literally your bosses.  In the more common case, where\nfounders and investors are equally represented and the deciding\nvote is cast by neutral outside directors, all the investors have\nto do is convince the outside directors and they control the company.<br/><br/>If things go well, this shouldn't matter.  So long as you seem to\nbe advancing rapidly, most investors will leave you alone.  But\nthings don't always go smoothly in startups.  Investors have made\ntrouble even for the most successful companies.  One of the most\nfamous examples is Apple, whose board made a nearly fatal blunder\nin firing Steve Jobs.  Apparently even Google got a lot of grief\nfrom their investors early on.<br/><br/><b>15. Sacrificing Users to (Supposed) Profit</b><br/><br/>When I said at the beginning that if you make something users want,\nyou'll be fine, you may have noticed I didn't mention anything about\nhaving the right business model.  That's not because making money\nis unimportant.  I'm not suggesting that founders start companies\nwith no chance of making money in the hope of unloading them before\nthey tank.  The reason we tell founders not to worry about the\nbusiness model initially is that making something people want is\nso much harder.<br/><br/>I don't know why it's so hard to make something people want.  It\nseems like it should be straightforward.  But you can tell it must\nbe hard by how few startups do it.<br/><br/>Because making something people want is so much harder than making\nmoney from it, you should leave business models for later, just as\nyou'd leave some trivial but messy feature for version 2.  In version\n1, solve the core problem.  And the core problem in a startup is\nhow to <a href=\"https://paulgraham.com/wealth.html\">create wealth</a> \n(= how much people want something x the number\nwho want it), not how to convert that wealth into money.<br/><br/>The companies that win are the ones that put users first.  Google,\nfor example.  They made search work, then worried about how to make\nmoney from it.  And yet some startup founders still think it's\nirresponsible not to focus on the business model from the beginning.\nThey're often encouraged in this by investors whose experience comes\nfrom less malleable industries.<br/><br/>It <i>is</i> irresponsible not to think about business models.  It's\njust ten times more irresponsible not to think about the product.<br/><br/><b>16. Not Wanting to Get Your Hands Dirty</b><br/><br/>Nearly all programmers would rather spend their time writing code\nand have someone else handle the messy business of extracting money\nfrom it.  And not just the lazy ones.  Larry and Sergey apparently\nfelt this way too at first.  After developing their new search\nalgorithm, the first thing they tried was to get some other company\nto buy it.<br/><br/>Start a company?  Yech.  Most hackers would rather just have ideas.\nBut as Larry and Sergey found, there's not much of a market for\nideas.  No one trusts an idea till you embody it in a product and\nuse that to grow a user base.  Then they'll pay big time.<br/><br/>Maybe this will change, but I doubt it will change much.  There's\nnothing like users for convincing acquirers.  It's not just that\nthe risk is decreased.  The acquirers are human, and they have a\nhard time paying a bunch of young guys millions of dollars just for\nbeing clever.  When the idea is embodied in a company with a lot\nof users, they can tell themselves they're buying the users rather\nthan the cleverness, and this is easier for them to swallow.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f9n\"><font color=\"#777777\">9</font></a>]</font><br/><br/>If you're going to attract users, you'll probably have to get up\nfrom your computer and go find some.  It's unpleasant work, but if\nyou can make yourself do it you have a much greater chance of\nsucceeding.  In the first batch of startups we funded, in the summer\nof 2005, most of the founders spent all their time building their\napplications.  But there was one who was away half the time talking\nto executives at cell phone companies, trying to arrange deals.\nCan you imagine anything more painful for a hacker?\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f10n\"><font color=\"#777777\">10</font></a>]</font>\nBut it\npaid off, because this startup seems the most successful of that\ngroup by an order of magnitude.<br/><br/>If you want to start a startup, you have to face the fact that you\ncan't just hack.  At least one hacker will have to spend some of\nthe time doing business stuff.<br/><br/><b>17. Fights Between Founders</b><br/><br/>Fights between founders are surprisingly common.  About 20% of the\nstartups we've funded have had a founder leave.  It happens so often\nthat we've reversed our attitude to vesting.  We still don't require\nit, but now we advise founders to vest so there will be an orderly\nway for people to quit.<br/><br/>A founder leaving doesn't necessarily kill a startup, though.  Plenty\nof successful startups have had that happen. \n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f11n\"><font color=\"#777777\">11</font></a>]</font>\nFortunately it's\nusually the least committed founder who leaves.  If there are three\nfounders and one who was lukewarm leaves, big deal.  If you have\ntwo and one leaves, or a guy with critical technical skills leaves,\nthat's more of a problem.  But even that is survivable.  Blogger\ngot down to one person, and they bounced back.<br/><br/>Most of the disputes I've seen between founders could have been\navoided if they'd been more careful about who they started a company\nwith.  Most disputes are not due to the situation but the people.\nWhich means they're inevitable.  And most founders who've been\nburned by such disputes probably had misgivings, which they suppressed,\nwhen they started the company.  Don't suppress misgivings.  It's\nmuch easier to fix problems before the company is started than\nafter.  So don't include your housemate in your startup because\nhe'd feel left out otherwise.  Don't start a company with someone\nyou dislike because they have some skill you need and you worry you\nwon't find anyone else.  The people are the most important ingredient\nin a startup, so don't compromise there.<br/><br/><b>18. A Half-Hearted Effort</b><br/><br/>The failed startups you hear most about are the spectacular\nflameouts.  Those are actually the elite of failures.  The most\ncommon type is not the one that makes spectacular mistakes, but the\none that doesn't do much of anything — the one we never even hear\nabout, because it was some project a couple guys started on the\nside while working on their day jobs, but which never got anywhere\nand was gradually abandoned.<br/><br/>Statistically, if you want to avoid failure, it would seem like the\nmost important thing is to quit your day job.  Most founders of\nfailed startups don't quit their day jobs, and most founders of\nsuccessful ones do.  If startup failure were a disease, the CDC\nwould be issuing bulletins warning people to avoid day jobs.<br/><br/>Does that mean you should quit your day job?  Not necessarily.  I'm\nguessing here, but I'd guess that many of these would-be founders\nmay not have the kind of determination it takes to start a company,\nand that in the back of their minds, they know it.  The reason they\ndon't invest more time in their startup is that they know it's a\nbad investment.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f12n\"><font color=\"#777777\">12</font></a>]</font><br/><br/>I'd also guess there's some band of people who could have succeeded\nif they'd taken the leap and done it full-time, but didn't. I have\nno idea how wide this band is, but if the winner/borderline/hopeless\nprogression has the sort of distribution you'd expect, the number\nof people who could have made it, if they'd quit their day job, is\nprobably an order of magnitude larger than the number who do make\nit.\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/startupmistakes.html#f13n\"><font color=\"#777777\">13</font></a>]</font><br/><br/>If that's true, most startups that could succeed fail because the\nfounders don't devote their whole efforts to them.  That certainly\naccords with what I see out in the world.  Most startups fail because\nthey don't make something people want, and the reason most don't\nis that they don't try hard enough.<br/><br/>In other words, starting startups is just like everything else.\nThe biggest mistake you can make is not to try hard enough.  To the\nextent there's a secret to success, it's not to be in denial about\nthat.<br/><br/><br/><br/>\n<b>Notes</b><br/><br/>[<a name=\"f1n\"><font color=\"#000000\">1</font></a>]\nThis is not a complete list of the causes of failure,\njust those you can control.  There are also several you can't,\nnotably ineptitude and bad luck.<br/><br/>[<a name=\"f2n\"><font color=\"#000000\">2</font></a>]\nIronically, one variant of the Facebook that might work is a\nfacebook exclusively for college students.<br/><br/>[<a name=\"f3n\"><font color=\"#000000\">3</font></a>]\nSteve Jobs tried to motivate people by saying \"Real artists\nship.\"  This is a fine sentence, but unfortunately not true.  Many\nfamous works of art are unfinished.  It's true in fields that have\nhard deadlines, like architecture and filmmaking, but even there\npeople tend to be tweaking stuff till it's yanked out of their\nhands.<br/><br/>[<a name=\"f4n\"><font color=\"#000000\">4</font></a>]\nThere's probably also a second factor: startup founders tend\nto be at the leading edge of technology, so problems they face are\nprobably especially valuable.<br/><br/>[<a name=\"f5n\"><font color=\"#000000\">5</font></a>]\nYou should take more than you think you'll need, maybe 50% to\n100% more, because software takes longer to write and deals longer\nto close than you expect.<br/><br/>[<a name=\"f6n\"><font color=\"#000000\">6</font></a>]\nSince people sometimes call us VCs, I should add that we're\nnot.  VCs invest large amounts of other people's money.  We invest\nsmall amounts of our own, like angel investors.<br/><br/>[<a name=\"f7n\"><font color=\"#000000\">7</font></a>]\nNot linearly of course, or it would take forever to raise five\nmillion dollars.  In practice it just feels like it takes forever.<br/><br/>Though if you include the cases where VCs don't invest, it would\nliterally take forever in the median case.  And maybe we should,\nbecause the danger of chasing large investments is not just that\nthey take a long time.  That's the <i>best</i> case.  The real danger\nis that you'll expend a lot of time and get nothing.<br/><br/>[<a name=\"f8n\"><font color=\"#000000\">8</font></a>]\nSome VCs will offer you an artificially low valuation to see\nif you have the balls to ask for more.  It's lame that VCs play\nsuch games, but some do.  If you're dealing with one of those you\nshould push back on the valuation a bit.<br/><br/>[<a name=\"f9n\"><font color=\"#000000\">9</font></a>]\nSuppose YouTube's founders had gone to Google in 2005 and told\nthem \"Google Video is badly designed.  Give us $10 million and we'll\ntell you all the mistakes you made.\"  They would have gotten\nthe royal raspberry.  Eighteen months later Google paid $1.6 billion\nfor the same lesson, partly because they could then tell themselves\nthat they were buying a phenomenon, or a community, or some vague\nthing like that.<br/><br/>I don't mean to be hard on Google.  They did better than their\ncompetitors, who may have now missed the video boat entirely.<br/><br/>[<a name=\"f10n\"><font color=\"#000000\">10</font></a>]\nYes, actually: dealing with the government.  But phone companies\nare up there.<br/><br/>[<a name=\"f11n\"><font color=\"#000000\">11</font></a>]\nMany more than most people realize, because companies don't advertise\nthis.  Did you know Apple originally had three founders?<br/><br/>[<a name=\"f12n\"><font color=\"#000000\">12</font></a>]\nI'm not dissing these people.  I don't have the determination\nmyself.  I've twice come close to starting startups since Viaweb,\nand both times I bailed because I realized that without the spur\nof poverty I just wasn't willing to endure the stress of a startup.<br/><br/>[<a name=\"f13n\"><font color=\"#000000\">13</font></a>]\nSo how do you know whether you're in the category of people\nwho should quit their day job, or the presumably larger one who\nshouldn't?  I got to the point of saying that this was hard to judge\nfor yourself and that you should seek outside advice, before realizing\nthat that's what we do.  We think of ourselves as investors, but\nviewed from the other direction Y Combinator is a service for\nadvising people whether or not to quit their day job.  We could be\nmistaken, and no doubt often are, but we do at least bet money on\nour conclusions.<br/><br/><b>Thanks</b> to Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris \nfor reading drafts of this.\n<!--\n<a href=\"http://reddit.com\"><img src=\"https://sep.turbifycdn.com/ty/cdn/paulgraham/redditino.png?t=1688221954&\" border=0></a>\n<a href=\"http://reddit.com/info/me0s/comments\">\nComment</a> on this essay. --><br/><br/></br></p></font>","date":"2006-10-01T00:00:00Z"}
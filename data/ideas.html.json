{"href":"ideas.html","title":"Ideas for Startups","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\r\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\r\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\r\nOctober 2005<br/><br><i>(This essay is derived from a talk at the 2005 \r\n<a href=\"http://startupschool.org\">Startup School.</a>)</i><br/><br/>How do you get good ideas for \r\n<a href=\"https://paulgraham.com/start.html\">startups</a>?  That's probably the number\r\none question people ask me.<br/><br/>I'd like to reply with another question: why do people think it's\r\nhard to come up with ideas for startups?<br/><br/>That might seem a stupid thing to ask.  Why do they <i>think</i>\r\nit's hard?  If people can't do it, then it <i>is</i> hard, at least\r\nfor them.  Right?<br/><br/>Well, maybe not.  What people usually say is not that they can't\r\nthink of ideas, but that they don't have any.  That's not quite the\r\nsame thing.  It could be the reason they don't have any is that\r\nthey haven't tried to generate them.<br/><br/>I think this is often the case.  I think people believe that coming\r\nup with ideas for startups is very hard-- that it <i>must</i> be\r\nvery hard-- and so they don't try do to it.  They assume ideas are\r\nlike miracles: they either pop into your head or they don't.<br/><br/>I also have a theory about why people think this.  They overvalue\r\nideas.  They think creating a startup is just a matter of implementing\r\nsome fabulous initial idea.  And since a successful startup is worth\r\nmillions of dollars, a good idea is therefore a million dollar idea.<br/><br/>If coming up with an idea for a startup equals coming up with a\r\nmillion dollar idea, then of course it's going to seem hard.  Too\r\nhard to bother trying.  Our instincts tell us something so valuable\r\nwould not be just lying around for anyone to discover.<br/><br/>Actually, startup ideas are not million dollar ideas, and here's\r\nan experiment you can try to prove it: just try to sell one.  Nothing\r\nevolves faster than markets.  The fact that there's no market for\r\nstartup ideas suggests there's no demand.  Which means, in the\r\nnarrow sense of the word, that startup ideas are worthless.<br/><br/><b>Questions</b><br/><br/>The fact is, most startups end up nothing like the initial idea.\r\nIt would be closer to the truth to say the main value of your initial\r\nidea is that, in the process of discovering it's broken, you'll\r\ncome up with your real idea.<br/><br/>The initial idea is just a starting point-- not a blueprint, but a\r\nquestion.  It might help if they were expressed that way.  Instead\r\nof saying that your idea is to make a collaborative, web-based\r\nspreadsheet, say: could one make a collaborative, web-based\r\nspreadsheet?  A few grammatical tweaks, and a woefully incomplete\r\nidea becomes a promising question to explore.<br/><br/>There's a real difference, because an assertion provokes objections\r\nin a way a question doesn't.  If you say: I'm going to build a\r\nweb-based spreadsheet, then critics-- the most dangerous of which\r\nare in your own head-- will immediately reply that you'd be competing\r\nwith Microsoft, that you couldn't give people the kind of UI they\r\nexpect, that users wouldn't want to have their data on your servers,\r\nand so on.<br/><br/>A question doesn't seem so challenging.  It becomes: let's try\r\nmaking a web-based spreadsheet and see how far we get.  And everyone\r\nknows that if you tried this you'd be able to make <i>something</i>\r\nuseful.  Maybe what you'd end up with wouldn't even be a spreadsheet.\r\nMaybe it would be some kind of new spreadsheet-like collaboration\r\ntool that doesn't even have a name yet.  You wouldn't have thought\r\nof something like that except by implementing your way toward it.<br/><br/>Treating a startup idea as a question changes what you're looking\r\nfor.  If an idea is a blueprint, it has to be right.  But if it's\r\na question, it can be wrong, so long as it's wrong in a way that\r\nleads to more ideas.<br/><br/>One valuable way for an idea to be wrong is to be only a partial\r\nsolution.  When someone's working on a problem that seems too\r\nbig, I always ask: is there some way to bite off some subset of the\r\nproblem, then gradually expand from there?  That will generally\r\nwork unless you get trapped on a local maximum, like 1980s-style\r\nAI, or C.<br/><br/><b>Upwind</b><br/><br/>So far, we've reduced the problem from thinking of a million dollar\r\nidea to thinking of a mistaken question.  That doesn't seem so hard,\r\ndoes it?<br/><br/>To generate such questions you need two things: to be familiar with \r\npromising new technologies, and to have the right kind of friends.\r\nNew technologies are the ingredients startup ideas are made of, and\r\nconversations with friends are the kitchen they're cooked in.<br/><br/>Universities have both, and that's why so many startups grow out\r\nof them.  They're filled with new technologies, because they're\r\ntrying to produce research, and only things that are new count as\r\nresearch.  And they're full of exactly the right kind of people to   \r\nhave ideas with: the other students, who will be not only smart but\r\nelastic-minded to a fault.<br/><br/>The opposite extreme would be a well-paying but boring job at a big\r\ncompany.  Big companies are biased against new technologies, and\r\nthe people you'd meet there would be wrong too.<br/><br/>In an <a href=\"https://paulgraham.com/hs.html\">essay</a> I wrote for high school students,  \r\nI said a good rule of thumb was to stay upwind-- to\r\nwork on things that maximize your future options. The principle\r\napplies for adults too, though perhaps it has to be modified to:\r\nstay upwind for as long as you can, then cash in the potential\r\nenergy you've accumulated when you need to pay for kids.<br/><br/>I don't think people consciously realize this, but one reason\r\ndownwind jobs like churning out Java for a bank pay so well is   \r\nprecisely that they are downwind.  The market price for that kind\r\nof work is higher because it gives you fewer options for the future.\r\nA job that lets you work on exciting new stuff will tend to pay\r\nless, because part of the compensation is in the form of the new\r\nskills you'll learn.<br/><br/>Grad school is the other end of the spectrum from a coding job at\r\na big company: the pay's low but you spend most of your time working\r\non new stuff.  And of course, it's called \"school,\" which makes\r\nthat clear to everyone, though in fact all jobs are some percentage\r\nschool.<br/><br/>The right environment for having startup ideas need not be a\r\nuniversity per se.  It just has to be a situation with a large\r\npercentage of school.<br/><br/>It's obvious why you want exposure to new technology, but why do \r\nyou need other people?  Can't you just think of new ideas yourself?\r\nThe empirical answer is: no.  Even Einstein needed people to bounce\r\nideas off.  Ideas get developed in the process of explaining them\r\nto the right kind of person.  You need that resistance, just\r\nas a carver needs the resistance of the wood.<br/><br/>This is one reason Y Combinator has a rule against investing in \r\nstartups with only one founder.  Practically every successful company\r\nhas at least two.  And because startup founders work under great   \r\npressure, it's critical they be friends.<br/><br/>I didn't realize it till I was writing this, but that may help\r\nexplain why there are so few female startup founders.  I read on\r\nthe Internet (so it must be true) that only 1.7% of VC-backed\r\nstartups are founded by women.  The percentage of female hackers\r\nis small, but not that small.  So why the discrepancy?<br/><br/>When you realize that successful startups tend to have multiple\r\nfounders who were already friends, a\r\npossible explanation emerges.  People's best friends are likely to  \r\nbe of the same sex, and if one group is a minority in some population,\r\n<i>pairs</i> of them will be a minority squared.\r\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/ideas.html#f1n\"><font color=\"#777777\">1</font></a>]</font><br/><br/><b>Doodling</b><br/><br/>What these groups of co-founders do together is more complicated \r\nthan just sitting down and trying to think of ideas.  I suspect the  \r\nmost productive setup is a kind of together-alone-together sandwich.\r\nTogether you talk about some hard problem, probably getting nowhere.\r\nThen, the next morning, one of you has an idea in the shower about\r\nhow to solve it.  He runs eagerly to to tell the others, and together\r\nthey work out the kinks.<br/><br/>What happens in that shower?  It seems to me that ideas just pop\r\ninto my head.  But can we say more than that?<br/><br/>Taking a shower is like a form of meditation.  You're alert, but\r\nthere's nothing to distract you.  It's in a situation like this,\r\nwhere your mind is free to roam, that it bumps into new ideas.<br/><br/>What happens when your mind wanders?  It may be like doodling.  Most\r\npeople have characteristic ways of doodling.  This habit is  \r\nunconscious, but not random: I found my doodles changed after I \r\nstarted studying painting.  I started to make the kind of gestures\r\nI'd make if I were drawing from life.  They were atoms of drawing,  \r\nbut arranged randomly.\r\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/ideas.html#f2n\"><font color=\"#777777\">2</font></a>]</font><br/><br/>Perhaps letting your mind wander is like doodling with ideas.  You\r\nhave certain mental gestures you've learned in your work, and when\r\nyou're not paying attention, you keep making these same gestures,   \r\nbut somewhat randomly.  In effect, you call the same functions on\r\nrandom arguments.  That's what a metaphor is: a function applied   \r\nto an argument of the wrong type.<br/><br/>Conveniently, as I was writing this, my mind wandered: would it be\r\nuseful to have metaphors in a programming language?  I don't know;\r\nI don't have time to think about this.  But it's convenient because\r\nthis is an example of what I mean by habits of mind.  I spend a lot\r\nof time thinking about language design, and my habit of always   \r\nasking \"would x be useful in a programming language\" just got\r\ninvoked.<br/><br/>If new ideas arise like doodles, this would explain why you have\r\nto work at something for a while before you have any.  It's not\r\njust that you can't judge ideas till you're an expert in a field.\r\nYou won't even generate ideas, because you won't have any habits\r\nof mind to invoke.<br/><br/>Of course the habits of mind you invoke on some field don't have\r\nto be derived from working in that field.  In fact, it's often\r\nbetter if they're not.  You're not just looking for good ideas, but\r\nfor good <i>new</i> ideas, and you have a better chance of generating\r\nthose if you combine stuff from distant fields.  As hackers, one\r\nof our habits of mind is to ask, could one open-source x?  For  \r\nexample, what if you made an open-source operating system?  A fine\r\nidea, but not very novel.  Whereas if you ask, could you make an\r\nopen-source play?  you might be onto something.<br/><br/>Are some kinds of work better sources of habits of mind than others?\r\nI suspect harder fields may be better sources, because to attack\r\nhard problems you need powerful solvents.  I find math is a good\r\nsource of metaphors-- good enough that it's worth studying just for\r\nthat.  Related fields are also good sources, especially when they're\r\nrelated in unexpected ways.  Everyone knows computer science and\r\nelectrical engineering are related, but precisely because everyone\r\nknows it, importing ideas from one to the other doesn't yield great\r\nprofits.  It's like importing something from Wisconsin to Michigan.  \r\nWhereas (I claim) hacking and <a href=\"https://paulgraham.com/hp.html\">painting</a> are\r\nalso related, in the sense that hackers and painters are both \r\n<a href=\"https://paulgraham.com/taste.html\">makers</a>,\r\nand this source of new ideas is practically virgin territory.<br/><br/><b>Problems</b><br/><br/>In theory you could stick together ideas at random and see what you\r\ncame up with.  What if you built a peer-to-peer dating site?  Would\r\nit be useful to have an automatic book?  Could you turn theorems\r\ninto a commodity?  When you assemble ideas at random like this, \r\nthey may not be just stupid, but semantically ill-formed.  What \r\nwould it even mean to make theorems a commodity?  You got me.  I\r\ndidn't think of that idea, just its name.<br/><br/>You might come up with something useful this way, but I never have.\r\nIt's like knowing a fabulous sculpture is hidden inside a block of\r\nmarble, and all you have to do is remove the marble that isn't part\r\nof it.  It's an encouraging thought, because it reminds you there   \r\nis an answer, but it's not much use in practice because the search\r\nspace is too big.<br/><br/>I find that to have good ideas I need to be working on some problem.\r\nYou can't start with randomness.  You have to start with a problem,\r\nthen let your mind wander just far enough for new ideas to form.<br/><br/>In a way, it's harder to see problems than their solutions.  Most  \r\npeople prefer to remain in denial about problems.  It's obvious\r\nwhy: problems are irritating.  They're problems!  Imagine if people\r\nin 1700 saw their lives the way we'd see them.  It would have been\r\nunbearable.  This denial is such a powerful force that, even when \r\npresented with possible solutions, people often prefer to believe\r\nthey wouldn't work.<br/><br/>I saw this phenomenon when I worked on spam filters.  In 2002, most\r\npeople preferred to ignore spam, and most of those who didn't\r\npreferred to believe the heuristic filters then available were the\r\nbest you could do.<br/><br/>I found spam intolerable, and I felt it had to be possible to\r\nrecognize it statistically.  And it turns out that was all you  \r\nneeded to solve the problem.  The algorithm I used was ridiculously\r\nsimple.  Anyone who'd really tried to solve the problem would have\r\nfound it.  It was just that no one had really tried to solve the\r\nproblem.\r\n<font color=\"#777777\">[<a href=\"https://paulgraham.com/ideas.html#f3n\"><font color=\"#777777\">3</font></a>]</font><br/><br/>Let me repeat that recipe: finding the problem intolerable and  \r\nfeeling it must be possible to solve it.  Simple as it seems, that's\r\nthe recipe for a lot of startup ideas.<br/><br/><b>Wealth</b><br/><br/>So far most of what I've said applies to ideas in general.  What's  \r\nspecial about startup ideas?  Startup ideas are ideas for companies,\r\nand companies have to make money.  And the way to make money is to\r\nmake something people want.<br/><br/>Wealth is what people want.  I don't mean that as some kind of  \r\nphilosophical statement; I mean it as a tautology.<br/><br/>So an idea for a startup is an idea for something people want.\r\nWouldn't any good idea be something people want?  Unfortunately \r\nnot.  I think new theorems are a fine thing to create, but there\r\nis no great demand for them.  Whereas there appears to be great\r\ndemand for celebrity gossip magazines.  Wealth is defined democratically.\r\nGood ideas and valuable ideas are not quite the same thing; the\r\ndifference is individual tastes.<br/><br/>But valuable ideas are very close to good ideas, especially in\r\ntechnology.  I think they're so close that you can get away with\r\nworking as if the goal were to discover good ideas, so long as, in\r\nthe final stage, you stop and ask: will people actually pay for \r\nthis?  Only a few ideas are likely to make it that far and then get\r\nshot down; RPN calculators might be one example.<br/><br/>One way to make something people want is to look at stuff people   \r\nuse now that's broken.  Dating sites are a prime example.  They   \r\nhave millions of users, so they must be promising something people \r\nwant.  And yet they work horribly.  Just ask anyone who uses them.  \r\nIt's as if they used the worse-is-better approach but stopped after\r\nthe first stage and handed the thing over to marketers.<br/><br/>Of course, the most obvious breakage in the average computer user's \r\nlife is Windows itself.  But this is a special case: you can't\r\ndefeat a monopoly by a frontal attack.  Windows can and will be     \r\noverthrown, but not by giving people a better desktop OS.  The way\r\nto kill it is to redefine the problem as a superset of the current \r\none.  The problem is not, what operating system should people use\r\non desktop computers?  but how should people use applications?\r\nThere are answers to that question that don't even involve desktop\r\ncomputers.<br/><br/>Everyone thinks Google is going to solve this problem, but it is a\r\nvery subtle one, so subtle that a company as big as Google might\r\nwell get it wrong.  I think the odds are better than 50-50 that the\r\nWindows killer-- or more accurately, Windows transcender-- will\r\ncome from some little startup.<br/><br/>Another classic way to make something people want is to take a\r\nluxury and make it into a commmodity.  People must want something\r\nif they pay a lot for it.  And it is a very rare product that can't\r\nbe made dramatically cheaper if you try.<br/><br/>This was Henry Ford's plan.  He made cars, which had been a luxury\r\nitem, into a commodity.  But the idea is much older than Henry Ford.\r\nWater mills transformed mechanical power from a luxury into a\r\ncommodity, and they were used in the Roman empire.  Arguably\r\npastoralism transformed a luxury into a commodity.<br/><br/>When you make something cheaper you can sell more of them.  But if\r\nyou make something dramatically cheaper you often get qualitative\r\nchanges, because people start to use it in different ways.  For\r\nexample, once computers get so cheap that most people can have one\r\nof their own, you can use them as communication devices.<br/><br/>Often to make something dramatically cheaper you have to redefine \r\nthe problem.  The Model T didn't have all the features previous\r\ncars did.  It only came in black, for example.  But it solved the\r\nproblem people cared most about, which was getting from place to\r\nplace.<br/><br/>One of the most useful mental habits I know I learned from Michael\r\nRabin: that the best way to solve a problem is often to redefine\r\nit.  A lot of people use this technique without being consciously\r\naware of it, but Rabin was spectacularly explicit.  You need a big\r\nprime number?  Those are pretty expensive.  How about if I give you\r\na big number that only has a 10 to the minus 100 chance of not being\r\nprime?  Would that do?  Well, probably; I mean, that's probably\r\nsmaller than the chance that I'm imagining all this anyway.<br/><br/>Redefining the problem is a particularly juicy heuristic when you\r\nhave competitors, because it's so hard for rigid-minded people to \r\nfollow.  You can work in plain sight and they don't realize the \r\ndanger.  Don't worry about us. We're just working on search.  Do   \r\none thing and do it well, that's our motto.<br/><br/>Making things cheaper is actually a subset of a more general\r\ntechnique: making things easier.  For a long time it was most of  \r\nmaking things easier, but now that the things we build are so\r\ncomplicated, there's another rapidly growing subset: making things  \r\neasier to <i>use</i>.<br/><br/>This is an area where there's great room for improvement.  What you\r\nwant to be able to say about technology is: it just works.  How\r\noften do you say that now?<br/><br/>Simplicity takes effort-- genius, even.  The average programmer   \r\nseems to produce UI designs that are almost willfully bad. I was   \r\ntrying to use the stove at my mother's house a couple weeks ago. \r\nIt was a new one, and instead of physical knobs it had buttons and\r\nan LED display.  I tried pressing some buttons I thought would cause\r\nit to get hot, and you know what it said?  \"Err.\"  Not even \"Error.\"\r\n\"Err.\"  You can't just say \"Err\" to the user of a <i>stove</i>.\r\nYou should design the UI so that errors are impossible.  And the  \r\nboneheads who designed this stove even had an example of such a UI\r\nto work from: the old one.  You turn one knob to set the temperature\r\nand another to set the timer.  What was wrong with that?  It just\r\nworked.<br/><br/>It seems that, for the average engineer, more options just means\r\nmore rope to hang yourself.  So if you want to start a startup, you\r\ncan take almost any existing technology produced by a big company, \r\nand assume you could build something way easier to use.<br/><br/><b>Design for Exit</b><br/><br/>Success for a startup approximately equals getting bought.  You\r\nneed some kind of exit strategy, because you can't get the smartest\r\npeople to work for you without giving them options likely to be\r\nworth something.  Which means you either have to get bought or go\r\npublic, and the number of startups that go public is very small.<br/><br/>If success probably means getting bought, should you make that a\r\nconscious goal?  The old answer was no: you were supposed to pretend\r\nthat you wanted to create a giant, public company, and act surprised\r\nwhen someone made you an offer.  Really, you want to buy us? Well,\r\nI suppose we'd consider it, for the right price.<br/><br/>I think things are changing.  If 98% of the time success means   \r\ngetting bought, why not be open about it?  If 98% of the time you're\r\ndoing product development on spec for some big company, why not\r\nthink of that as your task?  One advantage of this approach is that\r\nit gives you another source of ideas: look at big companies, think\r\nwhat they <a href=\"http://kiko.com\">should</a> \r\nbe doing, and do it yourself.  Even if\r\nthey already know it, you'll probably be done faster.<br/><br/>Just be sure to make something multiple acquirers will want.  Don't\r\nfix Windows, because the only potential acquirer is Microsoft, and  \r\nwhen there's only one acquirer, they don't have to hurry.  They can\r\ntake their time and copy you instead of buying you.  If you want\r\nto get market price, work on something where there's competition.<br/><br/>If an increasing number of startups are created to do product\r\ndevelopment on spec, it will be a natural counterweight to monopolies.\r\nOnce some type of technology is captured by a monopoly, it will    \r\nonly evolve at big company rates instead of startup rates, whereas\r\nalternatives will evolve with especial speed.  A free market\r\ninterprets monopoly as damage and routes around it.<br/><br/><b>The Woz Route</b><br/><br/>The most productive way to generate startup ideas is also the\r\nmost unlikely-sounding: by accident.  If you look at how famous\r\nstartups got started, a lot of them weren't initially supposed to  \r\nbe startups.  Lotus began with a program Mitch Kapor wrote for a\r\nfriend. Apple got started because Steve Wozniak wanted to build\r\nmicrocomputers, and his employer, Hewlett-Packard, wouldn't let him\r\ndo it at work.  Yahoo began as David Filo's personal collection of\r\nlinks.<br/><br/>This is not the only way to start startups.  You can sit down and\r\nconsciously come up with an idea for a company; we did.  But measured\r\nin total market cap, the build-stuff-for-yourself model might be  \r\nmore fruitful.  It certainly has to be the most fun way to come up\r\nwith startup ideas.  And since a startup ought to have multiple\r\nfounders who were already friends before they decided to start a \r\ncompany, the rather surprising conclusion is that the best way to   \r\ngenerate startup ideas is to do what hackers do for fun: cook up\r\namusing hacks with your friends.<br/><br/>It seems like it violates some kind of conservation law, but there\r\nit is: the best way to get a \"million dollar idea\" is just to do\r\nwhat hackers enjoy doing anyway.<br/><br/><br/><br/>\n<b>Notes</b><br/><br/>[<a name=\"f1n\"><font color=\"#000000\">1</font></a>]\r\nThis phenomenon may account for a number of discrepancies\r\ncurrently blamed on various forbidden isms.  Never attribute to    \r\nmalice what can be explained by math.<br/><br/>[<a name=\"f2n\"><font color=\"#000000\">2</font></a>]   \r\nA lot of classic abstract expressionism is doodling of this type:\r\nartists trained to paint from life using the same gestures but\r\nwithout using them to represent anything.  This explains why such\r\npaintings are (slightly) more interesting than random marks would be.<br/><br/>[<a name=\"f3n\"><font color=\"#000000\">3</font></a>]\r\nBill Yerazunis had solved the problem, but he got there by\r\nanother path.  He made a general-purpose file classifier so good\r\nthat it also worked for spam.<br/><br/></br></p></font>","date":"2005-10-01T00:00:00Z"}
{"href":"ambitious.html","title":"Frighteningly Ambitious Startup Ideas","content":"<font face=\"verdana\" size=\"2\"><table cellspacing=\"0\" width=\"100%\">\n<tr><td bgcolor=\"#ff9922\"><img height=\"15\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/><font size=\"2\">\n<b>Want to start a startup?</b>  Get funded by\n<a href=\"http://ycombinator.com/apply.html\">Y Combinator</a>.\n</font>\n<br/><img height=\"5\" src=\"http://www.virtumundo.com/images/spacer.gif\" width=\"1\"/></td></tr>\n</table>\n<p>\nMarch 2012<br><br/>One of the more surprising things I've noticed while working\non Y Combinator is how frightening the most ambitious startup\nideas are.  In this essay I'm going to demonstrate\nthis phenomenon by describing some.  Any one of them\ncould make you a billionaire.  That might sound like an attractive\nprospect, and yet when I describe these ideas you may\nnotice you find yourself shrinking away from them.<br/><br/>Don't worry, it's not a sign of weakness.  Arguably it's a sign of\nsanity.  The biggest startup ideas are terrifying.  And not just\nbecause they'd be a lot of work.  The biggest ideas seem to threaten\nyour identity: you wonder if you'd have enough ambition to carry\nthem through.<br/><br/>There's a scene in <i>Being John Malkovich</i> where the nerdy hero\nencounters a very attractive, sophisticated woman.  She says to\nhim:\n<blockquote>\n  Here's the thing: If you ever got me, you wouldn't have a clue\n  what to do with me.\n</blockquote>\nThat's what these ideas say to us.<br/><br/>This phenomenon is one of the most important things you can understand\nabout startups.  \n<font color=\"#999999\">[<a href=\"#f1n\"><font color=\"#999999\">1</font></a>]</font>\nYou'd expect big startup ideas to be\nattractive, but actually they tend to repel you.  And that has a\nbunch of consequences.  It means these ideas are invisible to most\npeople who try to think of startup ideas, because their subconscious\nfilters them out.  Even the most ambitious people are probably best\noff approaching them obliquely.<br/><br/><b>1. A New Search Engine</b><br/><br/>The best ideas are just on the right side of impossible.  I don't\nknow if this one is possible, but there are signs it might be.\nMaking a new search engine means competing with Google, and recently\nI've noticed some cracks in their fortress.<br/><br/>The point when it became clear to me that Microsoft had lost their\nway was when they decided to get into the search business.  That\nwas not a natural move for Microsoft.  They did it because they\nwere afraid of Google, and Google was in the search business.  But\nthis meant (a) Google was now setting Microsoft's agenda, and (b)\nMicrosoft's agenda consisted of stuff they weren't good at.<br/><br/>Microsoft : Google :: Google : Facebook.<br/><br/>That does not by itself mean\nthere's room for a new search engine, but lately when using Google\nsearch I've found myself nostalgic for the old days, when\nGoogle was true to its own slightly aspy self.  Google used to give\nme a page of the right answers, fast, with no clutter.  Now the\nresults seem inspired by the Scientologist principle that what's\ntrue is what's true for you.  And the pages don't have the\nclean, sparse feel they used to.  Google search results used to\nlook like the output of a Unix utility.  Now if I accidentally put\nthe cursor in the wrong place, anything might happen.<br/><br/>The way to win here is to build the search engine all the hackers\nuse.  A search engine whose users consisted of the top 10,000 hackers\nand no one else would be in a very powerful position despite its\nsmall size, just as Google was when it was that search engine.  And\nfor the first time in over a decade the idea of switching seems\nthinkable to me.<br/><br/>Since anyone capable of starting this company is one of those 10,000\nhackers, the route is at least straightforward: make the search\nengine you yourself want.  Feel free to make it excessively hackerish.\nMake it really good for code search, for example.  Would you like\nsearch queries to be Turing complete?  Anything that gets you those\n10,000 users is ipso facto good.<br/><br/>Don't worry if something you want to do will constrain you in the\nlong term, because if you don't get that initial core of users,\nthere won't be a long term.  If you can just build something that\nyou and your friends genuinely prefer to Google, you're already\nabout 10% of the way to an IPO, just as Facebook was (though they\nprobably didn't realize it) when they got all the Harvard undergrads.<br/><br/><b>2. Replace Email</b><br/><br/>Email was not designed to be used the way we use it now.  Email is\nnot a messaging protocol.  It's a todo list.  Or rather, my inbox\nis a todo list, and email is the way things get onto it.  But it\nis a disastrously bad todo list.<br/><br/>I'm open to different types of solutions to this problem, but I\nsuspect that tweaking the inbox is not enough, and that email has\nto be replaced with a new protocol. \nThis new protocol should be a todo list protocol, not\na messaging protocol, although there is a degenerate case where\nwhat someone wants you to do is: read the following text.<br/><br/>As a todo list protocol, the new protocol should give more power\nto the recipient than email does.  I want there to be more restrictions\non what someone can put on my todo list.  And when someone can put\nsomething on my todo list, I want them to tell me more about what\nthey want from me.  Do they want me to do something beyond just\nreading some text?  How important is it?  (There obviously has to\nbe some mechanism to prevent people from saying everything is\nimportant.)  When does it have to be done?<br/><br/>This is one of those ideas that's like an irresistible force meeting\nan immovable object.  On one hand, entrenched protocols are impossible\nto replace.  On the other, it seems unlikely that people in\n100 years will still be living in the same email hell we do now.\nAnd if email is going to get replaced eventually, why not now?<br/><br/>If you do it right, you may be able to avoid the usual chicken \nand egg problem new protocols face, because some of the most powerful\npeople in the world will be among the first to switch to it.  \nThey're all at the mercy of email too.<br/><br/>Whatever you build, make it fast.  GMail has become painfully slow.\n<font color=\"#999999\">[<a href=\"#f2n\"><font color=\"#999999\">2</font></a>]</font>\nIf you made something no better than GMail, but fast, that\nalone would let you start to pull users away from GMail.<br/><br/>GMail is slow because Google can't afford to spend a lot on it.\nBut people will pay for this.  I'd have no problem paying $50 a month.\nConsidering how much time I spend in email, it's kind of scary to\nthink how much I'd be justified in paying.  At least $1000 a month.\nIf I spend several hours a day reading and writing email, that would\nbe a cheap way to make my life better.<br/><br/><b>3. Replace Universities</b><br/><br/>People are all over this idea lately, and I think they're onto\nsomething.  I'm reluctant to suggest that an institution that's\nbeen around for a millennium is finished just because of some mistakes\nthey made in the last few decades, but certainly in the last few\ndecades US universities seem to have been headed down the wrong\npath.  One could do a lot better for a lot less money.<br/><br/>I don't think universities will disappear.  They won't be replaced\nwholesale.  They'll just lose the de facto monopoly on certain types\nof learning that they once had.  There will be many different ways\nto learn different things, and some may look quite different from\nuniversities.   Y Combinator itself is arguably one of them.<br/><br/>Learning is such a big problem that changing the way people do it\nwill have a wave of secondary effects.  For example, the name of\nthe university one went to is treated by a lot of people (correctly\nor not) as a credential in its own right.  If learning breaks up\ninto many little pieces, credentialling may separate from it.  There\nmay even need to be replacements for campus social life (and oddly\nenough, YC even has aspects of that).<br/><br/>You could replace high schools too, but there you face bureaucratic\nobstacles that would slow down a startup.  Universities seem the\nplace to start.<br/><br/><b>4. Internet Drama</b><br/><br/>Hollywood has been slow to embrace the Internet.  That was a \nmistake, because I think we can now call a winner in the race between\ndelivery mechanisms, and it is the Internet, not cable.<br/><br/>A lot of the reason is the horribleness of cable clients, also known\nas TVs.  Our family didn't wait for Apple TV.  We hated our last\nTV so much that a few months ago we replaced it with an iMac bolted\nto the wall.  It's a little inconvenient to control it with a\nwireless mouse, but the overall experience is much better than the\nnightmare UI we had to deal with before.<br/><br/>Some of the attention people currently devote to watching\nmovies and TV can be stolen by things that seem completely unrelated,\nlike social networking apps.  More can be stolen by things that are\na little more closely related, like games.  But there will probably\nalways remain some residual demand for conventional drama, where\nyou sit passively and watch as a plot happens.  So how do you deliver\ndrama via the Internet?  Whatever you make will have to be on a\nlarger scale than Youtube clips.  When people sit down to watch a\nshow, they want to know what they're going to get: either part\nof a series with familiar characters, or a single longer \"movie\"\nwhose basic premise they know in advance.<br/><br/>There are two ways delivery and payment could play out.  Either\nsome company like Netflix or Apple will be the app store for\nentertainment, and you'll reach audiences through them.  Or the\nwould-be app stores will be too overreaching, or too technically\ninflexible, and companies will arise to supply payment and streaming\na la carte to the producers of drama.  If that's the way things\nplay out, there will also be a need for such infrastructure companies.<br/><br/><b>5. The Next Steve Jobs</b><br/><br/>I was talking recently to someone who knew Apple well, and I asked\nhim if the people now running the company would be able to keep\ncreating new things the way Apple had under Steve Jobs.  His answer\nwas simply \"no.\"  I already feared that would be the answer.  I\nasked more to see how he'd qualify it.  But he didn't qualify it\nat all.  No, there will be no more great new stuff beyond whatever's\ncurrently in the pipeline.  Apple's\nrevenues may continue to rise for a long time, but as Microsoft\nshows, revenue is a lagging indicator in the technology business.<br/><br/>So if Apple's not going to make the next iPad, who is?  None of the\nexisting players.  None of them are run by product visionaries, and\nempirically you can't seem to get those by hiring them.  Empirically\nthe way you get a product visionary as CEO is for him to found the\ncompany and not get fired.  So the company that creates the next\nwave of hardware is probably going to have to be a startup.<br/><br/>I realize it sounds preposterously ambitious for a startup to try\nto become as big as Apple.  But no more ambitious than it was for\nApple to become as big as Apple, and they did it.  Plus a startup\ntaking on this problem now has an advantage the original Apple\ndidn't: the example of Apple.  Steve Jobs has shown us what's\npossible.  That helps would-be successors both directly, as Roger\nBannister did, by showing how much better you can do than people\ndid before, and indirectly, as Augustus did, by lodging the idea\nin users' minds that a single person could unroll the future \nfor them. \n<font color=\"#999999\">[<a href=\"#f3n\"><font color=\"#999999\">3</font></a>]</font><br/><br/>Now Steve is gone there's a vacuum we can all feel.  If a new company\nled boldly into the future of hardware, users would follow.  The\nCEO of that company, the \"next Steve Jobs,\" might not measure up\nto Steve Jobs. But he wouldn't have to.  He'd just have to do a\nbetter job than Samsung and HP and Nokia, and that seems pretty\ndoable.<br/><br/><b>6. Bring Back Moore's Law</b><br/><br/>The last 10 years have reminded us what Moore's Law actually says.\nTill about 2002 you could safely misinterpret it as promising that\nclock speeds would double every 18 months.  Actually what it says\nis that circuit densities will double every 18 months.  It used to\nseem pedantic to point that out.  Not any more.  Intel can no longer\ngive us faster CPUs, just more of them.<br/><br/>This Moore's Law is not as good as the old one.  Moore's Law used\nto mean that if your software was slow, all you had to do was wait,\nand the inexorable progress of hardware would solve your problems.\nNow if your software is slow you have to rewrite it to do more\nthings in parallel, which is a lot more work than waiting.<br/><br/>It would be great if a startup could give us something of the old\nMoore's Law back, by writing software that could make a large number\nof CPUs look to the developer like one very fast CPU.  There are\nseveral ways to approach this problem.  The most ambitious is to\ntry to do it automatically: to write a compiler that will parallelize\nour code for us.  There's a name for this compiler, <i>the sufficiently\nsmart compiler,</i> and it is a byword for impossibility.  But is\nit really impossible?  Is there no configuration of the bits in\nmemory of a present day computer that is this compiler?  If you\nreally think so, you should try to prove it, because that would be\nan interesting result.  And if it's not impossible but simply very\nhard, it might be worth trying to write it.  The expected value\nwould be high even if the chance of succeeding was low.<br/><br/>The reason the expected value is so high is web services.  If you\ncould write software that gave programmers the convenience of the\nway things were in the old days, you could offer it to them as a\nweb service.  And that would in turn mean that you got practically\nall the users.<br/><br/>Imagine there was another processor manufacturer that could still translate\nincreased circuit densities into increased clock speeds. They'd\ntake most of Intel's business.  And since web services mean that\nno one sees their processors anymore, by writing the sufficiently\nsmart compiler you could create a situation indistinguishable from\nyou being that manufacturer, at least for the server market.<br/><br/>The least ambitious way of approaching the problem is to start from\nthe other end, and offer programmers more parallelizable Lego blocks\nto build programs out of, like Hadoop and MapReduce.   Then the\nprogrammer still does much of the work of optimization.<br/><br/>There's an intriguing middle ground where you build a semi-automatic\nweapon—where there's a human in the loop.  You make something\nthat looks to the user like the sufficiently smart compiler, but\ninside has people, using highly developed optimization tools to\nfind and eliminate bottlenecks in users' programs.   These people\nmight be your employees, or you might create a marketplace for\noptimization.<br/><br/>An optimization marketplace would be a way to generate the sufficiently\nsmart compiler piecemeal, because participants would immediately\nstart writing bots.  It would be a curious state of affairs if you\ncould get to the point where everything could be done by bots,\nbecause then you'd have made the sufficiently smart compiler, but\nno one person would have a complete copy of it.<br/><br/>I realize how crazy all this sounds.  In fact, what I like about\nthis idea is all the different ways in which it's wrong.  The whole\nidea of focusing on optimization is counter to the general trend\nin software development for the last several decades.  Trying to\nwrite the sufficiently smart compiler is by definition a mistake.\nAnd even if it weren't, compilers are the sort of software that's\nsupposed to be created by open source projects, not companies.  Plus\nif this works it will deprive all the programmers who take pleasure\nin making multithreaded apps of so much amusing complexity. The\nforum troll I have by now internalized doesn't even know where to\nbegin in raising objections to this project.  Now that's what I\ncall a startup idea.<br/><br/><b>7. Ongoing Diagnosis</b><br/><br/>But wait, here's another that could face even greater resistance:\nongoing, automatic medical diagnosis.<br/><br/>One of my tricks for generating startup ideas is to imagine the\nways in which we'll seem backward to future generations.  And I'm\npretty sure that to people 50 or 100 years in the future, it will\nseem barbaric that people in our era waited till they had symptoms\nto be diagnosed with conditions like heart disease and cancer.<br/><br/>For example, in 2004 Bill Clinton found he was feeling short of\nbreath.  Doctors discovered that several of his arteries were over\n90% blocked and 3 days later he had a quadruple bypass.  It seems\nreasonable to assume Bill Clinton has the best medical care available.\nAnd yet even he had to wait till his arteries were over 90% blocked\nto learn that the number was over 90%.  Surely at some point in the\nfuture we'll know these numbers the way we now know something like\nour weight.  Ditto for cancer.  It will seem preposterous to future\ngenerations that we wait till patients have physical symptoms to\nbe diagnosed with cancer.  Cancer will show up on some sort of radar\nscreen immediately.<br/><br/>(Of course, what shows up on the radar screen may be different from\nwhat we think of now as cancer.  I wouldn't be surprised if at any\ngiven time we have ten or even hundreds of microcancers going at\nonce, none of which normally amount to anything.)<br/><br/>A lot of the obstacles to ongoing diagnosis will come from the fact\nthat it's going against the grain of the medical profession.  The\nway medicine has always worked is that patients come to doctors\nwith problems, and the doctors figure out what's wrong.  A lot of\ndoctors don't like the idea of going on the medical equivalent of\nwhat lawyers call a \"fishing expedition,\" where you go looking for\nproblems without knowing what you're looking for.  They call the\nthings that get discovered this way \"incidentalomas,\" and they are\nsomething of a nuisance.<br/><br/>For example, a friend of mine once had her brain scanned as part\nof a study.  She was horrified when the doctors running the study\ndiscovered what appeared to be a large tumor.  After further testing,\nit turned out to be a harmless cyst.  But it cost her a few days\nof terror. A lot of doctors worry that if you start scanning people\nwith no symptoms, you'll get this on a giant scale: a huge number\nof false alarms that make patients panic and require expensive and\nperhaps even dangerous tests to resolve.  But I think that's just\nan artifact of current limitations.  If people were scanned all the\ntime and we got better at deciding what was a real problem, my\nfriend would have known about this cyst her whole life and known\nit was harmless, just as we do a birthmark.<br/><br/>There is room for a lot of startups here.  \nIn addition to the technical obstacles all\nstartups face, and the bureaucratic obstacles all medical startups\nface, they'll be going against thousands of years of medical\ntradition.  But it will happen, and it will be a great thing—so\ngreat that people in the future will feel as sorry for us as we do\nfor the generations that lived before anaesthesia and antibiotics.<br/><br/><b>Tactics</b><br/><br/>Let me conclude with some tactical advice.  If you want to take on\na problem as big as the ones I've discussed, don't make a direct\nfrontal attack on it.  Don't say, for example, that you're going\nto replace email.  If you do that you raise too many expectations.\nYour employees and investors will constantly be asking \"are we there\nyet?\" and you'll have an army of haters waiting to see you fail.\nJust say you're building todo-list software.  That sounds harmless.\nPeople can notice you've replaced email when it's a <i>fait accompli</i>.\n<font color=\"#999999\">[<a href=\"#f4n\"><font color=\"#999999\">4</font></a>]</font><br/><br/>Empirically, the way to do really big things seems to be to start\nwith deceptively small things.  Want to dominate microcomputer\nsoftware?  Start by writing a Basic interpreter for a machine with\na few thousand users.  Want to make the universal web site?  Start\nby building a site for Harvard undergrads to stalk one another.<br/><br/>Empirically, it's not just for other people that you need to start\nsmall.  You need to for your own sake.  Neither Bill Gates nor Mark\nZuckerberg knew at first how big their companies were going to get.\nAll they knew was that they were onto something.  Maybe it's a bad\nidea to have really big ambitions initially, because the bigger\nyour ambition, the longer it's going to take, and the further you\nproject into the future, the more likely you'll get it wrong.<br/><br/>I think the way to use these big ideas is not to try to identify a\nprecise point in the future and then ask yourself how to get from\nhere to there, like the popular image of a visionary.  You'll be\nbetter off if you operate like Columbus and just head in a general\nwesterly direction.  Don't try to construct the future like a\nbuilding, because your current blueprint is almost certainly mistaken.\nStart with something you know works, and when you expand, expand\nwestward.<br/><br/>The popular image of the visionary is someone with a clear view of\nthe future, but empirically it may be better to have a blurry one.<br/><br/><br/><br/><br/><br/><b>Notes</b><br/><br/>[<a name=\"f1n\"><font color=\"#000000\">1</font></a>]\nIt's also one of the most important things VCs fail to\nunderstand about startups.  Most expect founders to walk in with a\nclear plan for the future, and judge them based on that.  Few\nconsciously realize that in the biggest successes there is the least\ncorrelation between the initial plan and what the startup eventually\nbecomes.<br/><br/>[<a name=\"f2n\"><font color=\"#000000\">2</font></a>]\nThis sentence originally read \"GMail is painfully slow.\"\nThanks to Paul Buchheit for the correction.<br/><br/>[<a name=\"f3n\"><font color=\"#000000\">3</font></a>]\nRoger Bannister is famous as the first person to run a mile\nin under 4 minutes.  But his world record only lasted 46 days.  Once\nhe showed it could be done, lots of others followed.  Ten years\nlater Jim Ryun ran a 3:59 mile as a high school junior.<br/><br/>[<a name=\"f4n\"><font color=\"#000000\">4</font></a>]\nIf you want to be the next Apple, maybe you don't even want to start\nwith consumer electronics.  Maybe at first you make something hackers\nuse.  Or you make something popular but apparently unimportant,\nlike a headset or router.  All you need is a bridgehead.<br/><br/>\n<b>Thanks</b> to Sam Altman, Trevor Blackwell, \nPaul Buchheit, Patrick Collison, Aaron Iba, Jessica\nLivingston, Robert Morris, Harj Taggar and Garry Tan\nfor reading drafts of this.<br/><br/></br></p></font>","date":"2012-03-01T00:00:00Z"}
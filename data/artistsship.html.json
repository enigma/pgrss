{"href":"artistsship.html","title":"The Other Half of \"Artists Ship\"","content":"<font face=\"verdana\" size=\"2\">November 2008<br/><br/>One of the differences between big companies and startups is that\nbig companies tend to have developed procedures to protect themselves\nagainst mistakes.  A startup walks like a toddler, bashing\ninto things and falling over all the time.  A big company is more\ndeliberate.<br/><br/>The gradual accumulation of checks in an organization is a kind of\nlearning, based on disasters that have happened to it or others\nlike it.  After giving a contract to a supplier who goes bankrupt\nand fails to deliver, for example, a company might require all\nsuppliers to prove they're solvent before submitting bids.<br/><br/>As companies grow they invariably get more such checks, either in\nresponse to disasters they've suffered, or (probably more often)\nby hiring people from bigger companies who bring with them customs\nfor protecting against new types of disasters.<br/><br/>It's natural for organizations to learn from mistakes.  The problem\nis, people who propose new checks almost never consider that the\ncheck itself has a cost.<br/><br/><i>Every check has a cost.</i> For example, consider the case of making\nsuppliers verify their solvency.  Surely that's mere prudence?  But\nin fact it could have substantial costs.  There's obviously the\ndirect cost in time of the people on both sides who supply and check\nproofs of the supplier's solvency.  But the real costs are the ones\nyou never hear about: the company that would be the best supplier,\nbut doesn't bid because they can't spare the effort to get verified.\nOr the company that would be the best supplier, but falls just short\nof the threshold for solvency—which will of course have been set\non the high side, since there is no apparent cost of increasing it.<br/><br/>Whenever someone in an organization proposes to add a new check,\nthey should have to explain not just the benefit but the cost.  No\nmatter how bad a job they did of analyzing it, this meta-check would\nat least remind everyone there had to <i>be</i> a cost, and send them\nlooking for it.<br/><br/>If companies started doing that, they'd find some surprises.  Joel\nSpolsky recently spoke at Y Combinator about selling software to\ncorporate customers.  He said that in most companies software costing\nup to about $1000 could be bought by individual managers without\nany additional approvals.  Above that threshold, software purchases\ngenerally had to be approved by a committee.  But babysitting this\nprocess was so expensive for software vendors that it didn't make\nsense to charge less than $50,000.  Which means if you're making\nsomething you might otherwise have charged $5000 for, you have to\nsell it for $50,000 instead.<br/><br/>The purpose of the committee is presumably to ensure that the company\ndoesn't waste money. And yet the result is that the company pays\n10 times as much.<br/><br/>Checks on purchases will always be expensive, because the harder\nit is to sell something to you, the more it has to cost.  And not\nmerely linearly, either.  If you're hard enough to sell to, the\npeople who are best at making things don't want to bother.  The\nonly people who will sell to you are companies that specialize in\nselling to you.  Then you've sunk to a whole new level of inefficiency.\nMarket mechanisms no longer protect you, because the good suppliers\nare no longer in the market.<br/><br/>Such things happen constantly to the biggest organizations of all,\ngovernments.  But checks instituted by governments can cause much\nworse problems than merely overpaying.  Checks instituted by\ngovernments can cripple a country's whole economy.  Up till about\n1400, China was richer and more technologically advanced than Europe.\nOne reason Europe pulled ahead was that the Chinese government\nrestricted long trading voyages.  So it was left to the Europeans\nto explore and eventually to dominate the rest of the world, including\nChina.<br/><br/>In more recent times, Sarbanes-Oxley has practically destroyed the\nUS IPO market.  That wasn't the intention of the legislators who\nwrote it.  They just wanted to add a few more checks on public\ncompanies.  But they forgot to consider the cost.  They forgot that\ncompanies about to go public are usually rather stretched, and that\nthe weight of a few extra checks that might be easy for General\nElectric to bear are enough to prevent younger companies from being\npublic at all.<br/><br/>Once you start to think about the cost of checks, you can start to\nask other interesting questions. Is the cost increasing or decreasing?\nIs it higher in some areas than others?  Where does it increase\ndiscontinuously?  If large organizations started to ask questions\nlike that, they'd learn some frightening things.<br/><br/>I think the cost of checks may actually be increasing.  The reason\nis that software plays an increasingly important role in companies,\nand the people who write software are particularly harmed by checks.<br/><br/>Programmers are unlike many types of workers in that the best ones\nactually prefer to work hard.  This doesn't seem to be the case in\nmost types of work.  When I worked in fast food, we didn't prefer\nthe busy times.  And when I used to mow lawns, I definitely didn't\nprefer it when the grass was long after a week of rain.<br/><br/>Programmers, though, like it better when they write more code.  Or\nmore precisely, when they release more code.  Programmers like to\nmake a difference.  Good ones, anyway.<br/><br/>For good programmers, one of the best things about working for a\nstartup is that there are few checks on releases.  In true startups,\nthere are no external checks at all.  If you have an idea for a new\nfeature in the morning, you can write it and push it to the production\nservers before lunch.  And when you can do that, you have more\nideas.<br/><br/>At big companies, software has to go through various approvals\nbefore it can be launched.  And the cost of doing this can be\nenormous—in fact, discontinuous.  I was talking recently to a\ngroup of three programmers whose startup had been acquired a few\nyears before by a big company.  When they'd been independent, they\ncould release changes instantly.  Now, they said, the absolute\nfastest they could get code released on the production servers was\ntwo weeks.<br/><br/>This didn't merely make them less productive.  It made them hate\nworking for the acquirer.<br/><br/>Here's a sign of how much programmers like to be able to work hard:\nthese guys would have <i>paid</i> to be able to release code immediately,\nthe way they used to.  I asked them if they'd trade 10% of the\nacquisition price for the ability to release code immediately, and\nall three instantly said yes.  Then I asked what was the maximum\npercentage of the acquisition price they'd trade for it.  They said\nthey didn't want to think about it, because they didn't want to\nknow how high they'd go, but I got the impression it might be as\nmuch as half.<br/><br/>They'd have sacrificed hundreds of thousands of dollars, perhaps\nmillions, just to be able to deliver more software to users.  And\nyou know what?  It would have been perfectly safe to let them.  In\nfact, the acquirer would have been better off; not only wouldn't\nthese guys have broken anything, they'd have gotten a lot more done.\nSo the acquirer is in fact getting worse performance at greater\ncost.  Just like the committee approving software purchases.<br/><br/>And just as the greatest danger of being hard to sell to is not\nthat you overpay but that the best suppliers won't even sell to\nyou, the greatest danger of applying too many checks to your\nprogrammers is not that you'll make them unproductive, but that\ngood programmers won't even want to work for you.<br/><br/>Steve Jobs's famous maxim \"artists ship\" works both ways.  Artists\naren't merely capable of shipping.  They insist on it.  So if you\ndon't let people ship, you won't have any artists.<br/><br/></font>","date":"2008-11-01T00:00:00Z"}
{"href":"javacover.html","title":"Java's Cover","content":"<font face=\"verdana\" size=\"2\">April 2001<br/><br/>This essay developed out of conversations I've had with\nseveral other programmers about why Java smelled suspicious.  It's not\na critique of Java!  It is a case study of hacker's radar.<br/><br/>Over time, hackers develop a nose for good (and bad) technology.\nI thought it might be interesting to try and write down what\nmade Java seem suspect to me.<br/><br/>Some people who've read this think it's an interesting attempt to write about\nsomething that hasn't been written about before.  Others say I\nwill get in trouble for appearing to be writing about\nthings I don't understand.  So, just in\ncase it does any good, let me clarify that I'm not writing here\nabout Java (which I have never used) but about hacker's radar\n(which I have thought about a lot).<br/><br/><hr/><br/><br/>The aphorism \"you can't tell a book by its cover\" originated in\nthe times when books were sold in plain cardboard covers, to be\nbound by each purchaser according to his own taste.  In those days,\nyou couldn't tell a book by its cover.  But publishing has advanced\nsince then: present-day publishers work hard to make the cover\nsomething you can tell a book by.<br/><br/>I spend a lot of time in bookshops and I feel as if I have by now\nlearned to understand everything publishers mean to tell me about\na book, and perhaps a bit more.  The time I haven't spent in\nbookshops I've spent mostly in front of computers, and I feel as\nif I've learned, to some degree, to judge technology by its cover\nas well.  It may be just luck, but I've saved myself from a few\ntechnologies that turned out to be real stinkers.<br/><br/>So far, Java seems like a stinker to me.  I've never written a Java\nprogram, never more than glanced over reference books about it,\nbut I have a hunch that it won't be a very successful language.\nI may turn out to be mistaken; making predictions about technology\nis a dangerous business.  But for what it's worth, as a sort of\ntime capsule, here's why I don't like the look of Java:<br/><br/>\n1. It has been so energetically hyped.  Real standards don't have\nto be promoted.  No one had to promote C, or Unix, or HTML.  A real\nstandard tends to be already established by the time most people\nhear about it.  On the hacker radar screen, Perl is as big as Java,\nor bigger, just on the strength of its own merits.<br/><br/>2. It's aimed low.  In the original Java white paper, Gosling\nexplicitly says Java was designed not to be too difficult for\nprogrammers used to C.  It was designed to be another C++: C plus\na few ideas taken from more advanced languages.  Like the creators\nof sitcoms or junk food or package tours, Java's designers were\nconsciously designing a product for people not as smart as them.\nHistorically, languages designed for other people to use have been\nbad:  Cobol, PL/I, Pascal, Ada, C++.  The good languages have been\nthose that were designed for their own creators:  C, Perl, Smalltalk,\nLisp.<br/><br/>3. It has ulterior motives.  Someone once said that the world would\nbe a better place if people only wrote books because they had\nsomething to say, rather than because they wanted to write a book.\nLikewise, the reason we hear about Java all the time is not because\nit has something to say about programming languages.  We hear about\nJava as part of a plan by Sun to undermine Microsoft.<br/><br/>4. No one loves it.  C, Perl, Python, Smalltalk, and Lisp programmers\nlove their languages.  I've never heard anyone say that they loved\nJava.<br/><br/>5. People are forced to use it.  A lot of the people I know using\nJava are using it because they feel they have to.  Either it's\nsomething they felt they had to do to get funded, or something they\nthought customers would want, or something they were told to do by\nmanagement.  These are smart people; if the technology was good,\nthey'd have used it voluntarily.<br/><br/>6. It has too many cooks.  The best programming languages have been\ndeveloped by small groups.  Java seems to be run by a committee.\nIf it turns out to be a good language, it will be the first time\nin history that a committee has designed a good language.<br/><br/>7. It's bureaucratic.  From what little I know about Java, there\nseem to be a lot of protocols for doing things.  Really good\nlanguages aren't like that.  They let you do what you want and get\nout of the way.<br/><br/>8. It's pseudo-hip.  Sun now pretends that Java is a grassroots,\nopen-source language effort like Perl or Python.  This one just\nhappens to be controlled by a giant company.  So the language is\nlikely to have the same drab clunkiness as anything else that comes\nout of a big company.<br/><br/>9. It's designed for large organizations.  Large organizations have\ndifferent aims from hackers. They want languages that are (believed\nto be) suitable for use by large teams of mediocre programmers--\nlanguages with features that, like the speed limiters in U-Haul\ntrucks, prevent fools from doing too much damage.  Hackers don't\nlike a language that talks down to them.  Hackers just want power.\nHistorically, languages designed for large organizations (PL/I,\nAda) have lost, while hacker languages (C, Perl) have won.  The\nreason: today's teenage hacker is tomorrow's CTO.<br/><br/>10. The wrong people like it.  The programmers I admire most are\nnot, on the whole, captivated by Java.  Who does like Java?  Suits,\nwho don't know one language from another, but know that they keep\nhearing about Java in the press; programmers at big companies, who\nare amazed to find that there is something even better than C++;\nand plug-and-chug undergrads, who are ready to like anything that\nmight get them a job (will this be on the test?).  These people's\nopinions change with every wind.<br/><br/>11. Its daddy is in a pinch.  Sun's business model is being undermined\non two fronts.  Cheap Intel processors, of the same type used in\ndesktop machines, are now more than fast enough for servers.  And\nFreeBSD seems to be at least as good an OS for servers as Solaris.\nSun's advertising implies that you need Sun servers for industrial\nstrength applications.  If this were true, Yahoo would be first in\nline to buy Suns;  but when I worked there, the servers were all\nIntel boxes running FreeBSD.  This bodes ill for Sun's future.  If\nSun runs into trouble, they could drag Java down with them.<br/><br/>12. The DoD likes it.  The Defense Department is encouraging\ndevelopers to use Java. This seems to me the most damning sign of\nall.  The Defense Department does a fine (though expensive) job of\ndefending the country, but they love plans and procedures and\nprotocols.  Their culture is the opposite of hacker culture; on\nquestions of software they will tend to bet wrong.  The last time\nthe DoD really liked a programming language, it was Ada.<br/><br/>\nBear in mind, this is not a critique of Java, but a critique of\nits cover.  I don't know Java well enough to like it or dislike\nit.  This is just an explanation of why I don't find that I'm eager\nto learn it.<br/><br/>It may seem cavalier to dismiss a language before you've even tried\nwriting programs in it.  But this is something all programmers have\nto do.  There are too many technologies out there to learn them\nall.  You have to learn to judge by outward signs which will be\nworth your time.  I have likewise cavalierly dismissed Cobol, Ada,\nVisual Basic, the IBM AS400, VRML, ISO 9000, the SET protocol, VMS,\nNovell Netware, and CORBA, among others.  They just smelled wrong.<br/><br/>It could be that in Java's case I'm mistaken.  It could be that a\nlanguage promoted by one big company to undermine another, designed\nby a committee for a \"mainstream\" audience, hyped to the skies,\nand beloved of the DoD, happens nonetheless to be a clean, beautiful,\npowerful language that I would love programming in.  It could be,\nbut it seems very unlikely.<br/><br/></font>","date":"2001-04-01T00:00:00Z"}
{"href":"google.html","title":"How to Start Google","content":"<font face=\"verdana\" size=\"2\">March 2024<br/><br/><i>(This is a talk I gave to 14 and 15 year olds about what to do now\nif they might want to start a startup later. Lots of schools think\nthey should tell students something about startups. This is what I\nthink they should tell them.)</i><br/><br/>Most of you probably think that when you're released into the\nso-called real world you'll eventually have to get some kind of\njob. That's not true, and today I'm going to talk about a trick you\ncan use to avoid ever having to get a job.<br/><br/>The trick is to start your own company. So it's not a trick for\navoiding <i>work</i>, because if you start your own company you'll\nwork harder than you would if you had an ordinary job. But you will\navoid many of the annoying things that come with a job, including\na boss telling you what to do.<br/><br/>It's more exciting to work on your own project than someone else's.\nAnd you can also get a lot richer. In fact, this is the standard\nway to get \n<a href=\"https://paulgraham.com/richnow.html\"><u>really rich</u></a>. If you look at the lists of the richest\npeople that occasionally get published in the press, nearly all of\nthem did it by starting their own companies.<br/><br/>Starting your own company can mean anything from starting a barber\nshop to starting Google. I'm here to talk about one extreme end of\nthat continuum. I'm going to tell you how to start Google.<br/><br/>The companies at the Google end of the continuum are called startups\nwhen they're young. The reason I know about them is that my wife\nJessica and I started something called Y Combinator that is basically\na startup factory. Since 2005, Y Combinator has funded over 4000\nstartups. So we know exactly what you need to start a startup,\nbecause we've helped people do it for the last 19 years.<br/><br/>You might have thought I was joking when I said I was going to tell\nyou how to start Google. You might be thinking \"How could <i>we</i>\nstart Google?\" But that's effectively what the people who did start\nGoogle were thinking before they started it. If you'd told Larry\nPage and Sergey Brin, the founders of Google, that the company they\nwere about to start would one day be worth over a trillion dollars,\ntheir heads would have exploded.<br/><br/>All you can know when you start working on a startup is that it\nseems worth pursuing. You can't know whether it will turn into\na company worth billions or one that goes out of business. So when I\nsay I'm going to tell you how to start Google, I mean I'm going to\ntell you how to get to the point where you can start a company that\nhas as much chance of being Google as Google had of being Google.\n<font color=\"#dddddd\">[<a href=\"https://paulgraham.com/google.html#f1n\"><font color=\"#dddddd\">1</font></a>]</font><br/><br/>How do you get from where you are now to the point where you can\nstart a successful startup? You need three things. You need to be\ngood at some kind of technology, you need an idea for what you're\ngoing to build, and you need cofounders to start the company with.<br/><br/>How do you get good at technology? And how do you choose which\ntechnology to get good at? Both of those questions turn out to have\nthe same answer: work on your own projects. Don't try to guess\nwhether gene editing or LLMs or rockets will turn out to be the\nmost valuable technology to know about. No one can predict that.\nJust work on whatever interests you the most. You'll work much\nharder on something you're interested in than something you're doing\nbecause you think you're supposed to.<br/><br/>If you're not sure what technology to get good at, get good at\nprogramming. That has been the source of the median startup for the\nlast 30 years, and this is probably not going to change in the next\n10.<br/><br/>Those of you who are taking computer science classes in school may\nat this point be thinking, ok, we've got this sorted. We're already\nbeing taught all about programming. But sorry, this is not enough.\nYou have to be working on your own projects, not just learning stuff\nin classes. You can do well in computer science classes without\never really learning to program. In fact you can graduate with a\ndegree in computer science from a top university and still not be\nany good at programming. That's why tech companies all make you\ntake a coding test before they'll hire you, regardless of where you\nwent to university or how well you did there. They know grades and\nexam results prove nothing.<br/><br/>If you really want to learn to program, you have to work on your\nown projects. You learn so much faster that way. Imagine you're\nwriting a game and there's something you want to do in it, and you\ndon't know how. You're going to figure out how a lot faster than\nyou'd learn anything in a class.<br/><br/>You don't have to learn programming, though. If you're wondering\nwhat counts as technology, it includes practically everything you\ncould describe using the words \"make\" or \"build.\" So welding would\ncount, or making clothes, or making videos. Whatever you're most\ninterested in. The critical distinction is whether you're producing\nor just consuming. Are you writing computer games, or just playing\nthem? That's the cutoff.<br/><br/>Steve Jobs, the founder of Apple, spent time when he was a teenager\nstudying calligraphy â€” the sort of beautiful writing that\nyou see in medieval manuscripts. No one, including him, thought\nthat this would help him in his career. He was just doing it because\nhe was interested in it. But it turned out to help him a lot. The\ncomputer that made Apple really big, the Macintosh, came out at\njust the moment when computers got powerful enough to make letters\nlike the ones in printed books instead of the computery-looking\nletters you see in 8 bit games. Apple destroyed everyone else at\nthis, and one reason was that Steve was one of the few people in\nthe computer business who really got graphic design.<br/><br/>Don't feel like your projects have to be <i>serious</i>. They can\nbe as frivolous as you like, so long as you're building things\nyou're excited about. Probably 90% of programmers start out building\ngames. They and their friends like to play games. So they build\nthe kind of things they and their friends want. And that's exactly\nwhat you should be doing at 15 if you want to start a startup one\nday.<br/><br/>You don't have to do just one project. In fact it's good to learn\nabout multiple things. Steve Jobs didn't just learn calligraphy.\nHe also learned about electronics, which was even more valuable.\nWhatever you're interested in. (Do you notice a theme here?)<br/><br/>So that's the first of the three things you need, to get good at\nsome kind or kinds of technology. You do it the same way you get\ngood at the violin or football: practice. If you start a startup\nat 22, and you start writing your own programs now, then by the\ntime you start the company you'll have spent at least 7 years\npracticing writing code, and you can get pretty good at anything\nafter practicing it for 7 years.<br/><br/>Let's suppose you're 22 and you've succeeded: You're now really\ngood at some technology. How do you get \n<a href=\"https://paulgraham.com/startupideas.html\"><u>startup ideas</u></a>? It might\nseem like that's the hard part. Even if you are a good programmer,\nhow do you get the idea to start Google?<br/><br/>Actually it's easy to get startup ideas once you're good at technology.\nOnce you're good at some technology, when you look at the world you\nsee dotted outlines around the things that are missing. You start\nto be able to see both the things that are missing from the technology\nitself, and all the broken things that could be fixed using it, and\neach one of these is a potential startup.<br/><br/>In the town near our house there's a shop with a sign warning that\nthe door is hard to close. The sign has been there for several\nyears. To the people in the shop it must seem like this mysterious\nnatural phenomenon that the door sticks, and all they can do is put\nup a sign warning customers about it. But any carpenter looking at\nthis situation would think \"why don't you just plane off the part\nthat sticks?\"<br/><br/>Once you're good at programming, all the missing software in the\nworld starts to become as obvious as a sticking door to a carpenter.\nI'll give you a real world example. Back in the 20th century,\nAmerican universities used to publish printed directories with all\nthe students' names and contact info. When I tell you what these\ndirectories were called, you'll know which startup I'm talking\nabout. They were called facebooks, because they usually had a picture\nof each student next to their name.<br/><br/>So Mark Zuckerberg shows up at Harvard in 2002, and the university\nstill hasn't gotten the facebook online. Each individual house has\nan online facebook, but there isn't one for the whole university.\nThe university administration has been diligently having meetings\nabout this, and will probably have solved the problem in another\ndecade or so. Most of the students don't consciously notice that\nanything is wrong. But Mark is a programmer. He looks at this\nsituation and thinks \"Well, this is stupid. I could write a program\nto fix this in one night. Just let people upload their own photos\nand then combine the data into a new site for the whole university.\"\nSo he does. And almost literally overnight he has thousands of\nusers.<br/><br/>Of course Facebook was not a startup yet. It was just a... project.\nThere's that word again. Projects aren't just the best way to learn\nabout technology. They're also the best source of startup ideas.<br/><br/>Facebook was not unusual in this respect. Apple and Google also\nbegan as projects. Apple wasn't meant to be a company. Steve Wozniak\njust wanted to build his own computer. It only turned into a company\nwhen Steve Jobs said \"Hey, I wonder if we could sell plans for this\ncomputer to other people.\" That's how Apple started. They weren't\neven selling computers, just plans for computers. Can you imagine\nhow lame this company seemed?<br/><br/>Ditto for Google. Larry and Sergey weren't trying to start a company\nat first. They were just trying to make search better. Before Google,\nmost search engines didn't try to sort the results they gave you\nin order of importance. If you searched for \"rugby\" they just gave\nyou every web page that contained the word \"rugby.\" And the web was\nso small in 1997 that this actually worked! Kind of. There might\nonly be 20 or 30 pages with the word \"rugby,\" but the web was growing\nexponentially, which meant this way of doing search was becoming\nexponentially more broken. Most users just thought, \"Wow, I sure\nhave to look through a lot of search results to find what I want.\"\nDoor sticks. But like Mark, Larry and Sergey were programmers. Like\nMark, they looked at this situation and thought \"Well, this is\nstupid. Some pages about rugby matter more than others. Let's figure\nout which those are and show them first.\"<br/><br/>It's obvious in retrospect that this was a great idea for a startup.\nIt wasn't obvious at the time. It's never obvious. If it was obviously\na good idea to start Apple or Google or Facebook, someone else would\nhave already done it. That's why the best startups grow out of\nprojects that aren't meant to be startups. You're not trying to\nstart a company. You're just following your instincts about what's\ninteresting. And if you're young and good at technology, then your\nunconscious instincts about what's interesting are better than your\nconscious ideas about what would be a good company.<br/><br/>So it's critical, if you're a young founder, to build things for\nyourself and your friends to use. The biggest mistake young founders\nmake is to build something for some mysterious group of other people.\nBut if you can make something that you and your friends truly want\nto use â€” something your friends aren't just using out of\nloyalty to you, but would be really sad to lose if you shut it down\nâ€” then you almost certainly have the germ of a good startup\nidea. It may not seem like a startup to you. It may not be obvious\nhow to make money from it. But trust me, there's a way.<br/><br/>What you need in a startup idea, and all you need, is something\nyour friends actually want. And those ideas aren't hard to see once\nyou're good at technology. There are sticking doors everywhere.\n<font color=\"#dddddd\">[<a href=\"https://paulgraham.com/google.html#f2n\"><font color=\"#dddddd\">2</font></a>]</font><br/><br/>Now for the third and final thing you need: a cofounder, or cofounders.\nThe optimal startup has two or three founders, so you need one or\ntwo cofounders. How do you find them? Can you predict what I'm going\nto say next? It's the same thing: projects. You find cofounders by\nworking on projects with them. What you need in a cofounder is\nsomeone who's good at what they do and that you work well with, and\nthe only way to judge this is to work with them on things.<br/><br/>At this point I'm going to tell you something you might not want\nto hear. It really matters to do well in your classes, even the\nones that are just memorization or blathering about literature,\nbecause you need to do well in your classes to get into a good\nuniversity. And if you want to start a startup you should try to\nget into the best university you can, because that's where the best\ncofounders are. It's also where the best employees are. When Larry\nand Sergey started Google, they began by just hiring all the smartest\npeople they knew out of Stanford, and this was a real advantage for\nthem.<br/><br/>The empirical evidence is clear on this. If you look at where the\nlargest numbers of successful startups come from, it's pretty much\nthe same as the list of the most selective universities.<br/><br/>I don't think it's the prestigious names of these universities that\ncause more good startups to come out of them. Nor do I think it's\nbecause the quality of the teaching is better. What's driving this\nis simply the difficulty of getting in. You have to be pretty smart\nand determined to get into MIT or Cambridge, so if you do manage\nto get in, you'll find the other students include a lot of smart\nand determined people.\n<font color=\"#dddddd\">[<a href=\"https://paulgraham.com/google.html#f3n\"><font color=\"#dddddd\">3</font></a>]</font><br/><br/>You don't have to start a startup with someone you meet at university.\nThe founders of Twitch met when they were seven. The founders of\nStripe, Patrick and John Collison, met when John was born. But\nuniversities are the main source of cofounders. And because they're\nwhere the cofounders are, they're also where the ideas are, because\nthe best ideas grow out of projects you do with the people who\nbecome your cofounders.<br/><br/>So the list of what you need to do to get from here to starting a\nstartup is quite short. You need to get good at technology, and the\nway to do that is to work on your own projects. And you need to do\nas well in school as you can, so you can get into a good university,\nbecause that's where the cofounders and the ideas are.<br/><br/>That's it, just two things, build stuff and do well in school.<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><b>Notes</b><br/><br/>[<a name=\"f1n\"><font color=\"#000000\">1</font></a>]\nThe rhetorical trick in this sentence is that the \"Google\"s\nrefer to different things. What I mean is: a company that has as\nmuch chance of growing as big as Google ultimately did as Larry and\nSergey could have reasonably expected Google itself would at the\ntime they started it. But I think the original version is zippier.<br/><br/>[<a name=\"f2n\"><font color=\"#000000\">2</font></a>]\nMaking something for your friends isn't the only source of\nstartup ideas. It's just the best source for young founders, who\nhave the least knowledge of what other people want, and whose own\nwants are most predictive of future demand.<br/><br/>[<a name=\"f3n\"><font color=\"#000000\">3</font></a>]\nStrangely enough this is particularly true in countries like\nthe US where undergraduate admissions are done badly. US admissions\ndepartments make applicants jump through a lot of arbitrary hoops\nthat have little to do with their intellectual ability. But the\nmore arbitrary a test, the more it becomes a test of mere determination\nand resourcefulness. And those are the two most important qualities\nin startup founders. So US admissions departments are better at\nselecting founders than they would be if they were better at selecting\nstudents.<br/><br/><br/><br/><font color=\"888888\"><b>Thanks</b> to Jared Friedman, Carolynn Levy, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.</font><br/><br/></font>","date":"2024-03-01T00:00:00Z"}
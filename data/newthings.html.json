{"href":"newthings.html","title":"Six Principles for Making New Things","content":"<font face=\"verdana\" size=\"2\">February 2008<br/><br/>The fiery reaction to the release of <a href=\"arc.html\">Arc</a> had\nan unexpected consequence: it made me realize I had a design\nphilosophy.  The main complaint of the more articulate critics was\nthat Arc seemed so flimsy. After years of working on it, all I had\nto show for myself were a few thousand lines of macros?  Why hadn't\nI worked on more substantial problems?<br/><br/>As I was mulling over these remarks it struck me how familiar they\nseemed.  This was exactly the kind of thing people said at first\nabout Viaweb, and Y Combinator, and most of my essays.<br/><br/>When we launched Viaweb, it seemed laughable to VCs and e-commerce\n\"experts.\"  We were just a couple guys in an apartment,\nwhich did not seem cool in 1995 the way it does now.  And the thing\nwe'd built, as far as they could tell, wasn't even software.\nSoftware, to them, equalled big, honking Windows apps.  Since Viaweb\nwas the first <xa href=\"road.html\">web-based app \nthey'd seen, it seemed to be nothing\nmore than a website.  They were even more contemptuous when they\ndiscovered that Viaweb didn't process credit card transactions (we\ndidn't for the whole first year).  Transaction processing seemed\nto them what e-commerce was all about.  It sounded serious and\ndifficult.<br/><br/>And yet, mysteriously, Viaweb ended up crushing all its competitors.<br/><br/>The initial reaction to \n<a href=\"http://ycombinator.com\">Y Combinator</a> was almost identical.  It\nseemed laughably lightweight.  Startup funding meant series A rounds:\nmillions of dollars given to a small number of startups founded by\npeople with established credentials after months of serious,\nbusinesslike meetings, on terms described in a document a foot\nthick.  Y Combinator seemed inconsequential.  It's too early to say\nyet whether Y Combinator will turn out like Viaweb, but judging\nfrom the number of imitations, a lot of people seem to think we're\non to something.<br/><br/>I can't measure whether my essays are successful, except in page\nviews, but the reaction to them is at least different from when I\nstarted.  At first the default reaction of the Slashdot trolls was\n(translated into articulate terms): \"Who is this guy and what\nauthority does he have to write about these topics?  I haven't read\nthe essay, but there's no way anything so short and written in such\nan informal style could have anything useful to say about such and\nsuch topic, when people with degrees in the subject have already\nwritten many thick books about it.\" Now there's a new generation\nof trolls on a new generation of sites, but they have at least\nstarted to omit the initial \"Who is this guy?\"<br/><br/>Now people are saying the same things about Arc that they said at\nfirst about Viaweb and Y Combinator and most of my essays.  Why the\npattern?  The answer, I realized, is that my m.o. for all four has\nbeen the same.<br/><br/>Here it is: I like to find (a) simple solutions (b) to overlooked\nproblems (c) that actually need to be solved, and (d) deliver them\nas informally as possible, (e) starting with a very crude version\n1, then (f) iterating rapidly.<br/><br/>When I first laid out these principles explicitly, I noticed something\nstriking: this is practically a recipe for generating a contemptuous\ninitial reaction.  Though simple solutions are better, they don't\nseem as impressive as complex ones.  Overlooked problems are by\ndefinition problems that most people think don't matter.  Delivering\nsolutions in an informal way means that instead of judging something\nby the way it's presented, people have to actually understand it,\nwhich is more work.  And starting with a crude version 1 means your\ninitial effort is always small and incomplete.<br/><br/>I'd noticed, of course, that people never seemed to grasp new ideas\nat first.  I thought it was just because most people were stupid.\nNow I see there's more to it than that.  <!-- This particular m.o. is\npractically tuned to hit everyday stupidity square on. --> Like a\ncontrarian investment fund, someone following this strategy will\nalmost always be doing things that seem wrong to the average person.<br/><br/>As with contrarian investment strategies, that's exactly the point.\nThis technique is successful (in the long term) because it gives you\nall the advantages other people forgo by trying to seem legit.  If\nyou work on overlooked problems, you're more likely to discover new\nthings, because you have less competition.  If you deliver solutions\ninformally, you (a) save all the effort you would have had to expend\nto make them look impressive, and (b) avoid the danger of fooling\nyourself as well as your audience.  And if you release a crude\nversion 1 then iterate, your solution can benefit from the imagination\nof nature, which, as Feynman pointed out, is more powerful than\nyour own.<br/><br/>In the case of Viaweb, the simple solution was to make the software\nrun on the server.  The overlooked problem was to generate web sites\nautomatically; in 1995, online stores were all made by hand by human\ndesigners, but we knew this wouldn't scale.  The part that actually\nmattered was graphic design, not transaction processing.\nThe informal delivery mechanism was me, showing up in jeans and a\nt-shirt at some retailer's office.  And the crude version 1 was,\nif I remember correctly, less than 10,000 lines of code when we\nlaunched.<br/><br/>The power of this technique extends beyond startups and programming\nlanguages and essays.  It probably extends to any kind of creative\nwork.  Certainly it can be used in painting: this is exactly \nwhat Cezanne and Klee did.<br/><br/>At Y Combinator we bet money on it, in the sense that we encourage\nthe startups we fund to work this way. There are always new ideas\nright under your nose.  So look for simple things that other people\nhave overlooked—things people will later claim were \n\"obvious\"—especially when they've been led astray by obsolete \nconventions,\nor by trying to do things that are superficially impressive.  Figure\nout what the real problem is, and make sure you solve that.  Don't\nworry about trying to look corporate; the product is what wins in\nthe long term.  And launch as soon as you can, so you start learning\nfrom users what you should have been making.<br/><br/><a href=\"http://reddit.com\">Reddit</a> is a classic example of \nthis approach.  When Reddit first\nlaunched, it seemed like there was nothing to it.  To the graphically\nunsophisticated its deliberately minimal design seemed like no\ndesign at all.  But Reddit solved the real problem, which was to\ntell people what was new and otherwise stay out of the way.  As a\nresult it became massively successful.  Now that conventional ideas\nhave caught up with it, it seems obvious.  People look at Reddit\nand think the founders were lucky.  Like all such things, it was\nharder than it looked.  The Reddits pushed so hard against the\ncurrent that they reversed it; now it looks like they're merely\nfloating downstream.<br/><br/>So when you look at something like Reddit and think \"I wish I could\nthink of an idea like that,\" remember: ideas like that are all\naround you.  But you ignore them because they look wrong.<br/><br/><br clear=\"all\"/></xa></font>","date":"2008-02-01T00:00:00Z"}
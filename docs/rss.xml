<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Paul Graham's Essays</title>
    <link>https://enigma.github.io/pgrss/rss.xml</link>
    <description>Paul Graham's Essays</description>
    <atom:link href="https://enigma.github.io/pgrss/rss.xml" rel="self" type="application/rss+xml"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>en</language>
    <lastBuildDate>Sun, 25 May 2025 00:36:08 +0000</lastBuildDate>
    <item>
      <title>Beating the Averages</title>
      <link>https://paulgraham.com//avg.html</link>
      <description>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
April 2001, rev. April 2003&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This article is derived from a talk given at the 2&lt;/i&gt;&lt;/p&gt;&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
April 2001, rev. April 2003&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This article is derived from a talk given at the 2001 Franz
Developer Symposium.)
&lt;/i&gt;&lt;br&gt;&lt;br/&gt;In the summer of 1995, my friend Robert Morris and I
started a startup called 
&lt;a href="http://docs.yahoo.com/docs/pr/release184.html"&gt;Viaweb&lt;/a&gt;.  
Our plan was to write
software that would let end users build online stores.
What was novel about this software, at the time, was
that it ran on our server, using ordinary Web pages
as the interface.&lt;br/&gt;&lt;br/&gt;A lot of people could have been having this idea at the
same time, of course, but as far as I know, Viaweb was
the first Web-based application.  It seemed such
a novel idea to us that we named the company after it:
Viaweb, because our software worked via the Web,
instead of running on your desktop computer.&lt;br/&gt;&lt;br/&gt;Another unusual thing about this software was that it
was written primarily in a programming language called
Lisp. It was one of the first big end-user
applications to be written in Lisp, which up till then
had been used mostly in universities and research labs. [1]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;The Secret Weapon&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Eric Raymond has written an essay called "How to Become a Hacker,"
and in it, among other things, he tells would-be hackers what
languages they should learn.  He suggests starting with Python and
Java, because they are easy to learn.  The serious hacker will also
want to learn C, in order to hack Unix, and Perl for system
administration and cgi scripts.  Finally, the truly serious hacker
should consider learning Lisp:
&lt;blockquote&gt;
  Lisp is worth learning for the profound enlightenment experience
  you will have when you finally get it; that experience will make
  you a better programmer for the rest of your days, even if you
  never actually use Lisp itself a lot.
&lt;/blockquote&gt;
This is the same argument you tend to hear for learning Latin.  It
won't get you a job, except perhaps as a classics professor, but
it will improve your mind, and make you a better writer in languages
you do want to use, like English.&lt;br/&gt;&lt;br/&gt;But wait a minute.  This metaphor doesn't stretch that far.  The
reason Latin won't get you a job is that no one speaks it.  If you
write in Latin, no one can understand you.  But Lisp is a computer
language, and computers speak whatever language you, the programmer,
tell them to.&lt;br/&gt;&lt;br/&gt;So if Lisp makes you a better programmer, like he says, why wouldn't
you want to use it? If a painter were offered a brush that would
make him a better painter, it seems to me that he would want to
use it in all his paintings, wouldn't he? I'm not trying to make
fun of Eric Raymond here.  On the whole, his advice is good.  What
he says about Lisp is pretty much the conventional wisdom.  But
there is a contradiction in the conventional wisdom:  Lisp will
make you a better programmer, and yet you won't use it.&lt;br/&gt;&lt;br/&gt;Why not?  Programming languages are just tools, after all.  If Lisp
really does yield better programs, you should use it.  And if it
doesn't, then who needs it?&lt;br/&gt;&lt;br/&gt;This is not just a theoretical question.  Software is a very
competitive business, prone to natural monopolies.  A company that
gets software written faster and better will, all other things
being equal, put its competitors out of business.  And when you're
starting a startup, you feel this very keenly.  Startups tend to
be an all or nothing proposition.  You either get rich, or you get
nothing.  In a startup, if you bet on the wrong technology, your
competitors will crush you.&lt;br/&gt;&lt;br/&gt;Robert and I both knew Lisp well, and we couldn't see any reason
not to trust our instincts and go with Lisp.  We knew that everyone
else was writing their software in C++ or Perl.  But we also knew
that that didn't mean anything.  If you chose technology that way,
you'd be running Windows.  When you choose technology, you have to
ignore what other people are doing, and consider only what will
work the best.&lt;br/&gt;&lt;br/&gt;This is especially true in a startup.  In a big company, you can
do what all the other big companies are doing.  But a startup can't
do what all the other startups do.  I don't think a lot of people
realize this, even in startups.&lt;br/&gt;&lt;br/&gt;The average big company grows at about ten percent a year.  So if
you're running a big company and you do everything the way the
average big company does it, you can expect to do as well as the
average big company-- that is, to grow about ten percent a year.&lt;br/&gt;&lt;br/&gt;The same thing will happen if you're running a startup, of course.
If you do everything the way the average startup does it, you should
expect average performance.  The problem here is, average performance
means that you'll go out of business.  The survival rate for startups
is way less than fifty percent.  So if you're running a startup,
you had better be doing something odd.  If not, you're in trouble.&lt;br/&gt;&lt;br/&gt;Back in 1995, we knew something that I don't think our competitors
understood, and few understand even now:  when you're writing
software that only has to run on your own servers, you can use
any language you want.  When you're writing desktop software,
there's a strong bias toward writing applications in the same
language as the operating system.  Ten years ago, writing applications
meant writing applications in C.  But with Web-based software,
especially when you have the source code of both the language and
the operating system, you can use whatever language you want.&lt;br/&gt;&lt;br/&gt;This new freedom is a double-edged sword, however.  Now that you
can use any language, you have to think about which one to use.
Companies that try to pretend nothing has changed risk finding that
their competitors do not.&lt;br/&gt;&lt;br/&gt;If you can use any language, which do you use?  We chose Lisp.
For one thing, it was obvious that rapid development would be
important in this market.  We were all starting from scratch, so
a company that could get new features done before its competitors
would have a big advantage.  We knew Lisp was a really good language
for writing software quickly, and server-based applications magnify
the effect of rapid development, because you can release software
the minute it's done.&lt;br/&gt;&lt;br/&gt;If other companies didn't want to use Lisp, so much the better.
It might give us a technological edge, and we needed all the help
we could get.  When we started Viaweb, we had no experience in
business.  We didn't know anything about marketing, or hiring
people, or raising money, or getting customers.  Neither of us had
ever even had what you would call a real job.  The only thing we
were good at was writing software.  We hoped that would save us.
Any advantage we could get in the software department, we would
take.&lt;br/&gt;&lt;br/&gt;So you could say that using Lisp was an experiment.  Our hypothesis
was that if we wrote our software in Lisp, we'd be able to get
features done faster than our competitors, and also to do things
in our software that they couldn't do.  And because Lisp was so
high-level, we wouldn't need a big development team, so our costs
would be lower.  If this were so, we could offer a better product
for less money, and still make a profit.  We would end up getting
all the users, and our competitors would get none, and eventually
go out of business.  That was what we hoped would happen, anyway.&lt;br/&gt;&lt;br/&gt;What were the results of this experiment?  Somewhat surprisingly,
it worked.  We eventually had many competitors, on the order of
twenty to thirty of them, but none of their software could compete
with ours.  We had a wysiwyg online store builder that ran on the
server and yet felt like a desktop application.  Our competitors
had cgi scripts.  And we were always far ahead of them in features.
Sometimes, in desperation, competitors would try to introduce
features that we didn't have.  But with Lisp our development cycle
was so fast that we could sometimes duplicate a new feature within
a day or two of a competitor announcing it in a press release.  By
the time journalists covering the press release got round to calling
us, we would have the new feature too.&lt;br/&gt;&lt;br/&gt;It must have seemed to our competitors that we had some kind of
secret weapon-- that we were decoding their Enigma traffic or
something.  In fact we did have a secret weapon, but it was simpler
than they realized.  No one was leaking news of their features to
us.   We were just able to develop software faster than anyone
thought possible.&lt;br/&gt;&lt;br/&gt;When I was about nine I happened to get hold of a copy of &lt;i&gt;The Day
of the Jackal,&lt;/i&gt; by Frederick Forsyth.  The main character is an
assassin who is hired to kill the president of France.  The assassin
has to get past the police to get up to an apartment that overlooks
the president's route.  He walks right by them, dressed up as an
old man on crutches, and they never suspect him.&lt;br/&gt;&lt;br/&gt;Our secret weapon was similar.  We wrote our software in a weird
AI language, with a bizarre syntax full of parentheses.  For years
it had annoyed me to hear Lisp described that way.  But now it
worked to our advantage.  In business, there is nothing more valuable
than a technical advantage your competitors don't understand.  In
business, as in war, surprise is worth as much as force.&lt;br/&gt;&lt;br/&gt;And so, I'm a little embarrassed to say, I never said anything
publicly about Lisp while we were working on Viaweb.  We never
mentioned it to the press, and if you searched for Lisp on our Web
site, all you'd find were the titles of two books in my bio.  This
was no accident.  A startup should give its competitors as little
information as possible.  If they didn't know what language our
software was written in, or didn't care, I wanted to keep it that
way.[2]&lt;br/&gt;&lt;br/&gt;The people who understood our technology best were the customers.
They didn't care what language Viaweb was written in either, but
they noticed that it worked really well.  It let them build great
looking online stores literally in minutes.  And so, by word of
mouth mostly, we got more and more users.  By the end of 1996 we
had about 70 stores online.  At the end of 1997 we had 500.  Six
months later, when Yahoo bought us, we had 1070 users.  Today, as
Yahoo Store, this software continues to dominate its market.  It's
one of the more profitable pieces of Yahoo, and the stores built
with it are the foundation of Yahoo Shopping.  I left Yahoo in
1999, so I don't know exactly how many users they have now, but
the last I heard there were about 20,000.&lt;br/&gt;&lt;br/&gt;&lt;!-- People sometimes ask me if Yahoo Store still uses Lisp.  Yes, all
the Lisp code is still there.  Yahoo has server-side software
written in all five of the languages Eric Raymond recommends to
hackers.
--&gt;
&lt;b&gt;The Blub Paradox&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;What's so great about Lisp?  And if Lisp is so great, why doesn't
everyone use it?  These sound like rhetorical questions, but actually
they have straightforward answers.  Lisp is so great not because
of some magic quality visible only to devotees, but because it is
simply the most powerful language available.  And the reason everyone
doesn't use it is that programming languages are not merely
technologies, but habits of mind as well, and nothing changes
slower.  Of course, both these answers need explaining.&lt;br/&gt;&lt;br/&gt;I'll begin with a shockingly controversial statement:  programming
languages vary in power.&lt;br/&gt;&lt;br/&gt;Few would dispute, at least, that high level languages are more
powerful than machine language.  Most programmers today would agree
that you do not, ordinarily, want to program in machine language.
Instead, you should program in a high-level language, and have a
compiler translate it into machine language for you.  This idea is
even built into the hardware now: since the 1980s, instruction sets
have been designed for compilers rather than human programmers.&lt;br/&gt;&lt;br/&gt;Everyone knows it's a mistake to write your whole program by hand
in machine language.  What's less often understood is that there
is a more general principle here: that if you have a choice of
several languages, it is, all other things being equal, a mistake
to program in anything but the most powerful one. [3]&lt;br/&gt;&lt;br/&gt;There are many exceptions to this rule.  If you're writing a program
that has to work very closely with a program written in a certain
language, it might be a good idea to write the new program in the
same language.  If you're writing a program that only has to do
something very simple, like number crunching or bit manipulation,
you may as well use a less abstract language, especially since it
may be slightly faster.  And if you're writing a short, throwaway
program, you may be better off just using whatever language has
the best library functions for the task.  But in general, for
application software, you want to be using the most powerful
(reasonably efficient) language you can get, and using anything
else is a mistake, of exactly the same kind, though possibly in a
lesser degree, as programming in machine language.&lt;br/&gt;&lt;br/&gt;You can see that machine language is very low level.  But, at least
as a kind of social convention, high-level languages are often all
treated as equivalent.  They're not.  Technically the term "high-level
language" doesn't mean anything very definite.  There's no dividing
line with machine languages on one side and all the high-level
languages on the other.  Languages fall along a continuum [4] of
abstractness, from the most powerful all the way down to machine
languages, which themselves vary in power.&lt;br/&gt;&lt;br/&gt;Consider Cobol.  Cobol is a high-level language, in the sense that
it gets compiled into machine language.  Would anyone seriously
argue that Cobol is equivalent in power to, say, Python?  It's
probably closer to machine language than Python.&lt;br/&gt;&lt;br/&gt;Or how about Perl 4?  Between Perl 4 and Perl 5, lexical closures
got added to the language.  Most Perl hackers would agree that Perl
5 is more powerful than Perl 4.  But once you've admitted that,
you've admitted that one high level language can be more powerful
than another.  And it follows inexorably that, except in special
cases, you ought to use the most powerful you can get.&lt;br/&gt;&lt;br/&gt;This idea is rarely followed to its conclusion, though.  After a
certain age, programmers rarely switch languages voluntarily.
Whatever language people happen to be used to, they tend to consider
just good enough.&lt;br/&gt;&lt;br/&gt;Programmers get very attached to their favorite languages, and I
don't want to hurt anyone's feelings, so to explain this point I'm
going to use a hypothetical language called Blub.  Blub falls right
in the middle of the abstractness continuum.  It is not the most
powerful language, but it is more powerful than Cobol or machine
language.&lt;br/&gt;&lt;br/&gt;And in fact, our hypothetical Blub programmer wouldn't use either
of them.  Of course he wouldn't program in machine language.  That's
what compilers are for.  And as for Cobol, he doesn't know how
anyone can get anything done with it.  It doesn't even have x (Blub
feature of your choice).&lt;br/&gt;&lt;br/&gt;As long as our hypothetical Blub programmer is looking down the
power continuum, he knows he's looking down.  Languages less powerful
than Blub are obviously less powerful, because they're missing some
feature he's used to.  But when our hypothetical Blub programmer
looks in the other direction, up the power continuum, he doesn't
realize he's looking up.  What he sees are merely weird languages.
He probably considers them about equivalent in power to Blub, but
with all this other hairy stuff thrown in as well.  Blub is good
enough for him, because he thinks in Blub.&lt;br/&gt;&lt;br/&gt;When we switch to the point of view of a programmer using any of
the languages higher up the power continuum, however, we find that
he in turn looks down upon Blub.  How can you get anything done in
Blub? It doesn't even have y.&lt;br/&gt;&lt;br/&gt;By induction, the only programmers in a position to see all the
differences in power between the various languages are those who
understand the most powerful one.  (This is probably what Eric
Raymond meant about Lisp making you a better programmer.) You can't
trust the opinions of the others, because of the Blub paradox:
they're satisfied with whatever language they happen to use, because
it dictates the way they think about programs.&lt;br/&gt;&lt;br/&gt;I know this from my own experience, as a high school kid writing
programs in Basic.  That language didn't even support recursion.
It's hard to imagine writing programs without using recursion, but
I didn't miss it at the time.  I thought in Basic.  And I was a
whiz at it.  Master of all I surveyed.&lt;br/&gt;&lt;br/&gt;The five languages that Eric Raymond recommends to hackers fall at
various points on the power continuum.  Where they fall relative
to one another is a sensitive topic.  What I will say is that I
think Lisp is at the top.  And to support this claim I'll tell you
about one of the things I find missing when I look at the other
four languages.  How can you get anything done in them, I think,
without macros? [5]&lt;br/&gt;&lt;br/&gt;Many languages have something called a macro.  But Lisp macros are
unique.  And believe it or not, what they do is related to the
parentheses.  The designers of Lisp didn't put all those parentheses
in the language just to be different.  To the Blub programmer, Lisp
code looks weird.  But those parentheses are there for a reason.
They are the outward evidence of a fundamental difference between
Lisp and other languages.&lt;br/&gt;&lt;br/&gt;Lisp code is made out of Lisp data objects.  And not in the trivial
sense that the source files contain characters, and strings are
one of the data types supported by the language.  Lisp code, after
it's read by the parser, is made of data structures that you can
traverse.&lt;br/&gt;&lt;br/&gt;If you understand how compilers work, what's really going on is
not so much that Lisp has a strange syntax as that Lisp has no
syntax.  You write programs in the parse trees that get generated
within the compiler when other languages are parsed.  But these
parse trees are fully accessible to your programs.  You can write
programs that manipulate them.  In Lisp, these programs are called
macros.  They are programs that write programs.&lt;br/&gt;&lt;br/&gt;Programs that write programs?  When would you ever want to do that?
Not very often, if you think in Cobol.  All the time, if you think
in Lisp.  It would be convenient here if I could give an example
of a powerful macro, and say there! how about that?  But if I did,
it would just look like gibberish to someone who didn't know Lisp;
there isn't room here to explain everything you'd need to know to
understand what it meant.  In 
&lt;a href="https://paulgraham.com/acl.html"&gt;Ansi Common Lisp&lt;/a&gt; I tried to move
things along as fast as I could, and even so I didn't get to macros
until page 160.&lt;br/&gt;&lt;br/&gt;But I think I can give a kind of argument that might be convincing.
The source code of the Viaweb editor was probably about 20-25%
macros.  Macros are harder to write than ordinary Lisp functions,
and it's considered to be bad style to use them when they're not
necessary.  So every macro in that code is there because it has to
be.  What that means is that at least 20-25% of the code in this
program is doing things that you can't easily do in any other
language.  However skeptical the Blub programmer might be about my
claims for the mysterious powers of Lisp, this ought to make him
curious.  We weren't writing this code for our own amusement.  We
were a tiny startup, programming as hard as we could in order to
put technical barriers between us and our competitors.&lt;br/&gt;&lt;br/&gt;A suspicious person might begin to wonder if there was some
correlation here.  A big chunk of our code was doing things that
are very hard to do in other languages.  The resulting software
did things our competitors' software couldn't do.  Maybe there was
some kind of connection.  I encourage you to follow that thread.
There may be more to that old man hobbling along on his crutches
than meets the eye.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Aikido for Startups&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;But I don't expect to convince anyone 
(&lt;a href="http://www.trollope.org/scheme.html"&gt;over 25&lt;/a&gt;) 
to go out and learn
Lisp.  The purpose of this article is not to change anyone's mind,
but to reassure people already interested in using Lisp-- people
who know that Lisp is a powerful language, but worry because it
isn't widely used.  In a competitive situation, that's an advantage.
Lisp's power is multiplied by the fact that your competitors don't
get it.&lt;br/&gt;&lt;br/&gt;If you think of using Lisp in a startup, you shouldn't worry that
it isn't widely understood.  You should hope that it stays that
way. And it's likely to.  It's the nature of programming languages
to make most people satisfied with whatever they currently use.
Computer hardware changes so much faster than personal habits that
programming practice is usually ten to twenty years behind the
processor.  At places like MIT they were writing programs in
high-level languages in the early 1960s, but many companies continued
to write code in machine language well into the 1980s.  I bet a
lot of people continued to write machine language until the processor,
like a bartender eager to close up and go home, finally kicked them
out by switching to a risc instruction set.&lt;br/&gt;&lt;br/&gt;Ordinarily technology changes fast.  But programming languages are
different: programming languages are not just technology, but what
programmers think in.  They're half technology and half religion.[6]
And so the median language, meaning whatever language the median
programmer uses, moves as slow as an iceberg.  Garbage collection,
introduced by Lisp in about 1960, is now widely considered to be
a good thing.  Runtime typing, ditto, is growing in popularity.
Lexical closures, introduced by Lisp in the early 1970s, are now,
just barely, on the radar screen.  Macros, introduced by Lisp in the
mid 1960s, are still terra incognita.&lt;br/&gt;&lt;br/&gt;Obviously, the median language has enormous momentum.  I'm not
proposing that you can fight this powerful force.  What I'm proposing
is exactly the opposite: that, like a practitioner of Aikido, you
can use it against your opponents.&lt;br/&gt;&lt;br/&gt;If you work for a big company, this may not be easy.  You will have
a hard time convincing the pointy-haired boss to let you build
things in Lisp, when he has just read in the paper that some other
language is poised, like Ada was twenty years ago, to take over
the world.  But if you work for a startup that doesn't have
pointy-haired bosses yet, you can, like we did, turn the Blub
paradox to your advantage:  you can use technology that your
competitors, glued immovably to the median language, will never be
able to match.&lt;br/&gt;&lt;br/&gt;If you ever do find yourself working for a startup, here's a handy
tip for evaluating competitors.  Read their job listings.  Everything
else on their site may be stock photos or the prose equivalent,
but the job listings have to be specific about what they want, or
they'll get the wrong candidates.&lt;br/&gt;&lt;br/&gt;During the years we worked on Viaweb I read a lot of job descriptions.
A new competitor seemed to emerge out of the woodwork every month
or so.  The first thing I would do, after checking to see if they
had a live online demo, was look at their job listings.  After a
couple years of this I could tell which companies to worry about
and which not to.  The more of an IT flavor the job descriptions
had, the less dangerous the company was.  The safest kind were the
ones that wanted Oracle experience.  You never had to worry about
those.  You were also safe if they said they wanted C++ or Java
developers.  If they wanted Perl or Python programmers, that would
be a bit frightening-- that's starting to sound like a company
where the technical side, at least, is run by real hackers.  If I
had ever seen a job posting looking for Lisp hackers, I would have
been really worried.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[1] Viaweb at first had two parts: the editor, written in Lisp,
which people used to build their sites, and the ordering system,
written in C, which handled orders.  The first version was mostly
Lisp, because the ordering system was small.  Later we added two
more modules, an image generator written in C, and a back-office
manager written mostly in Perl.&lt;br/&gt;&lt;br/&gt;In January 2003, Yahoo released a new version of the editor 
written in C++ and Perl.  It's hard to say whether the program is no
longer written in Lisp, though, because to translate this program
into C++ they literally had to write a Lisp interpreter: the source
files of all the page-generating templates are still, as far as I
know,  Lisp code.  (See &lt;a href="https://paulgraham.com/quotes.html"&gt;Greenspun's Tenth Rule&lt;/a&gt;.)&lt;br/&gt;&lt;br/&gt;[2] Robert Morris says that I didn't need to be secretive, because
even if our competitors had known we were using Lisp, they wouldn't
have understood why:  "If they were that smart they'd already be
programming in Lisp."&lt;br/&gt;&lt;br/&gt;[3] All languages are equally powerful in the sense of being Turing
equivalent, but that's not the sense of the word programmers care
about. (No one wants to program a Turing machine.)  The kind of
power programmers care about may not be formally definable, but
one way to explain it would be to say that it refers to features
you could only get in the less powerful language by writing an
interpreter for the more powerful language in it. If language A
has an operator for removing spaces from strings and language B
doesn't, that probably doesn't make A more powerful, because you
can probably write a subroutine to do it in B.  But if A supports,
say, recursion, and B doesn't, that's not likely to be something
you can fix by writing library functions.&lt;br/&gt;&lt;br/&gt;[4] Note to nerds: or possibly a lattice, narrowing toward the top;
it's not the shape that matters here but the idea that there is at
least a partial order.&lt;br/&gt;&lt;br/&gt;[5] It is a bit misleading to treat macros as a separate feature.
In practice their usefulness is greatly enhanced by other Lisp
features like lexical closures and rest parameters.&lt;br/&gt;&lt;br/&gt;[6] As a result, comparisons of programming languages either take
the form of religious wars or undergraduate textbooks so determinedly
neutral that they're really works of anthropology.  People who
value their peace, or want tenure, avoid the topic.  But the question
is only half a religious one; there is something there worth
studying, especially if you want to design new languages.&lt;br/&gt;&lt;br/&gt;&lt;/br&gt;&lt;/p&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//avg.html</guid>
      <pubDate>Sun, 01 Apr 2001 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Filters that Fight Back</title>
      <link>https://paulgraham.com//ffb.html</link>
      <description>&lt;font face="verdana" size="2"&gt;August 2003&lt;br/&gt;&lt;br/&gt;&lt;!-- &lt;i&gt;(Originally this essay began with a discussion of filtering.
An expanded version of that discussion now exists on its own as
&lt;a href="sofar.html"&gt;So Far, So Good&lt;/a&gt;.)&lt;/i&gt;
--&gt;
We may be able to improve the accuracy of Bayesian spam filters
by having them follow links to see what's
waiting at the other end.  Richard Jowsey of
&lt;a href="http://death2spam.com"&gt;death2spam&lt;/a&gt; now does
this in borderline cases, and reports that it works well.&amp;lt;&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;August 2003&lt;br/&gt;&lt;br/&gt;&lt;!-- &lt;i&gt;(Originally this essay began with a discussion of filtering.
An expanded version of that discussion now exists on its own as
&lt;a href="sofar.html"&gt;So Far, So Good&lt;/a&gt;.)&lt;/i&gt;
--&gt;
We may be able to improve the accuracy of Bayesian spam filters
by having them follow links to see what's
waiting at the other end.  Richard Jowsey of
&lt;a href="http://death2spam.com"&gt;death2spam&lt;/a&gt; now does
this in borderline cases, and reports that it works well.&lt;br/&gt;&lt;br/&gt;Why only do it in borderline cases?  And why only do it once?&lt;br/&gt;&lt;br/&gt;As I mentioned in &lt;a href="https://paulgraham.com/wfks.html"&gt;Will Filters Kill Spam?&lt;/a&gt;,
following all the urls in
a spam would have an amusing side-effect.  If popular email clients
did this in order to filter spam, the spammer's servers
would take a serious pounding.  The more I think about this,
the better an idea it seems.  This isn't just amusing; it
would be hard to imagine a more perfectly targeted counterattack
on spammers.&lt;br/&gt;&lt;br/&gt;So I'd like to suggest an additional feature to those
working on spam filters: a "punish" mode which,
if turned on, would spider every url
in a suspected spam n times, where n could be set by the user. [1]&lt;br/&gt;&lt;br/&gt;As many people have noted, one of the problems with the
current email system is that it's too passive.  It does
whatever you tell it.  So far all the suggestions for fixing
the problem seem to involve new protocols.  This one  
wouldn't.&lt;br/&gt;&lt;br/&gt;If widely used, auto-retrieving spam filters would make
the email system &lt;i&gt;rebound.&lt;/i&gt;  The huge volume of the
spam, which has so far worked in the spammer's favor,
would now work against him, like a branch snapping back in   
his face.   Auto-retrieving spam filters would drive the
spammer's 
&lt;a href="http://www.bork.ca/pics/?path=incoming&amp;amp;img=bill.jpg"&gt;costs&lt;/a&gt; up, 
and his sales down:  his bandwidth usage
would go through the roof, and his servers would grind to a
halt under the load, which would make them unavailable
to the people who would have responded to the spam.&lt;br/&gt;&lt;br/&gt;Pump out a million emails an hour, get a
million hits an hour on your servers.&lt;br/&gt;&lt;br/&gt;&lt;!--Of course, if any of the urls
are "web bugs" they'll suggest to the spammer that
the mail got opened, and may result in more spam.  (However,
they'll also tend to make "open rates" meaningless, thus
depriving the spammer of valuable information.)
And of course, some links will be unsubscribe links.  The
net effect might be less spam.
--&gt;
We would want to ensure that this is only done to
suspected spams.  As a rule, any url sent to millions of
people is likely to be a spam url, so submitting every http
request in every email would work fine nearly all the time.
But there are a few cases where this isn't true: the urls
at the bottom of mails sent from free email services like
Yahoo Mail and Hotmail, for example.&lt;br/&gt;&lt;br/&gt;To protect such sites, and to prevent abuse, auto-retrieval
should be combined with blacklists of spamvertised sites.
Only sites on a blacklist would get crawled, and
sites would be blacklisted
only after being inspected by humans. The lifetime of a spam
must be several hours at least, so
it should be easy to update such a list in time to
interfere with a spam promoting a new site. [2]&lt;br/&gt;&lt;br/&gt;High-volume auto-retrieval would only be practical for users
on high-bandwidth
connections, but there are enough of those to cause spammers
serious trouble.   Indeed, this solution neatly
mirrors the problem.  The problem with spam is that in
order to reach a few gullible people the spammer sends 
mail to everyone.  The non-gullible recipients
are merely collateral damage.  But the non-gullible majority
won't stop getting spam until they can stop (or threaten to
stop) the gullible
from responding to it.  Auto-retrieving spam filters offer
them a way to do this.&lt;br/&gt;&lt;br/&gt;Would that kill spam?  Not quite.  The biggest spammers
could probably protect their servers against auto-retrieving 
filters.  However, the easiest and cheapest way for them
to do it would be to include working unsubscribe links in   
their mails.  And this would be a necessity for smaller fry,
and for "legitimate" sites that hired spammers to promote
them.  So if auto-retrieving filters became widespread,
they'd become auto-unsubscribing filters.&lt;br/&gt;&lt;br/&gt;In this scenario, spam would, like OS crashes, viruses, and
popups, become one of those plagues that only afflict people
who don't bother to use the right software.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[1] Auto-retrieving filters will have to follow redirects,
and should in some cases (e.g. a page that just says
"click here") follow more than one level of links.
Make sure too that
the http requests are indistinguishable from those of
popular Web browsers, including the order and referrer.&lt;br/&gt;&lt;br/&gt;If the response
doesn't come back within x amount of time, default to
some fairly high spam probability.&lt;br/&gt;&lt;br/&gt;Instead of making n constant, it might be a good idea to
make it a function of the number of spams that have been
seen mentioning the site.  This would add a further level of
protection against abuse and accidents.&lt;br/&gt;&lt;br/&gt;[2] The original version of this article used the term
"whitelist" instead of "blacklist".  Though they were
to work like blacklists, I preferred to call them whitelists
because it might make them less vulnerable to legal attack.
This just seems to have confused readers, though.&lt;br/&gt;&lt;br/&gt;There should probably be multiple blacklists.  A single point
of failure would be vulnerable both to attack and abuse.&lt;br/&gt;&lt;br/&gt;&lt;!--[6] I don't pretend to have worked out all the
&lt;a href="ffbfaq.html"&gt;details&lt;/a&gt; of this
scheme.  I can't claim to be certain it will work.  (Who
could till it has been tried in practice?)  Fortunately,
unlike solutions that require new protocols, this one can
be tested on a subset of the problem.  Why not try using   
FFBs on, say, domains that begin with A?
If spammers start to avoid such domains, we'll know we're winning,
and we can roll
down the rest of the alphabet one letter at a time.
--&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Thanks&lt;/b&gt; to Brian Burton, Bill Yerazunis, Dan Giffin,
Eric Raymond, and Richard Jowsey for reading drafts of this.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//ffb.html</guid>
      <pubDate>Fri, 01 Aug 2003 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Writing,  Briefly</title>
      <link>https://paulgraham.com//writing44.html</link>
      <description>&lt;font face="verdana" size="2"&gt;March 2005&lt;br/&gt;&lt;br/&gt;&lt;!--&lt;i&gt;(Informal surveys of referring urls suggested demand for
essays that were short and didn't mention Lisp.)&lt;/i&gt;
--&gt;
&lt;i&gt;(In the process
of answering an email, I accidentally wrote a tiny essay about writing.
I usually spend weeks on an essay.  This one took &lt;!--44--&gt; 67 minutes—23
of writing, and &lt;!--21--&gt; 44 of rewriting.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;I think it's far more important to write well than most people
realize.  Writing doesn't just communicate i&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;March 2005&lt;br/&gt;&lt;br/&gt;&lt;!--&lt;i&gt;(Informal surveys of referring urls suggested demand for
essays that were short and didn't mention Lisp.)&lt;/i&gt;
--&gt;
&lt;i&gt;(In the process
of answering an email, I accidentally wrote a tiny essay about writing.
I usually spend weeks on an essay.  This one took &lt;!--44--&gt; 67 minutes—23
of writing, and &lt;!--21--&gt; 44 of rewriting.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;I think it's far more important to write well than most people
realize.  Writing doesn't just communicate ideas; it generates them.
If you're bad at writing and don't like to do it, you'll miss out
on most of the ideas writing would have generated.&lt;br/&gt;&lt;br/&gt;As for how to write well, here's the short version: 
Write a bad version
1 as fast as you can; rewrite it over and over; cut &lt;s&gt;out&lt;/s&gt; everything
unnecessary; write in a conversational tone; develop a nose for
bad writing, so you can see and fix it in yours; imitate writers
you like; if you can't get started, tell someone what you plan to
write about, then write down what you said; expect
80% of the ideas in an essay to happen after you start writing it,
and 50% of those you start with to be wrong; be confident enough
to cut; have friends you trust read your stuff and tell you which
bits are confusing or drag; don't (always) make detailed outlines;
mull ideas over for a few days before
writing; carry a small notebook or scrap paper with you; start writing 
when you think of the first 
sentence; if a deadline
forces you to start before that, just say the most important sentence
first; write about stuff you like; don't try to sound impressive; don't hesitate to change the topic on the fly;
use footnotes to contain digressions; use anaphora to knit
sentences together; read your essays out loud to see (a) where you stumble
over awkward phrases and (b) which bits are boring (the
paragraphs you dread reading); try to tell the
reader something new and useful; work in fairly big quanta of time;
when you restart, begin by rereading what you have so far; when you
finish, leave yourself something easy to start with; accumulate
notes for topics you plan to cover at the bottom of the file; don't
feel obliged to cover any of them; write for a reader who won't
read the essay as carefully as you do, just as pop songs are
designed to sound ok on crappy car radios; &lt;!-- read
writers you like, and try to figure out what makes you like them;--&gt;
if you say anything mistaken, fix it immediately;
ask friends which sentence you'll regret most; go back and tone
down harsh remarks; publish stuff online, because
an audience makes you write more, and thus generate more
ideas; print out drafts instead of just looking at them
on the screen; use simple, germanic words; learn to distinguish
surprises from digressions; learn to recognize the approach of an
ending, and when one appears, grab it.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//writing44.html</guid>
      <pubDate>Tue, 01 Mar 2005 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Are Software Patents Evil?</title>
      <link>https://paulgraham.com//softwarepatents.html</link>
      <description>&lt;font face="verdana" size="2"&gt;&lt;!--&lt;table width=100% cellspacing=0&gt;
&lt;tr&gt;&lt;td bgcolor=#ffac74&gt;&lt;img src="http://www.virtumundo.com/images/spacer.gif"
height=15 width=1&gt;&lt;font size=2&gt;
&lt;b&gt;April 29:&lt;/b&gt; Free one-day
&lt;a href="http://startupschool.org"&gt;startup school&lt;/a&gt;
for hackers.
&lt;/font&gt;
&lt;br&gt;&lt;img src="http://www.virtumundo.com/images/spacer.gif" height=5 width=1&gt;&lt;/td
&gt;&lt;/tr&gt;
&lt;/table&gt;
--&gt;
March 2006&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a talk at Google.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;A few weeks ago I found to my sur&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;&lt;!--&lt;table width=100% cellspacing=0&gt;
&lt;tr&gt;&lt;td bgcolor=#ffac74&gt;&lt;img src="http://www.virtumundo.com/images/spacer.gif"
height=15 width=1&gt;&lt;font size=2&gt;
&lt;b&gt;April 29:&lt;/b&gt; Free one-day
&lt;a href="http://startupschool.org"&gt;startup school&lt;/a&gt;
for hackers.
&lt;/font&gt;
&lt;br&gt;&lt;img src="http://www.virtumundo.com/images/spacer.gif" height=5 width=1&gt;&lt;/td
&gt;&lt;/tr&gt;
&lt;/table&gt;
--&gt;
March 2006&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a talk at Google.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;A few weeks ago I found to my surprise that I'd been granted four &lt;a href="http://paulgraham.infogami.com/blog/morepatents"&gt;patents&lt;/a&gt;.  
This was all the more surprising
because I'd only applied for three.  The patents aren't mine, of
course.  They were assigned to Viaweb, and became Yahoo's when they
bought us.  But the news set me thinking about the question of
software patents generally.&lt;br/&gt;&lt;br/&gt;Patents are a hard problem.  I've had to advise most of the startups
we've funded about them, and despite years of experience I'm still
not always sure I'm giving the right advice.&lt;br/&gt;&lt;br/&gt;One thing I do feel pretty certain of is that if you're against
software patents, you're against patents in general.  Gradually our
machines consist more and more of software.  Things that used to
be done with levers and cams and gears are now done with loops and
trees and closures.  There's nothing special about physical embodiments
of control systems that should make them patentable, and the software
equivalent not.&lt;br/&gt;&lt;br/&gt;Unfortunately, patent law is inconsistent on this point.  Patent
law in most countries says that algorithms aren't patentable.  This
rule is left over from a time when "algorithm" meant something like
the Sieve of Eratosthenes.  In 1800, people could not see as readily
as we can that a great many patents on mechanical objects were
really patents on the algorithms they embodied.&lt;br/&gt;&lt;br/&gt;Patent lawyers still have to pretend that's what they're doing when
they patent algorithms.  You must not use the word "algorithm" in
the title of a patent application, just as you must not use the
word "essays" in the title of a book.  If you want to patent an
algorithm, you have to frame it as a computer system executing that algorithm.
Then it's mechanical; phew.  The default euphemism for algorithm
is "system and method."  Try a patent search for that phrase and
see how many results you get.&lt;br/&gt;&lt;br/&gt;Since software patents are no different from hardware patents,
people who say "software patents are evil" are saying simply "patents
are evil."  So why do so many people complain about software patents
specifically?&lt;br/&gt;&lt;br/&gt;I think the problem is more with the patent office than the concept
of software patents.  Whenever software meets government, bad things
happen, because software changes fast and government changes slow.
The patent office has been overwhelmed by both the volume and the
novelty of applications for software patents, and as a result they've
made a lot of mistakes.&lt;br/&gt;&lt;br/&gt;The most common is to grant patents that shouldn't be granted.  To
be patentable, an invention has to be more than new.  It also has
to be non-obvious.  And this, especially, is where the USPTO has
been dropping the ball. Slashdot has an icon that expresses the
problem vividly: a knife and fork with the words "patent pending"
superimposed.&lt;br/&gt;&lt;br/&gt;The scary thing is, this is the &lt;i&gt;only&lt;/i&gt; icon they have for
patent stories.  Slashdot readers now take it for granted that a
story about a patent will be about a bogus patent.
That's how bad the problem has become.&lt;br/&gt;&lt;br/&gt;The problem with Amazon's notorious one-click patent, for example,
is not that it's a software patent, but that it's obvious.  Any
online store that kept people's shipping addresses would have
implemented this.  The reason Amazon did it first was not that they
were especially smart, but because they were one of the earliest
sites with enough clout to force customers to log in before they
could buy something. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f1n"&gt;&lt;font color="#777777"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;We, as hackers, know the USPTO is letting people patent the knives
and forks of our world.  The problem is, the USPTO are not hackers.
They're probably good at judging new inventions for casting steel
or grinding lenses, but they don't understand software yet.&lt;br/&gt;&lt;br/&gt;At this point an optimist would be tempted to add "but they will
eventually."  Unfortunately that might not be true.  The problem
with software patents is an instance of a more general one: the
patent office takes a while to understand new technology.  If so,
this problem will only get worse, because the rate of technological
change seems to be increasing.  In thirty years, the patent office
may understand the sort of things we now patent as software, but
there will be other new types of inventions they understand even
less.&lt;br/&gt;&lt;br/&gt;Applying for a patent is a negotiation.  You generally apply for a
broader patent than you think you'll be granted, and the examiners
reply by throwing out some of your claims and granting others.  So
I don't really blame Amazon for applying for the one-click patent.
The big mistake was the patent office's, for not insisting on
something narrower, with real technical content.  By granting such
an over-broad patent, the USPTO in effect slept with Amazon on the
first date.  Was Amazon supposed to say no?&lt;br/&gt;&lt;br/&gt;Where Amazon went over to the dark side was not in applying for the
patent, but in enforcing it.  A lot of companies (Microsoft, for
example) have been granted large numbers of preposterously over-broad
patents,  but they keep them mainly for defensive purposes.  Like
nuclear weapons, the main role of big companies' patent portfolios
is to threaten anyone who attacks them with a counter-suit.  Amazon's
suit against Barnes &amp;amp; Noble was thus the equivalent of a nuclear
first strike.&lt;br/&gt;&lt;br/&gt;That suit probably hurt Amazon more than it helped them.  Barnes &amp;amp;
Noble was a lame site; Amazon would have crushed them anyway.  To
attack a rival they could have ignored, Amazon put a lasting black
mark on their own reputation.  Even now I think if you asked hackers
to free-associate about Amazon, the one-click patent would turn up
in the first ten topics.&lt;br/&gt;&lt;br/&gt;Google clearly doesn't feel that merely holding patents is evil.
They've applied for a lot of them.  Are they hypocrites?  Are patents
evil?&lt;br/&gt;&lt;br/&gt;There are really two variants of that question, and people answering
it often aren't clear in their own minds which they're answering.
There's a narrow variant: is it bad, given the current legal system,
to apply for patents? and also a broader one: is it bad that the
current legal system allows patents?&lt;br/&gt;&lt;br/&gt;These are separate questions.  For example, in preindustrial societies
like medieval Europe, when someone attacked you, you didn't call
the police.  There were no police.  When attacked, you were supposed
to fight back, and there were conventions about how to do it.  Was
this wrong?  That's two questions: was it wrong to take justice
into your own hands, and was it wrong that you had to?  We tend to
say yes to the second, but no to the first.  If no one else will
defend you, you have to defend yourself.  
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f2n"&gt;&lt;font color="#777777"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The situation with patents is similar.  Business is a kind of
ritualized warfare.  Indeed, it evolved from actual warfare: most
early traders switched on the fly from merchants to pirates depending
on how strong you seemed.  In business there are certain rules
describing how companies may and may not compete with one another,
and someone deciding that they're going to play by their own rules
is missing the point.  Saying "I'm not going to apply for patents
just because everyone else does" is not like saying "I'm not going
to lie just because everyone else does."  It's more like saying
"I'm not going to use TCP/IP just because everyone else does." Oh
yes you are.&lt;br/&gt;&lt;br/&gt;A closer comparison might be someone seeing a hockey game for the
first time, realizing with shock that the players were &lt;i&gt;deliberately&lt;/i&gt;
bumping into one another, and deciding that one would on no account
be so rude when playing hockey oneself.&lt;br/&gt;&lt;br/&gt;Hockey allows checking.  It's part of the game.  If your team refuses
to do it, you simply lose.  So it is in business.  Under the present
rules, patents are part of the game.&lt;br/&gt;&lt;br/&gt;What does that mean in practice?  We tell the startups we fund not
to worry about infringing patents, because startups rarely get sued
for patent infringement.  There are only two reasons someone might
sue you: for money, or to prevent you from competing with them.
Startups are too poor to be worth suing for money. And in practice
they don't seem to get sued much by competitors, either.  They don't
get sued by other startups because (a) patent suits are an expensive
distraction, and (b) since the other startups are as young as they
are, their patents probably haven't issued yet. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f3n"&gt;&lt;font color="#777777"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
Nor do startups,
at least in the software business, seem to get sued much by established
competitors.  Despite all the patents Microsoft holds, I don't know
of an instance where they sued a startup for patent infringement.
Companies like Microsoft and Oracle don't win by winning lawsuits.
That's too uncertain.  They win by locking competitors out of their
sales channels.  If you do manage to threaten them, they're more
likely to buy you than sue you.&lt;br/&gt;&lt;br/&gt;When you read of big companies filing patent suits against smaller
ones, it's usually a big company on the way down, grasping at
straws.  For example, Unisys's attempts to enforce their patent on
LZW compression.  When you see a big company threatening patent
suits, sell.  When a company starts fighting over IP, it's a sign
they've lost the real battle, for users.&lt;br/&gt;&lt;br/&gt;A company that sues competitors for patent infringement is like
a defender who has been beaten so thoroughly that he turns to plead
with the referee.  You don't do that if you can still reach the
ball, even if you genuinely believe you've been fouled.  So a company
threatening patent suits is a company in &lt;a href="http://www.theregister.co.uk/2006/03/15/azul_sues_sun/"&gt;trouble&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;When we were working on Viaweb, a bigger company in the e-commerce
business was granted a patent on online ordering, or something like
that.  I got a call from a VP there asking if we'd like to license
it.  I replied that I thought the patent was completely bogus, and
would never hold up in court.  "Ok," he replied.  "So, are you guys
hiring?"&lt;br/&gt;&lt;br/&gt;If your startup grows big enough, however, you'll start to get sued,
no matter what you do.  If you go public, for example, you'll be
sued by multiple patent trolls who hope you'll pay them off to go
away.  More on them later.&lt;br/&gt;&lt;br/&gt;In other words, no one will sue you for patent infringement till
you have money, and once you have money, people will sue you whether
they have grounds to or not.  So I advise fatalism.  Don't waste
your time worrying about patent infringement.  You're probably
violating a patent every time you tie your shoelaces.  At the start,
at least, just worry about making something great and getting lots
of users.  If you grow to the point where anyone considers you worth
attacking, you're doing well.&lt;br/&gt;&lt;br/&gt;We do advise the companies we fund to apply for patents, but not
so they can sue competitors.  Successful startups either get bought
or grow into big companies.  If a startup wants to grow into a big
company, they should apply for patents to build up the patent
portfolio they'll need to maintain an armed truce with other big
companies.  If they want to get bought, they should apply for patents
because patents are part of the mating dance with acquirers.&lt;br/&gt;&lt;br/&gt;Most startups that succeed do it by getting bought, and most acquirers
care about patents.  Startup acquisitions are usually a build-vs-buy
decision for the acquirer.  Should we buy this little startup or
build our own?  And two things, especially, make them decide not
to build their own: if you already have a large and rapidly growing
user base, and if you have a fairly solid patent application on
critical parts of your software.&lt;br/&gt;&lt;br/&gt;There's a third reason big companies should prefer buying to building:
that if they built their own, they'd screw it up.  But few big
companies are smart enough yet to admit this to themselves.  It's
usually the acquirer's engineers who are asked how hard it would
be for the company to build their own, and they overestimate their
abilities.  
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f4n"&gt;&lt;font color="#777777"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
A patent seems to change the balance.  It gives the
acquirer an excuse to admit they couldn't copy what you're doing.
It may also help them to grasp what's special about your technology.&lt;br/&gt;&lt;br/&gt;Frankly, it surprises me how small a role patents play in the
software business.  It's kind of ironic, considering all the dire
things experts say about software patents stifling innovation, but
when one looks closely at the software business, the most striking
thing is how little patents seem to matter.&lt;br/&gt;&lt;br/&gt;In other fields, companies regularly sue competitors for patent
infringement.  For example, the airport baggage scanning business
was for many years a cozy duopoly shared between two companies,
InVision and L-3.  In 2002 a startup called Reveal appeared, with
new technology that let them build scanners a third the size.  They
were sued for patent infringement before they'd even released a
product.&lt;br/&gt;&lt;br/&gt;You rarely hear that kind of story in our world.  The one example
I've found is, embarrassingly enough, Yahoo, which filed a patent
suit against a gaming startup called Xfire in 2005.  Xfire doesn't
seem to be a very big deal, and it's hard to say why Yahoo felt
threatened.  Xfire's VP of engineering had worked at Yahoo on similar
stuff-- in fact, he was listed as an inventor on the patent Yahoo
sued over-- so perhaps there was something personal about it.  My
guess is that someone at Yahoo goofed.  At any rate they didn't
pursue the suit very vigorously.&lt;br/&gt;&lt;br/&gt;Why do patents play so small a role in software?  I can think of
three possible reasons.&lt;br/&gt;&lt;br/&gt;One is that software is so complicated that patents by themselves
are not worth very much.  I may be maligning other fields here, but
it seems that in most types of engineering you can hand the details
of some new technique to a group of medium-high quality people and
get the desired result.  For example, if someone develops a new
process for smelting ore that gets a better yield, and you assemble
a team of qualified experts and tell them about it, they'll be able
to get the same yield.  This doesn't seem to work in software.
Software is so subtle and unpredictable that "qualified experts"
don't get you very far.&lt;br/&gt;&lt;br/&gt;That's why we rarely hear phrases like "qualified expert" in the
software business.  What that level of ability can get you is, say,
to make your software compatible with some other piece of software--
in eight months, at enormous cost.  To do anything harder you need
individual brilliance.  If you assemble a team of qualified experts
and tell them to make a new web-based email program, they'll get
their asses kicked by a team of inspired nineteen year olds.&lt;br/&gt;&lt;br/&gt;Experts can implement, but they can't &lt;a href="https://paulgraham.com/taste.html"&gt;design&lt;/a&gt;.
Or rather, expertise in implementation is the only kind most people,
including the experts themselves, can measure. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f5n"&gt;&lt;font color="#777777"&gt;5&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;But design is a definite skill.  It's not just an airy intangible.
Things always seem intangible when you don't understand them.
Electricity seemed an airy intangible to most people in 1800.  Who
knew there was so much to know about it?  So it is with design.
Some people are good at it and some people are bad at it, and there's
something very tangible they're good or bad at.&lt;br/&gt;&lt;br/&gt;The reason design counts so much in software is probably that there
are fewer constraints than on physical things.  Building physical
things is expensive and dangerous.  The space of possible choices
is smaller; you tend to have to work as part of a larger group; and
you're subject to a lot of regulations.  You don't have any of that
if you and a couple friends decide to create a new web-based
application.&lt;br/&gt;&lt;br/&gt;Because there's so much scope for design in software, a successful
application tends to be way more than the sum of its patents.  What
protects little companies from being copied by bigger competitors
is not just their patents, but the thousand little things the big
company will get wrong if they try.&lt;br/&gt;&lt;br/&gt;The second reason patents don't count for much in our world is that
startups rarely attack big companies head-on, the way Reveal did.
In the software business, startups beat established companies by
transcending them.  Startups don't build desktop word processing
programs to compete with Microsoft Word. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f6n"&gt;&lt;font color="#777777"&gt;6&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
They build Writely.
If this paradigm is crowded, just wait for the next one; they run
pretty frequently on this route.&lt;br/&gt;&lt;br/&gt;Fortunately for startups, big companies are extremely good at denial.
If you take the trouble to attack them from an oblique angle, they'll
meet you half-way and maneuver to keep you in their blind spot.  To
sue a startup would mean admitting it was dangerous, and that often
means seeing something the big company doesn't want to see.  IBM
used to sue its mainframe competitors regularly, but they didn't
bother much about the microcomputer industry because they didn't
want to see the threat it posed.  Companies building web based apps
are similarly protected from Microsoft, which even now doesn't want
to imagine a world in which Windows is irrelevant.&lt;br/&gt;&lt;br/&gt;The third reason patents don't seem to matter very much in software
is public opinion-- or rather, hacker opinion.  In a recent &lt;a href="http://www.computing.co.uk/forbes/news/2152720/interview-steve-ballmer-linux"&gt;interview&lt;/a&gt;,
Steve Ballmer coyly left open the possibility of attacking Linux
on patent grounds.  But I doubt Microsoft would ever be so stupid.
They'd face the mother of all boycotts.  And not just from the
technical community in general; a lot of their own people would
rebel.&lt;br/&gt;&lt;br/&gt;Good hackers care a lot about matters of principle, and they are
highly mobile.  If a company starts misbehaving, smart people won't
work there.  For some reason this seems to be more true in software
than other businesses.  I don't think it's because hackers have
intrinsically higher principles so much as that their skills are
easily transferrable.  Perhaps we can split the difference and say
that mobility gives hackers the luxury of being principled.&lt;br/&gt;&lt;br/&gt;Google's "don't be evil" policy may for this reason be the most
valuable thing they've discovered.  It's very constraining in some
ways.  If Google does do something evil, they get doubly whacked
for it: once for whatever they did, and again for hypocrisy.  But
I think it's worth it.  It helps them to hire the best people, and
it's better, even from a purely selfish point of view, to be
constrained by principles than by stupidity.&lt;br/&gt;&lt;br/&gt;(I wish someone would get this point across to the present
administration.)&lt;br/&gt;&lt;br/&gt;I'm not sure what the proportions are of the preceding three
ingredients, but the custom among the big companies seems to be not
to sue the small ones, and the startups are mostly too busy and too
poor to sue one another.  So despite the huge number of software
patents there's not a lot of suing going on.  With one exception:
patent trolls.&lt;br/&gt;&lt;br/&gt;Patent trolls are companies consisting mainly of lawyers whose whole
business is to accumulate patents and threaten to sue companies who
actually make things.  Patent trolls, it seems safe to say, are
evil.  I feel a bit stupid saying that, because when you're saying
something that Richard Stallman and Bill Gates would both agree
with, you must be perilously close to tautologies.&lt;br/&gt;&lt;br/&gt;The CEO of Forgent, one of the most notorious patent trolls, says
that what his company does is "the American way." Actually that's
not true. The American way is to make money by &lt;a href="https://paulgraham.com/wealth.html"&gt;creating wealth&lt;/a&gt;, not by suing people. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f7n"&gt;&lt;font color="#777777"&gt;7&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
What companies like Forgent do is actually the proto-industrial
way.  In the period just before the industrial revolution, some of
the greatest fortunes in countries like England and France were
made by courtiers who extracted some lucrative right from the crown--
like the right to collect taxes on the import of silk-- and then
used this to squeeze money from the merchants in that business.  So
when people compare patent trolls to the mafia, they're more right
than they know, because the mafia too are not merely bad, but bad
specifically in the sense of being an obsolete business model.&lt;br/&gt;&lt;br/&gt;Patent trolls seem to have caught big companies by surprise.  In
the last couple years they've extracted hundreds of millions of
dollars from them.  Patent trolls are hard to fight precisely because
they create nothing.  Big companies are safe from being sued by
other big companies because they can threaten a counter-suit.  But
because patent trolls don't make anything, there's nothing they can
be sued for.  I predict this loophole will get closed fairly quickly,
at least by legal standards.  It's clearly an abuse of the system,
and the victims are powerful.
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/softwarepatents.html#f8n"&gt;&lt;font color="#777777"&gt;8&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;But evil as patent trolls are, I don't think they hamper innovation
much.  They don't sue till a startup has made money, and by that
point the innovation that generated it has already happened.  I
can't think of a startup that avoided working on some problem because
of patent trolls.&lt;br/&gt;&lt;br/&gt;So much for hockey as the game is played now.  What about the more
theoretical question of whether hockey would be a better game without
checking?  Do patents encourage or discourage innovation?&lt;br/&gt;&lt;br/&gt;This is a very hard question to answer in the general case.  People
write whole books on the topic.  One of my main hobbies is the
history of technology, and even though I've studied the subject for
years, it would take me several weeks of research to be able to say
whether patents have in general been a net win.&lt;br/&gt;&lt;br/&gt;One thing I can say is that 99.9% of the people who express opinions
on the subject do it not based on such research, but out of a kind
of religious conviction.  At least, that's the polite way of putting
it; the colloquial version involves speech coming out of organs not
designed for that purpose.&lt;br/&gt;&lt;br/&gt;Whether they encourage innovation or not, patents were at least
intended to.  You don't get a patent for nothing.  In return for
the exclusive right to use an idea, you have to &lt;i&gt;publish&lt;/i&gt; it,
and it was largely to encourage such openness that patents were
established.&lt;br/&gt;&lt;br/&gt;Before patents, people protected ideas by keeping them secret.  With
patents, central governments said, in effect, if you tell everyone
your idea, we'll protect it for you.  There is a parallel here to
the rise of civil order, which happened at roughly the same time.
Before central governments were powerful enough to enforce order,
rich people had private armies.  As governments got more powerful,
they gradually compelled magnates to cede most responsibility for
protecting them.  (Magnates still have bodyguards, but no longer
to protect them from other magnates.)&lt;br/&gt;&lt;br/&gt;Patents, like police, are involved in many abuses.  But in both
cases the default is something worse. The choice is not "patents
or freedom?" any more than it is "police or freedom?" The actual
questions are respectively "patents or secrecy?" and "police or
gangs?"&lt;br/&gt;&lt;br/&gt;As with gangs, we have some idea what secrecy would be like, because
that's how things used to be.  The economy of medieval Europe was
divided up into little tribes, each jealously guarding their
privileges and secrets.  In Shakespeare's time, "mystery" was
synonymous with "craft."   Even today we can see an echo of the
secrecy of medieval guilds, in the now pointless secrecy of the
Masons.&lt;br/&gt;&lt;br/&gt;The most memorable example of medieval industrial secrecy is probably
Venice, which forbade glassblowers to leave the city, and sent
assassins after those who tried.  We might like to think we wouldn't
go so far, but the movie industry has already tried to pass &lt;a href="http://news.com.com/2100-1026_3-5106684.html"&gt;laws&lt;/a&gt;
prescribing three year prison terms just for putting movies on
public networks.  Want to try a frightening thought experiment? If
the movie industry could have any law they wanted, where would they
stop?  Short of the death penalty, one assumes, but how close would
they get?&lt;br/&gt;&lt;br/&gt;Even worse than the spectacular abuses might be the overall decrease
in efficiency that would accompany increased secrecy.  As anyone
who has dealt with organizations that operate on a "need to know"
basis can attest, dividing information up into little cells is
terribly inefficient.  The flaw in the "need to know" principle is
that you don't &lt;i&gt;know&lt;/i&gt; who needs to know something.  An idea
from one area might spark a great discovery in another.  But the
discoverer doesn't know he needs to know it.&lt;br/&gt;&lt;br/&gt;If secrecy were the only protection for ideas, companies wouldn't
just have to be secretive with other companies; they'd have to be
secretive internally.  This would encourage what is already the
worst trait of big companies.&lt;br/&gt;&lt;br/&gt;I'm not saying secrecy would be worse than patents, just that we
couldn't discard patents for free.  Businesses would become more
secretive to compensate, and in some fields this might get ugly.
Nor am I defending the current patent system.  There is clearly a
lot that's broken about it.   But the breakage seems to affect
software less than most other fields.&lt;br/&gt;&lt;br/&gt;In the software business I know from experience whether patents
encourage or discourage innovation, and the answer is the type that
people who like to argue about public policy least like to hear:
they don't affect innovation much, one way or the other.  Most
innovation in the software business happens in startups, and startups
should simply ignore other companies' patents.  At least, that's
what we advise, and we bet money on that advice.&lt;br/&gt;&lt;br/&gt;The only real role of patents, for most startups, is as an element
of the mating dance with acquirers.  There patents do help a little.
And so they do encourage innovation indirectly, in that they give
more power to startups, which is where, pound for pound, the most
innovation happens.  But even in the mating dance, patents are of
secondary importance.  It matters more to make something great and
get a lot of users.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]
You have to be careful here, because a great discovery often
seems obvious in retrospect.  One-click ordering, however, is not
such a discovery.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
"Turn the other cheek" skirts the issue; the critical question
is not how to deal with slaps, but sword thrusts.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]
Applying for a patent is now very slow, but it might actually
be bad if that got fixed.  At the moment the time it takes to get
a patent is conveniently just longer than the time it takes a startup
to succeed or fail.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;]
Instead of the canonical "could you build this?" maybe the corp
dev guys should be asking "will you build this?" or even "why haven't
you already built this?"&lt;br/&gt;&lt;br/&gt;[&lt;a name="f5n"&gt;&lt;font color="#000000"&gt;5&lt;/font&gt;&lt;/a&gt;]
Design ability is so hard to measure that you can't even trust
the design world's internal standards.  You can't assume that someone
with a degree in design is any good at design, or that an eminent
designer is any better than his peers.  If that worked, any company
could build products as good as Apple's just by hiring 
sufficiently qualified designers.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f6n"&gt;&lt;font color="#000000"&gt;6&lt;/font&gt;&lt;/a&gt;]
If anyone wanted to try, we'd be interested to hear from them.
I suspect it's one of those things that's not as hard as everyone
assumes.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f7n"&gt;&lt;font color="#000000"&gt;7&lt;/font&gt;&lt;/a&gt;]
Patent trolls can't even claim, like speculators, that they
"create" liquidity.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f8n"&gt;&lt;font color="#000000"&gt;8&lt;/font&gt;&lt;/a&gt;]
If big companies don't want to wait for the government to take
action, there is a way to fight back themselves.  For a long time
I thought there wasn't, because there was nothing to grab onto.
But there is one resource patent trolls need: lawyers.  Big technology
companies between them generate a lot of legal business.  If they
agreed among themselves never to do business with any firm employing
anyone who had worked for a patent troll, either as an employee or
as outside counsel, they could probably starve the trolls of the
lawyers they need.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Dan Bloomberg, Paul Buchheit, Sarah Harlin, 
Jessica Livingston, and Peter Norvig
for reading drafts of this, to Joel Lehrer and Peter Eng for answering
my questions about patents, and to Ankur Pansari for inviting me
to speak.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//softwarepatents.html</guid>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The Hacker's Guide to Investors</title>
      <link>https://paulgraham.com//guidetoinvestors.html</link>
      <description>&lt;font face="verdana" size="2"&gt;April 2007&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a keynote talk at the 2007 ASES Summit
at Stanford.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;The world of investors is a foreign one to most hackers—partly
because investors are so unlike hackers, and partly because they
tend to operate in secret.  I've been dealing with this world for
many years, both as a founder and an investor, and I still don't
fully understand it.&lt;br/&gt;&lt;br/&gt;In this essay I'm going to list some of the more surprising thin&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;April 2007&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a keynote talk at the 2007 ASES Summit
at Stanford.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;The world of investors is a foreign one to most hackers—partly
because investors are so unlike hackers, and partly because they
tend to operate in secret.  I've been dealing with this world for
many years, both as a founder and an investor, and I still don't
fully understand it.&lt;br/&gt;&lt;br/&gt;In this essay I'm going to list some of the more surprising things
I've learned about investors.  Some I only learned in the past year.&lt;br/&gt;&lt;br/&gt;Teaching hackers how to deal with investors is probably the second
most important thing we do at Y Combinator.  The most important
thing for a startup is to make something good.  But everyone knows
that's important.  The dangerous thing about investors is that
hackers don't know how little they know about this strange world.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;1. The investors are what make a startup hub.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;About a year ago I tried to figure out what you'd need to reproduce
&lt;a href="https://paulgraham.com/siliconvalley.html"&gt;Silicon Valley&lt;/a&gt;.  I decided the 
critical ingredients were rich people
and nerds—investors and founders.  People are all you need to
make technology, and all the other people will move.&lt;br/&gt;&lt;br/&gt;If I had to narrow that down, I'd say investors are the limiting
factor.  Not because they contribute more to the startup, but simply
because they're least willing to move.  They're rich.  They're not
going to move to Albuquerque just because there are some smart
hackers there they could invest in.  Whereas hackers will move to
the Bay Area to find investors.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;2. Angel investors are the most critical.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;There are several types of investors.  The two main categories are
angels and VCs: VCs invest other people's money, and angels invest
their own.&lt;br/&gt;&lt;br/&gt;Though they're less well known, the angel investors are probably
the more critical ingredient in creating a silicon valley.  Most
companies that VCs invest in would never have made it that far if angels
hadn't invested first.  VCs say between half and three quarters of
companies that raise series A rounds have taken some outside
investment already.
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/guidetoinvestors.html#f1n"&gt;&lt;font color="#777777"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;Angels are willing to fund riskier projects than VCs.  They also
give valuable advice, because (unlike VCs) many have been startup
founders themselves.&lt;br/&gt;&lt;br/&gt;Google's story shows the key role angels play. A lot of people know
Google raised money from Kleiner and Sequoia.  What most don't realize
is how late.  That VC round was a series B round; the premoney
valuation was $75 million.  Google was already a successful company
at that point.  Really, Google was funded with angel money.&lt;br/&gt;&lt;br/&gt;It may seem odd that the canonical Silicon Valley startup was funded
by angels, but this is not so surprising.  Risk is always proportionate
to reward.  So the most successful startup of all is likely to have
seemed an extremely risky bet at first, and that is exactly the
kind VCs won't touch.&lt;br/&gt;&lt;br/&gt;Where do angel investors come from?  From other startups.  So startup
hubs like Silicon Valley benefit from something like the marketplace
effect, but shifted in time: startups are there because startups
were there.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;3. Angels don't like publicity.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;If angels are so important, why do we hear more about VCs?  Because
VCs like publicity.  They need to market themselves to the investors
who are their "customers"—the endowments and pension funds and
rich families whose money they invest—and also to founders who
might come to them for funding.&lt;br/&gt;&lt;br/&gt;Angels don't need to market themselves to investors because they
invest their own money.  Nor do they want to market themselves to
founders: they don't want random people pestering them with business
plans.  Actually, neither do VCs.  Both angels and VCs get deals
almost exclusively through personal introductions.  
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/guidetoinvestors.html#f2n"&gt;&lt;font color="#777777"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The reason VCs want a strong brand is not to draw in more business
plans over the transom, but so they win deals when competing
against other VCs.  Whereas angels are rarely in direct competition,
because (a) they do fewer deals, (b) they're happy to split them,
and (c) they invest at a point where the stream is broader.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;4. Most investors, especially VCs, are not like founders.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Some angels are, or were, hackers.  But most VCs are a different
type of people: they're dealmakers.&lt;br/&gt;&lt;br/&gt;If you're a hacker, here's a thought experiment you can run to
understand why there are basically no hacker VCs: How would you
like a job where you never got to make anything, but instead spent
all your time listening to other people pitch (mostly terrible)
projects, deciding whether to fund them, and sitting on their boards
if you did?  That would not be fun for most hackers.  Hackers like
to make things.  This would be like being an administrator.&lt;br/&gt;&lt;br/&gt;Because most VCs are a different species of people from
founders, it's hard to know what they're thinking.  If you're a
hacker, the last time you had to deal with these guys was in high
school.  Maybe in college you walked past their fraternity on your
way to the lab.  But don't underestimate them.  They're as expert
in their world as you are in yours.  What they're good at is reading
people, and making deals work to their advantage.  Think twice
before you try to beat them at that.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;5. Most investors are momentum investors.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Because most investors are dealmakers rather than technology people,
they generally don't understand what you're doing.  I knew as a
founder that most VCs didn't get technology.  I also knew some made
a lot of money.  And yet it never occurred to me till recently to
put those two ideas together and ask "How can VCs make money by
investing in stuff they don't understand?"&lt;br/&gt;&lt;br/&gt;The answer is that they're like momentum investors.  You can (or
could once) make a lot of money by noticing sudden changes in stock
prices.  When a stock jumps upward, you buy, and when it suddenly
drops, you sell.  In effect you're insider trading, without knowing
what you know.  You just know someone knows something, and that's
making the stock move.&lt;br/&gt;&lt;br/&gt;This is how most venture investors operate.  They don't try to look
at something and predict whether it will take off.  They win by
noticing that something &lt;i&gt;is&lt;/i&gt; taking off a little sooner than everyone
else.  That generates almost as good returns as actually being able
to pick winners.  They may have to pay a little more than they would
if they got in at the very beginning, but only a little.&lt;br/&gt;&lt;br/&gt;Investors always say what they really care about is the team.
Actually what they care most about is your traffic, then what other
investors think, then the team.  If you don't yet have any traffic,
they fall back on number 2, what other investors think.  And this,
as you can imagine, produces wild oscillations in the "stock price"
of a startup.  One week everyone wants you, and they're begging not
to be cut out of the deal.  But all it takes is for one big investor
to cool on you, and the next week no one will return your phone
calls.  We regularly have startups go from hot to cold or cold to
hot in a matter of days, and literally nothing has changed.&lt;br/&gt;&lt;br/&gt;There are two ways to deal with this phenomenon.  If you're feeling
really confident, you can try to ride it.  You can start by asking
a comparatively lowly VC for a small amount of money, and then after
generating interest there, ask more prestigious VCs for larger
amounts, stirring up a crescendo of buzz, and then "sell" at the
top.  This is extremely risky, and takes months even if you succeed.
I wouldn't try it myself.  My advice is to err on the side of safety:
when someone offers you a decent deal, just take it and get on with
building the company.  Startups win or lose based on the quality
of their product, not the quality of their funding deals.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;6. Most investors are looking for big hits.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Venture investors like companies that could go public.  That's where
the big returns are.  They know the odds of any individual startup
going public are small, but they want to invest in those that at
least have a &lt;i&gt;chance&lt;/i&gt; of going public.&lt;br/&gt;&lt;br/&gt;Currently the way VCs seem to operate is to invest in a bunch of
companies, most of which fail, and one of which is Google.  Those
few big wins compensate for losses on their other investments.  What this
means is that most VCs will only invest in you if you're a potential
Google.  They don't care about companies that are a safe bet to be
acquired for $20 million.  There needs to be a chance, however
small, of the company becoming really big.&lt;br/&gt;&lt;br/&gt;Angels are different in this respect.  They're happy to invest in
a company where the most likely outcome is a $20 million acquisition
if they can do it at a low enough valuation.  But of course they
like companies that could go public too.  So having an ambitious
long-term plan pleases everyone.&lt;br/&gt;&lt;br/&gt;If you take VC money, you have to mean it, because the structure
of VC deals prevents early acquisitions.  If you take VC money,
they won't let you sell early.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;7. VCs want to invest large amounts.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;The fact that they're running investment funds makes VCs want to
invest large amounts.  A typical VC fund is now hundreds of millions
of dollars.  If $400 million has to be invested by 10 partners,
they have to invest $40 million each.  VCs usually sit on the boards
of companies they fund.  If the average deal size was $1 million,
each partner would have to sit on 40 boards, which would not be
fun.  So they prefer bigger deals, where they can put a lot of money
to work at once.&lt;br/&gt;&lt;br/&gt;VCs don't regard you as a bargain if you don't need a lot of money.
That may even make you less attractive, because it means their
investment creates less of a barrier to entry for competitors.&lt;br/&gt;&lt;br/&gt;Angels are in a different position because they're investing their
own money.  They're happy to invest small amounts—sometimes as
little as $20,000—as long as the potential returns look good
enough.  So if you're doing something inexpensive, go to angels.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;8. Valuations are fiction.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;VCs admit that valuations are an artifact.  They decide how much
money you need and how much of the company they want, and those two
constraints yield a valuation.&lt;br/&gt;&lt;br/&gt;Valuations increase as the size of the investment does.  A company
that an angel is willing to put $50,000 into at a valuation of a
million can't take $6 million from VCs at that valuation.  That
would leave the founders less than a seventh of the company between
them (since the option pool would also come out of that seventh).
Most VCs wouldn't want that, which is why you never hear of deals
where a VC invests $6 million at a premoney valuation of $1 million.&lt;br/&gt;&lt;br/&gt;If valuations change depending on the amount invested, that shows
how far they are from reflecting any kind of value of the company.&lt;br/&gt;&lt;br/&gt;Since valuations are made up, founders shouldn't care too much about
them.  That's not the part to focus on.  In fact, a high valuation
can be a bad thing.  If you take funding at a premoney valuation
of $10 million, you won't be selling the company for 20.  You'll
have to sell for over 50 for the VCs to get even a 5x return, which
is low to them.  More likely they'll want you to hold out for 100.
But needing to get a high price decreases the chance of getting
bought at all; many companies can buy you for $10 million, but only
a handful for 100.  And since a startup is like a pass/fail course
for the founders, what you want to optimize is your chance of a
good outcome, not the percentage of the company you keep.&lt;br/&gt;&lt;br/&gt;So why do founders chase high valuations?  They're tricked by
misplaced ambition.  They feel they've achieved more if they get a
higher valuation.  They usually know other founders, and if they
get a higher valuation they can say "mine is bigger than yours."
But funding is not the real test.  The real test is the final outcome
for the founder, and getting too high a valuation may just make a
good outcome less likely.&lt;br/&gt;&lt;br/&gt;The one advantage of a high valuation is that you get less dilution.
But there is another less sexy way to achieve that: just take less
money.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;9. Investors look for founders like the current stars.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Ten years ago investors were looking for the next Bill Gates.  This
was a mistake, because Microsoft was a very anomalous startup.  They
started almost as a contract programming operation, and the reason
they became huge was that IBM happened to drop the PC standard in
their lap.&lt;br/&gt;&lt;br/&gt;Now all the VCs are looking for the next Larry and Sergey.  This
is a good trend, because Larry and Sergey are closer to the ideal
startup founders.&lt;br/&gt;&lt;br/&gt;Historically investors thought it was important for a founder to
be an expert in business.  So they were willing to fund teams of
MBAs who planned to use the money to pay programmers to build their
product for them.  This is like funding Steve Ballmer in the hope
that the programmer he'll hire is Bill Gates—kind of backward,
as the events of the Bubble showed.  Now most VCs know they should
be funding technical guys.  This is more pronounced among the very
top funds; the lamer ones still want to fund MBAs.&lt;br/&gt;&lt;br/&gt;If you're a hacker, it's good news that investors are looking for
Larry and Sergey.  The bad news is, the only investors who can do
it right are the ones who knew them when they were a
couple of CS grad students, not the confident media stars they are
today.  What investors still don't get is how clueless and tentative
great founders can seem at the very beginning.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;10. The contribution of investors tends to be underestimated.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Investors do more for startups than give them money.  They're helpful
in doing deals and arranging introductions, and some of the smarter
ones, particularly angels, can give good advice about the product.&lt;br/&gt;&lt;br/&gt;In fact, I'd say what separates the great investors from the mediocre
ones is the quality of their advice.  Most investors give advice,
but the top ones give &lt;i&gt;good&lt;/i&gt; advice.&lt;br/&gt;&lt;br/&gt;Whatever help investors give a startup tends to be underestimated.
It's to everyone's advantage to let the world think the founders
thought of everything.  The goal of the investors is for the company
to become valuable, and the company seems more valuable if it seems
like all the good ideas came from within.&lt;br/&gt;&lt;br/&gt;This trend is compounded by the obsession that the press has with
founders.  In a company founded by two people, 10% of the ideas
might come from the first guy they hire.  Arguably they've done a
bad job of hiring otherwise.  And yet this guy will be almost
entirely overlooked by the press.&lt;br/&gt;&lt;br/&gt;I say this as a founder: the contribution of founders is always
overestimated.  The danger here is that new founders, looking at
existing founders, will think that they're supermen that one couldn't
possibly equal oneself.  Actually they have a hundred different
types of support people just offscreen making the whole show possible.
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/guidetoinvestors.html#f3n"&gt;&lt;font color="#777777"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;11. VCs are afraid of looking bad.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;I've been very surprised to discover how timid most VCs are.  They
seem to be afraid of looking bad to their partners, and perhaps
also to the limited partners—the people whose money they invest.&lt;br/&gt;&lt;br/&gt;You can measure this fear in how much less risk VCs are willing to
take.  You can tell they won't make investments for their fund that
they might be willing to make themselves as angels.  Though it's
not quite accurate to say that VCs are less willing to take risks.
They're less willing to do things that might look bad.  That's not
the same thing.&lt;br/&gt;&lt;br/&gt;For example, most VCs would be very reluctant to invest in a startup
founded by a pair of 18 year old hackers, no matter how brilliant,
because if the startup failed their partners could turn on them and
say "What, you invested $x million of our money in a pair of 18
year olds?"  Whereas if a VC invested in a startup founded by
three former banking executives in their 40s who planned to outsource
their product development—which to my mind is actually a lot
riskier than investing in a pair of really smart 18 year olds—he
couldn't be faulted, if it failed, for making such an apparently
prudent investment.&lt;br/&gt;&lt;br/&gt;As a friend of mine said, "Most VCs can't do anything that would
sound bad to the kind of doofuses who run pension funds." Angels
can take greater risks because they don't have to answer to anyone.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;12. Being turned down by investors doesn't mean much.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Some founders are quite dejected when they get turned down by
investors.  They shouldn't take it so much to heart.  To start with,
investors are often wrong.  It's hard to think of a successful
startup that wasn't turned down by investors at some point.  Lots
of VCs rejected Google.  So obviously the reaction of investors is
not a very meaningful test.&lt;br/&gt;&lt;br/&gt;Investors will often reject you for what seem to be superficial
reasons.  I read of one VC who 
&lt;a href="http://ricksegal.typepad.com/pmv/2007/02/a_fatal_paper_c.html"&gt;turned
down&lt;/a&gt; a startup simply because
they'd given away so many little bits of stock that the deal required
too many signatures to close. 
&lt;font color="#777777"&gt;[&lt;a href="https://paulgraham.com/guidetoinvestors.html#f4n"&gt;&lt;font color="#777777"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
The reason investors can get away
with this is that they see so many deals.  It doesn't matter if
they underestimate you because of some surface imperfection, because
the next best deal will be &lt;a href="https://paulgraham.com/judgement.html"&gt;almost as good&lt;/a&gt;.  
Imagine picking out
apples at a grocery store.  You grab one with a little bruise.
Maybe it's just a surface bruise, but why even bother checking when
there are so many other unbruised apples to choose from?&lt;br/&gt;&lt;br/&gt;Investors would be the first to admit they're often wrong.  So when
you get rejected by investors, don't think "we suck," but instead
ask "do we suck?"  Rejection is a question, not an answer.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;13. Investors are emotional.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;I've been surprised to discover how emotional investors can be.
You'd expect them to be cold and calculating, or at least businesslike,
but often they're not.  I'm not sure if it's their position of power
that makes them this way, or the large sums of money involved, but
investment negotiations can easily turn personal.  If you offend
investors, they'll leave in a huff.&lt;br/&gt;&lt;br/&gt;A while ago an eminent VC firm offered a series A round to a startup
we'd seed funded.  Then they heard a rival VC firm was also interested.
They were so afraid that they'd be rejected in favor of this other
firm that they gave the startup what's known as an "exploding
termsheet."  They had, I think, 24 hours to say yes or no, or the
deal was off.  Exploding termsheets are a somewhat dubious device,
but not uncommon.  What surprised me was their reaction when I
called to talk about it.  I asked if they'd still be interested in
the startup if the rival VC didn't end up making an offer, and they
said no.  What rational basis could they have had for saying that?
If they thought the startup was worth investing in, what difference
should it make what some other VC thought?  Surely it was their
duty to their limited partners simply to invest in the best
opportunities they found; they should be delighted if the other VC
said no, because it would mean they'd overlooked a good opportunity.
But of course there was no rational basis for their decision.  They
just couldn't stand the idea of taking this rival firm's rejects.&lt;br/&gt;&lt;br/&gt;In this case the exploding termsheet was not (or not only) a tactic
to pressure the startup.  It was more like the high school trick
of breaking up with someone before they can break up with you.  In
an &lt;a href="https://paulgraham.com/startupfunding.html"&gt;earlier essay&lt;/a&gt; I said that VCs were a lot like high school girls.
A few VCs have joked about that characterization, but none have
disputed it.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;14. The negotiation never stops till the closing.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Most deals, for investment or acquisition, happen in two phases.
There's an initial phase of negotiation about the big questions.
If this succeeds you get a termsheet, so called because it outlines
the key terms of a deal.  A termsheet is not legally binding,
but it is a definite step.  It's supposed to mean that a
deal is going to happen, once the lawyers work out all the details.
In theory these details are minor ones; by definition all the
important points are supposed to be covered in the termsheet.&lt;br/&gt;&lt;br/&gt;Inexperience and wishful thinking combine to make founders feel
that when they have a termsheet, they have a deal.  They want there
to be a deal; everyone acts like they have a deal; so there must
be a deal.  But there isn't and may not be for several months.  A
lot can change for a startup in several months.  It's not uncommon
for investors and acquirers to get buyer's remorse.  So you have
to keep pushing, keep selling, all the way to the close.  Otherwise
all the "minor" details left unspecified in the termsheet will be
interpreted to your disadvantage.  The other side may even break
the deal; if they do that, they'll usually seize on some technicality
or claim you misled them, rather than admitting they changed their
minds.&lt;br/&gt;&lt;br/&gt;It can be hard to keep the pressure on an investor or acquirer all
the way to the closing, because the most effective pressure is
competition from other investors or acquirers, and these tend to
drop away when you get a termsheet.  You should try to stay as close
friends as you can with these rivals, but the most important thing
is just to keep up the momentum in your startup.  The investors or
acquirers chose you because you seemed hot.  Keep doing whatever
made you seem hot.  Keep releasing new features; keep getting new
users; keep getting mentioned in the press and in blogs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;15. Investors like to co-invest.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;I've been surprised how willing investors are to split deals.  You
might think that if they found a good deal they'd want it all to
themselves, but they seem positively eager to syndicate.  This is
understandable with angels; they invest on a smaller scale and don't
like to have too much money tied up in any one deal.  But VCs also
share deals a lot.  Why?&lt;br/&gt;&lt;br/&gt;Partly I think this is an artifact of the rule I quoted earlier:
after traffic, VCs care most what other VCs think.  A deal that has
multiple VCs interested in it is more likely to close, so of deals
that close, more will have multiple investors.&lt;br/&gt;&lt;br/&gt;There is one rational reason to want multiple VCs in a deal: Any
investor who co-invests with you is one less investor who could
fund a competitor.  Apparently Kleiner and Sequoia didn't like
splitting the Google deal, but it did at least have the advantage,
from each one's point of view, that there probably wouldn't be a
competitor funded by the other.  Splitting deals thus has similar
advantages to confusing paternity.&lt;br/&gt;&lt;br/&gt;But I think the main reason VCs like splitting deals is the fear
of looking bad.  If another firm shares the deal, then in the event
of failure it will seem to have been a prudent choice—a consensus
decision, rather than just the whim of an individual partner.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;16. Investors collude.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Investing is not covered by antitrust law.  At least, it better not
be, because investors regularly do things that would be illegal
otherwise.  I know personally of cases where one investor has talked
another out of making a competitive offer, using the promise of
sharing future deals.&lt;br/&gt;&lt;br/&gt;In principle investors are all competing for the same deals, but
the spirit of cooperation is stronger than the spirit of competition.
The reason, again, is that there are so many deals.  Though a
professional investor may have a closer relationship with a founder
he invests in than with other investors, his relationship with the
founder is only going to last a couple years, whereas his relationship
with other firms will last his whole career.  There isn't so much
at stake in his interactions with other investors, but there will
be a lot of them.  Professional investors are constantly trading
little favors.&lt;br/&gt;&lt;br/&gt;Another reason investors stick together is to preserve the power
of investors as a whole.  So you will not, as of this writing, be
able to get investors into an auction for your series A round.
They'd rather lose the deal than establish a precedent of VCs
competitively bidding against one another.  An efficient startup
funding market may be coming in the distant future; things tend to
move in that direction; but it's certainly not here now.
&lt;!--
The best way to describe the situation might be to say that VCs
compete intramurally. --&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;17. Large-scale investors care about their portfolio, not any
individual company.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;The reason startups work so well is that everyone with power also
has equity.  The only way any of them can succeed is if they all
do.  This makes everyone naturally pull in the same direction,
subject to differences of opinion about tactics.&lt;br/&gt;&lt;br/&gt;The problem is, larger scale investors don't have exactly the same
motivation.  Close, but not identical. They don't need any given
startup to succeed, like founders do, just their portfolio as a
whole to.  So in borderline cases the rational thing for them to
do is to sacrifice unpromising startups.&lt;br/&gt;&lt;br/&gt;Large-scale investors tend to put startups in three categories:
successes, failures, and the "living dead"—companies that are
plugging along but don't seem likely in the immediate future to get
bought or go public.  To the founders, "living dead" sounds harsh.
These companies may be far from failures by ordinary standards. But
they might as well be from a venture investor's point of view, and
they suck up just as much time and attention as the successes.  So
if such a company has two possible strategies, a conservative one
that's slightly more likely to work in the end, or a risky one that
within a short time will either yield a giant success or kill the
company, VCs will push for the kill-or-cure option.  To them the
company is already a write-off.  Better to have resolution, one way
or the other, as soon as possible.&lt;br/&gt;&lt;br/&gt;If a startup gets into real trouble, instead of trying to save it
VCs may just sell it at a low price to another of their portfolio
companies.  Philip Greenspun said in &lt;a href="http://www.amazon.com/gp/product/1590597141"&gt;&lt;i&gt;Founders at Work&lt;/i&gt;&lt;/a&gt; that Ars Digita's VCs did this to them.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;18. Investors have different risk profiles from founders.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Most people would rather a 100% chance of $1 million than a 20%
chance of $10 million.  Investors are rich enough to be rational
and prefer the latter.  So they'll always tend to encourage founders
to keep rolling the dice.  If a company is doing well, investors
will want founders to turn down most acquisition offers.  And indeed,
most startups that turn down acquisition offers ultimately do better.
But it's still hair-raising for the founders, because they might
end up with nothing.  When someone's offering to buy you for a price
at which your stock is worth $5 million, saying no is equivalent
to having $5 million and betting it all on one spin of the roulette
wheel.&lt;br/&gt;&lt;br/&gt;Investors will tell you the company is worth more.  And they may
be right.  But that doesn't mean it's wrong to sell.  Any financial
advisor who put all his client's assets in the stock of a single,
private company would probably lose his license for it.&lt;br/&gt;&lt;br/&gt;More and more, investors are letting founders cash out partially.
That should correct the problem. Most founders have such low standards
that they'll feel rich with a sum that doesn't seem huge to investors.
But this custom is spreading too slowly, because VCs are afraid of
seeming irresponsible.  No one wants to be the first VC to give
someone fuck-you money and then actually get told "fuck you." But
until this does start to happen, we know VCs are being too conservative.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;19. Investors vary greatly.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Back when I was a founder I used to think all VCs were the same.
And in fact they do all &lt;a href="http://www.redpoint.com/team/"&gt;look&lt;/a&gt; 
the same.  They're all what hackers
call "suits."  But since I've been dealing with VCs more I've learned
that some suits are smarter than others.&lt;br/&gt;&lt;br/&gt;They're also in a business where winners tend to keep winning and
losers to keep losing.  When a VC firm has been successful in the
past, everyone wants funding from them, so they get the pick of all
the new deals.  The self-reinforcing nature of the venture funding
market means that the top ten firms live in a completely different
world from, say, the hundredth.  As well as being smarter, they
tend to be calmer and more upstanding; they don't need to do iffy
things to get an edge, and don't want to because they have more
brand to protect.&lt;br/&gt;&lt;br/&gt;There are only two kinds of VCs you want to take money from, if you
have the luxury of choosing: the "top tier" VCs, meaning about the
top 20 or so firms, plus a few new ones that are not among the top
20 only because they haven't been around long enough.&lt;br/&gt;&lt;br/&gt;It's particularly important to raise money from a top firm if you're
a hacker, because they're more confident.  That means they're less
likely to stick you with a business guy as CEO, like VCs used to
do in the 90s.  If you seem smart and want to do it, they'll let
you run the company.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;20. Investors don't realize how much it costs to raise money from
them.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Raising money is a huge time suck at just the point where startups
can least afford it. It's not unusual for it to take five or six
months to close a funding round.  Six weeks is fast.  And raising
money is not just something you can leave running as a background
process.  When you're raising money, it's inevitably the main focus
of the company.  Which means building the product isn't.&lt;br/&gt;&lt;br/&gt;Suppose a Y Combinator company starts talking to VCs after demo
day, and is successful in raising money from them, closing the deal
after a comparatively short 8 weeks.  Since demo day occurs after
10 weeks, the company is now 18 weeks old.  Raising money, rather
than working on the product, has been the company's main focus for
44% of its existence.  And mind you, this an example where things
turned out &lt;i&gt;well&lt;/i&gt;.&lt;br/&gt;&lt;br/&gt;When a startup does return to working on the product after a funding
round finally closes, it's as if they were returning to work after
a months-long illness.  They've lost most of their momentum.&lt;br/&gt;&lt;br/&gt;Investors have no idea how much they damage the companies they
invest in by taking so long to do it.  But companies do. So there
is a big opportunity here for a new kind of venture fund that invests
smaller amounts at lower valuations, but promises to either close
or say no very quickly.  If there were such a firm, I'd recommend
it to startups in preference to any other, no matter how prestigious.
Startups live on speed and momentum.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;21. Investors don't like to say no.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;The reason funding deals take so long to close is mainly that
investors can't make up their minds.  VCs are not big companies;
they can do a deal in 24 hours if they need to.  But they usually
let the initial meetings stretch out over a couple weeks.  The
reason is the selection algorithm I mentioned earlier.  Most don't
try to predict whether a startup will win, but to notice quickly
that it already is winning.  They care what the market thinks of
you and what other VCs think of you, and they can't judge those
just from meeting you.&lt;br/&gt;&lt;br/&gt;Because they're investing in things that (a) change fast and (b)
they don't understand, a lot of investors will reject you in a way
that can later be claimed not to have been a rejection.  Unless you
know this world, you may not even realize you've been rejected.
Here's a VC saying no:
&lt;blockquote&gt;
  We're really excited about your project, and we want to keep in
  close touch as you develop it further.
&lt;/blockquote&gt;
Translated into more straightforward language, this means: We're
not investing in you, but we may change our minds if it looks like
you're taking off.  Sometimes they're more candid and say explicitly
that they need to "see some traction."  They'll invest in you if
you start to get lots of users.  But so would any VC.  So all they're
saying is that you're still at square 1.&lt;br/&gt;&lt;br/&gt;Here's a test for deciding whether a VC's response was yes or no.
Look down at your hands.  Are you holding a termsheet?&lt;br/&gt;&lt;br/&gt;&lt;b&gt;22. You need investors.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Some founders say "Who needs investors?"  Empirically the answer
seems to be: everyone who wants to succeed.  Practically every
successful startup takes outside investment at some point.&lt;br/&gt;&lt;br/&gt;Why? What the people who think they don't need investors forget is
that they will have competitors.  The question is not whether you
&lt;i&gt;need&lt;/i&gt; outside investment, but whether it could help you at all.
If the answer is yes, and you don't take investment, then competitors
who do will have an advantage over you.  And in the startup world
a little advantage can expand into a lot.&lt;br/&gt;&lt;br/&gt;Mike Moritz famously said that he invested in Yahoo because he
thought they had a few weeks' lead over their competitors.  That
may not have mattered quite so much as he thought, because Google
came along three years later and kicked Yahoo's ass.  But there is
something in what he said.  Sometimes a small lead can grow into
the yes half of a binary choice.&lt;br/&gt;&lt;br/&gt;Maybe as it gets cheaper to start a startup, it will start to be
possible to succeed in a competitive market without outside funding.  
There are certainly
costs to raising money.  But as of this writing the empirical
evidence says it's a net win.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;23. Investors like it when you don't need them.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;A lot of founders approach investors as if they needed their
permission to start a company—as if it were like getting into
college.  But you don't need investors to start most companies;
they just make it easier.&lt;br/&gt;&lt;br/&gt;And in fact, investors greatly prefer it if you don't need them.
What excites them, both consciously and unconsciously, is the sort
of startup that approaches them saying "the train's leaving the
station; are you in or out?" not the one saying "please can we have
some money to start a company?"&lt;br/&gt;&lt;br/&gt;Most investors are "bottoms" in the sense that the startups they
like most are those that are rough with them.  When Google stuck
Kleiner and Sequoia with a $75 million premoney valuation, their
reaction was probably "Ouch! That feels so good." And they were
right, weren't they?  That deal probably made them more than any
other they've done.&lt;br/&gt;&lt;br/&gt;The thing is, VCs are pretty good at reading people.  So don't try
to act tough with them unless you really are the next Google, or
they'll see through you in a second.  Instead of acting tough, what
most startups should do is simply always have a backup plan.  Always
have some alternative plan for getting started if any given investor
says no.  Having one is the best insurance against needing one.&lt;br/&gt;&lt;br/&gt;So you shouldn't start a startup that's expensive to start, because
then you'll be at the mercy of investors.  If you ultimately want
to do something that will cost a lot, start by doing a cheaper
subset of it, and expand your ambitions when and if you raise more
money.&lt;br/&gt;&lt;br/&gt;Apparently the most likely animals to be left alive after a nuclear
war are cockroaches, because they're so hard to kill.  That's what
you want to be as a startup, initially.  Instead of a beautiful
but fragile flower that needs to have its stem in a plastic tube
to support itself, better to be small, ugly, and indestructible.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]
I may be underestimating VCs.  They may play some behind the scenes 
role in IPOs, which you ultimately need if you want to create a silicon 
valley.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
A few VCs have an email address you can send your business
plan to, but the number of startups that get funded this way is
basically zero.  You should always get a personal introduction—and 
to a partner, not an associate.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]
Several people have told us that the most valuable thing about 
&lt;a href="http://startupschool.org"&gt;startup school&lt;/a&gt; 
was that they got to see famous startup founders and realized
they were just ordinary guys.  Though we're happy to provide this
service, this is not generally the way we pitch startup school to
potential speakers.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;]
Actually this sounds to me like a VC who got buyer's remorse,
then used a technicality to get out of the deal.  But it's telling
that it even seemed a plausible excuse.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Sam Altman, Paul Buchheit, Hutch Fishman, and Robert 
Morris for reading drafts of
this, and to Kenneth King of ASES for inviting me to speak.&lt;br/&gt;&lt;br/&gt;&lt;img src="http://ycombinator.com/images/y18.gif"/&gt;
&lt;a href="http://news.ycombinator.com/item?id=17947"&gt;Comment&lt;/a&gt; on this essay.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//guidetoinvestors.html</guid>
      <pubDate>Sun, 01 Apr 2007 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Be Good</title>
      <link>https://paulgraham.com//good.html</link>
      <description>&lt;font face="verdana" size="2"&gt;April 2008&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a talk at the 2008 Startup School.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;About a month after we started Y Combinator we came up with the
phrase that became our motto: Make something people want.  We've
learned a lot since then, but if I were choosing now that's still
the one I'd pick.&lt;br/&gt;&lt;br/&gt;Another thing we tell founders is not to worry too much about the
business model, at least at first.  Not because making money is
unimportant, but b&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;April 2008&lt;br/&gt;&lt;br/&gt;&lt;i&gt;(This essay is derived from a talk at the 2008 Startup School.)&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;About a month after we started Y Combinator we came up with the
phrase that became our motto: Make something people want.  We've
learned a lot since then, but if I were choosing now that's still
the one I'd pick.&lt;br/&gt;&lt;br/&gt;Another thing we tell founders is not to worry too much about the
business model, at least at first.  Not because making money is
unimportant, but because it's so much easier than building something
great.&lt;br/&gt;&lt;br/&gt;A couple weeks ago I realized that if you put those two ideas
together, you get something surprising.  Make something people want.
Don't worry too much about making money.  What you've got is a
description of a charity.&lt;br/&gt;&lt;br/&gt;When you get an unexpected result like this, it could either be a
bug or a new discovery.  Either businesses aren't supposed to be
like charities, and we've proven by reductio ad absurdum that one
or both of the principles we began with is false.  Or we have a new
idea.&lt;br/&gt;&lt;br/&gt;I suspect it's the latter, because as soon as this thought occurred
to me, a whole bunch of other things fell into place.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;For example, Craigslist.  It's not a charity, but they run it like
one.  And they're astoundingly successful.  When you scan down the
list of most popular web sites, the number of employees at Craigslist
looks like a misprint. Their revenues aren't as high as they could
be, but most startups would be happy to trade places with them.&lt;br/&gt;&lt;br/&gt;In Patrick O'Brian's novels, his captains always try to get upwind
of their opponents.  If you're upwind, you decide when and if to
engage the other ship.  Craigslist is effectively upwind of enormous
revenues.  They'd face some challenges if they wanted to make more,
but not the sort you face when you're tacking upwind, trying to
force a crappy product on ambivalent users by spending ten times
as much on sales as on development.  &lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/good.html#f1n"&gt;&lt;font color="#999999"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;I'm not saying startups should aim to end up like Craigslist.
They're a product of unusual circumstances.  But they're a good
model for the early phases.&lt;br/&gt;&lt;br/&gt;Google looked a lot like a charity in the beginning. They didn't
have ads for over a year.  At year 1, Google was indistinguishable
from a nonprofit.  If a nonprofit or government organization had
started a project to index the web, Google at year 1 is the limit
of what they'd have produced.&lt;br/&gt;&lt;br/&gt;Back when I was working on spam filters I thought it would be a
good idea to have a web-based email service with good spam filtering.
I wasn't thinking of it as a company.  I just wanted to keep people
from getting spammed.  But as I thought more about this project, I
realized it would probably have to be a company.  It would cost
something to run, and it would be a pain to fund with grants and
donations.&lt;br/&gt;&lt;br/&gt;That was a surprising realization.  Companies often claim to be
benevolent, but it was surprising to realize there were purely
benevolent projects that had to be embodied as companies to work.&lt;br/&gt;&lt;br/&gt;I didn't want to start another company, so I didn't do it.  But if
someone had, they'd probably be quite rich now.  There was a window
of about two years when spam was increasing rapidly but all the big
email services had terrible filters.  If someone had launched a
new, spam-free mail service, users would have flocked to it.&lt;br/&gt;&lt;br/&gt;Notice the pattern here?  From either direction we get to the same
spot.  If you start from successful startups, you find they often
behaved like nonprofits.  And if you start from ideas for nonprofits,
you find they'd often make good startups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Power&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;How wide is this territory?  Would all good nonprofits be good
companies?  Possibly not.  What makes Google so valuable is that
their users have money.  If you make people with money love you,
you can probably get some of it.  But could you also base a successful
startup on behaving like a nonprofit to people who don't have money?
Could you, for example, grow a successful startup out of curing an
unfashionable but deadly disease like malaria?&lt;br/&gt;&lt;br/&gt;I'm not sure, but I suspect that if you pushed this idea, you'd be
surprised how far it would go.  For example, people who apply to Y
Combinator don't generally have much money, and yet we can profit
by helping them, because with our help they could make money.  Maybe
the situation is similar with malaria.  Maybe an organization that
helped lift its weight off a country could benefit from the resulting
growth.&lt;br/&gt;&lt;br/&gt;I'm not proposing this is a serious idea.  I don't know anything
about malaria.  But I've been kicking ideas around long enough to
know when I come across a powerful one.&lt;br/&gt;&lt;br/&gt;One way to guess how far an idea extends is to ask yourself at what
point you'd bet against it.  The thought of betting against benevolence
is alarming in the same way as saying that something is technically
impossible.  You're just asking to be made a fool of, because these
are such powerful forces.  &lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/good.html#f2n"&gt;&lt;font color="#999999"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;For example, initially I thought maybe this principle only applied
to Internet startups.  Obviously it worked for Google, but what
about Microsoft?  Surely Microsoft isn't benevolent?  But when I
think back to the beginning, they were.  Compared to IBM they were
like Robin Hood.  When IBM introduced the PC, they thought they
were going to make money selling hardware at high prices.  But by
gaining control of the PC standard, Microsoft opened up the market
to any manufacturer.  Hardware prices plummeted, and lots of people
got to have computers who couldn't otherwise have afforded them.
It's the sort of thing you'd expect Google to do.&lt;br/&gt;&lt;br/&gt;Microsoft isn't so benevolent now.  Now when one thinks of what
Microsoft does to users, all the verbs that come to mind begin with
F.  &lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/good.html#f3n"&gt;&lt;font color="#999999"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt; And yet it doesn't seem to pay.
Their stock price has been flat for years.  Back when they were
Robin Hood, their stock price rose like Google's.  Could there be
a connection?&lt;br/&gt;&lt;br/&gt;You can see how there would be.  When you're small, you can't bully
customers, so you have to charm them.  Whereas when you're big you
can maltreat them at will, and you tend to, because it's easier
than satisfying them.  You grow big by being nice, but you can stay
big by being mean.&lt;br/&gt;&lt;br/&gt;You get away with it till the underlying conditions change, and
then all your victims escape.  So "Don't be evil" may be the most
valuable thing Paul Buchheit made for Google, because it may turn
out to be an elixir of corporate youth.  I'm sure they find it
constraining, but think how valuable it will be if it saves them
from lapsing into the fatal laziness that afflicted Microsoft and
IBM.&lt;br/&gt;&lt;br/&gt;The curious thing is, this elixir is freely available to any other
company.  Anyone can adopt "Don't be evil."  The catch is that
people will hold you to it.  So I don't think you're going to see
record labels or tobacco companies using this discovery.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Morale&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;There's a lot of external evidence that benevolence works.  But how
does it work?  One advantage of investing in a large number of
startups is that you get a lot of data about how they work.  From
what we've seen, being good seems to help startups in three ways:
it improves their morale, it makes other people want to help them,
and above all, it helps them be decisive.&lt;br/&gt;&lt;br/&gt;Morale is tremendously important to a startup—so important
that morale alone is almost enough to determine success.  Startups
are often described as emotional roller-coasters. One minute you're
going to take over the world, and the next you're doomed.  The
problem with feeling you're doomed is not just that it makes you
unhappy, but that it makes you &lt;i&gt;stop working&lt;/i&gt;.  So the downhills
of the roller-coaster are more of a self fulfilling prophecy than
the uphills.  If feeling you're going to succeed makes you work
harder, that probably improves your chances of succeeding, but if
feeling you're going to fail makes you stop working, that practically
guarantees you'll fail.&lt;br/&gt;&lt;br/&gt;Here's where benevolence comes in.  If you feel you're really helping
people, you'll keep working even when it seems like your startup
is doomed.  Most of us have some amount of natural benevolence.
The mere fact that someone needs you makes you want to help them.
So if you start the kind of startup where users come back each day,
you've basically built yourself a giant tamagotchi.  You've made
something you need to take care of.&lt;br/&gt;&lt;br/&gt;Blogger is a famous example of a startup that went through really
low lows and survived.  At one point they ran out of money and
everyone left. Evan Williams came in to work the next day, and there
was no one but him.  What kept him going?  Partly that users needed
him.  He was hosting thousands of people's blogs. He couldn't just
let the site die.&lt;br/&gt;&lt;br/&gt;There are many advantages of launching quickly, but the most important
may be that once you have users, the tamagotchi effect kicks in.
Once you have users to take care of, you're forced to figure out
what will make them happy, and that's actually very valuable
information.&lt;br/&gt;&lt;br/&gt;The added confidence that comes from trying to help people can
also help you with investors. One of the founders of 
&lt;a href="http://chatterous.com"&gt;Chatterous&lt;/a&gt; told 
me recently that he and his cofounder had decided that this service
was something the world needed, so they were going to keep working
on it no matter what, even if they had to move back to Canada and live
in their parents' basements.&lt;br/&gt;&lt;br/&gt;Once they realized this, they stopped caring so much what investors thought
about them.  They still met with them, but they weren't going to
die if they didn't get their money.  And you know what?  The investors
got a lot more interested.  They could sense that the Chatterouses
were going to do this startup with or without them.&lt;br/&gt;&lt;br/&gt;If you're really committed and your startup is cheap to run, you
become very hard to kill.  And practically all startups, even the
most successful, come close to death at some point.  So if doing
good for people gives you a sense of mission that makes you harder
to kill, that alone more than compensates for whatever you lose by
not choosing a more selfish project.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Help&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Another advantage of being good is that it makes other people want
to help you.  This too seems to be an inborn trait in humans.&lt;br/&gt;&lt;br/&gt;One of the startups we've funded, &lt;a href="http://octopart.com"&gt;Octopart&lt;/a&gt;, is currently locked in
a classic battle of good versus evil.  They're a search site for
industrial components.  A lot of people need to search for components,
and before Octopart there was no good way to do it.  That, it turned
out, was no coincidence.&lt;br/&gt;&lt;br/&gt;Octopart built the right way to search for components.  Users like
it and they've been growing rapidly.  And yet for most of Octopart's
life, the biggest distributor, Digi-Key, has been trying to force
them take their prices off the site.  Octopart is sending them
customers for free, and yet Digi-Key is trying to make that traffic
stop.  Why?  Because their current business model depends on
overcharging people who have incomplete information about prices.
They don't want search to work.&lt;br/&gt;&lt;br/&gt;The Octoparts are the nicest guys in the world.  They dropped out
of the PhD program in physics at Berkeley to do this.  They just
wanted to fix a problem they encountered in their research.  Imagine
how much time you could save the world's engineers if they could
do searches online.  So when I hear that a big, evil company is
trying to stop them in order to keep search broken, it makes me
really want to help them. It makes me spend more time on the Octoparts
than I do with most of the other startups we've funded.  It just
made me spend several minutes telling you how great they are.  Why?
Because they're good guys and they're trying to help the world.&lt;br/&gt;&lt;br/&gt;If you're benevolent, people will rally around you: investors,
customers, other companies, and potential employees.  In the long
term the most important may be the potential employees.  I think
everyone knows now that 
&lt;a href="https://paulgraham.com/gh.html"&gt;good hackers&lt;/a&gt; are much better than mediocre
ones.  If you can attract the best hackers to work for you, as
Google has, you have a big advantage.  And the very best hackers
tend to be idealistic.  They're not desperate for a job.  They can
work wherever they want.  So most want to work on things that will
make the world better.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Compass&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;But the most important advantage of being good is that it acts as
a compass.  One of the hardest parts of doing a startup is that you
have so many choices.  There are just two or three of you, and a
thousand things you could do. How do you decide?&lt;br/&gt;&lt;br/&gt;Here's the answer: Do whatever's best for your users.  You can hold
onto this like a rope in a hurricane, and it will save you if
anything can.  Follow it and it will take you through everything
you need to do.&lt;br/&gt;&lt;br/&gt;It's even the answer to questions that seem unrelated, like how to
convince investors to give you money.  If you're a good salesman,
you could try to just talk them into it.  But the more reliable
route is to convince them through your users: if you make something
users love enough to tell their friends, you grow exponentially,
and that will convince any investor.&lt;br/&gt;&lt;br/&gt;Being good is a particularly useful strategy for making decisions
in complex situations because it's stateless.  It's like telling
the truth.  The trouble with lying is that you have to remember
everything you've said in the past to make sure you don't contradict
yourself.  If you tell the truth you don't have to remember anything,
and that's a really useful property in domains where things happen
fast.&lt;br/&gt;&lt;br/&gt;For example, Y Combinator has now invested in 80 startups, 57 of
which are still alive.  (The rest have died or merged or been
acquired.)  When you're trying to advise 57 startups, it turns out
you have to have a stateless algorithm.  You can't have ulterior
motives when you have 57 things going on at once, because you can't
remember them.  So our rule is just to do whatever's best for the
founders.  Not because we're particularly benevolent, but because
it's the only algorithm that works on that scale.&lt;br/&gt;&lt;br/&gt;When you write something telling people to be good, you seem to be
claiming to be good yourself.  So I want to say explicitly that I
am not a particularly good person.  When I was a kid I was firmly
in the camp of bad.  The way adults used the word good, it seemed
to be synonymous with quiet, so I grew up very suspicious of it.&lt;br/&gt;&lt;br/&gt;You know how there are some people whose names come up in conversation
and everyone says "He's &lt;i&gt;such&lt;/i&gt; a great guy?"  People never say
that about me.  The best I get is "he means well."  I am not claiming
to be good.  At best I speak good as a second language.&lt;br/&gt;&lt;br/&gt;So I'm not suggesting you be good in the usual sanctimonious way.
I'm suggesting it because it works.  It will work not just as a
statement of "values," but as a guide to strategy,
and even a design spec for software.  Don't just not be evil.  Be
good.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;] Fifty years ago
it would have seemed shocking for a public company not to pay
dividends.  Now many tech companies don't.  The markets seem to
have figured out how to value potential dividends.  Maybe that isn't
the last step in this evolution.  Maybe markets will eventually get
comfortable with potential earnings. (VCs already are, and at least
some of them consistently make money.)&lt;br/&gt;&lt;br/&gt;I realize this sounds like the stuff one used to hear about the
"new economy" during the Bubble.  Believe me, I was not drinking
that kool-aid at the time.  But I'm convinced there were some 
&lt;a href="https://paulgraham.com/bubble.html"&gt;good
ideas&lt;/a&gt; buried in Bubble thinking.  For example, it's ok to focus on
growth instead of profits—but only if the growth is genuine.
You can't be buying users; that's a pyramid scheme.   But a company
with rapid, genuine growth is valuable, and eventually markets learn
how to value valuable things.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;] The idea of starting
a company with benevolent aims is currently undervalued, because
the kind of people who currently make that their explicit goal don't
usually do a very good job.&lt;br/&gt;&lt;br/&gt;It's one of the standard career paths of trustafarians to start
some vaguely benevolent business.  The problem with most of them
is that they either have a bogus political agenda or are feebly
executed.  The trustafarians' ancestors didn't get rich by preserving
their traditional culture; maybe people in Bolivia don't want to
either.  And starting an organic farm, though it's at least
straightforwardly benevolent, doesn't help people on the scale that
Google does.&lt;br/&gt;&lt;br/&gt;Most explicitly benevolent projects don't hold themselves sufficiently
accountable.  They act as if having good intentions were enough to
guarantee good effects.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;] Users dislike their
new operating system so much that they're starting petitions to
save the old one.  And the old one was nothing special.  The hackers
within Microsoft must know in their hearts that if the company
really cared about users they'd just advise them to switch to OSX.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Trevor Blackwell, Paul Buchheit, Jessica Livingston,
and Robert Morris for reading drafts of this.&lt;br/&gt;&lt;br/&gt;&lt;!-- &lt;a href="http://omnisio.com/startupschool08/paul-graham-at-startup-school-08"&gt;Video of talk&lt;/a&gt; --&gt;&lt;br/&gt;&lt;br/&gt;&lt;br clear="all"/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//good.html</guid>
      <pubDate>Tue, 01 Apr 2008 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Relentlessly Resourceful</title>
      <link>https://paulgraham.com//relres.html</link>
      <description>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by&#13;
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.&#13;
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&#13;
March 2009&lt;br/&gt;&lt;br/&gt;A couple days ago I finally got being a good startup founder down&#13;
t&lt;/p&gt;&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by&#13;
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.&#13;
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&#13;
March 2009&lt;br/&gt;&lt;br/&gt;A couple days ago I finally got being a good startup founder down&#13;
to two words:  relentlessly resourceful.&lt;br&gt;&lt;br/&gt;Till then the best I'd managed was to get the opposite quality down&#13;
to one: hapless.  Most dictionaries say hapless means unlucky.  But&#13;
the dictionaries are not doing a very good job.  A team that outplays&#13;
its opponents but loses because of a bad decision by the referee&#13;
could be called unlucky, but not hapless.  Hapless implies passivity.&#13;
To be hapless is to be battered by circumstances — to let the world&#13;
have its way with you, instead of having your way with the world.&#13;
&lt;!--Unlucky is a bad synonym, because it emphasizes the role of chance&#13;
in bad outcomes.  Hapless overlaps more with the other component&#13;
of bad outcomes, the half that makes them deserved. --&gt;
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/relres.html#f1n"&gt;&lt;font color="#999999"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;Unfortunately there's no antonym of hapless, which makes it difficult&#13;
to tell founders what to aim for.  "Don't be hapless" is not much&#13;
of a rallying cry.&lt;br/&gt;&lt;br/&gt;It's not hard to express the quality we're looking for in metaphors.&#13;
The best is probably a running back.  A good running back is not&#13;
merely determined, but flexible as well.  They want to get downfield,&#13;
but they adapt their plans on the fly.&lt;br/&gt;&lt;br/&gt;Unfortunately this is just a metaphor, and not a useful one to most&#13;
people outside the US.   "Be like a running back" is no better than&#13;
"Don't be hapless."&lt;br/&gt;&lt;br/&gt;But finally I've figured out how to express this quality directly.&#13;
I was writing a talk for &#13;
&lt;a href="https://paulgraham.com/angelinvesting.html"&gt;investors&lt;/a&gt;, and I had to explain what to&#13;
look for in founders.  What would someone who was the opposite of&#13;
hapless be like?  They'd be relentlessly resourceful.  Not merely&#13;
relentless.  That's not enough to make things go your way except&#13;
in a few mostly uninteresting domains.  In any interesting domain,&#13;
the difficulties will be novel.  Which means you can't simply plow&#13;
through them, because you don't know initially how hard they are;&#13;
you don't know whether you're about to plow through a block of foam&#13;
or granite.  So you have to be resourceful. You have to keep&#13;
trying new things.&lt;br/&gt;&lt;br/&gt;Be relentlessly resourceful.&lt;br/&gt;&lt;br/&gt;That sounds right, but is it simply a description&#13;
of how to be successful in general?  I don't think so.  This isn't&#13;
the recipe for success in writing or painting, for example.  In&#13;
that kind of work the recipe is more to be actively curious.&#13;
Resourceful implies the obstacles are external, which they generally&#13;
are in startups. But in writing and painting they're mostly internal;&#13;
the obstacle is your own obtuseness.&#13;
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/relres.html#f2n"&gt;&lt;font color="#999999"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;There probably are other fields where "relentlessly resourceful"&#13;
is the recipe for success.  But though other fields may share it,&#13;
I think this is the best short description we'll find of what makes&#13;
a good startup founder.  I doubt it could be made more precise.&lt;br/&gt;&lt;br/&gt;Now that we know what we're looking for, that leads to other&#13;
questions.  For example, can this quality be taught?  After four&#13;
years of trying to teach it to people, I'd say that yes, surprisingly&#13;
often it can.  Not to everyone, but to many people. &#13;
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/relres.html#f3n"&gt;&lt;font color="#999999"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&#13;
Some&#13;
people are just constitutionally passive, but others have a latent&#13;
ability to be relentlessly resourceful that only needs to be brought&#13;
out.&lt;br/&gt;&lt;br/&gt;This is particularly true of young people who have till now always&#13;
been under the thumb of some kind of authority.  Being relentlessly&#13;
resourceful is definitely not the recipe for success in big companies,&#13;
or in most schools.  I don't even want to think what the recipe is&#13;
in big companies, but it is certainly longer and messier, involving&#13;
some combination of resourcefulness, obedience, and building&#13;
alliances.&lt;br/&gt;&lt;br/&gt;Identifying this quality also brings us closer to answering a&#13;
question people often wonder about: how many startups there could&#13;
be.  There is not, as some people seem to think, any economic upper&#13;
bound on this number.  There's no reason to believe there is any&#13;
limit on the amount of newly created wealth consumers can absorb,&#13;
any more than there is a limit on the number of theorems that can&#13;
be proven.  So probably the limiting factor on the number of startups&#13;
is the pool of potential founders.  Some people would make good&#13;
founders, and others wouldn't.  And now that we can say what makes&#13;
a good founder, we know how to put an upper bound on the size of&#13;
the pool.&lt;br/&gt;&lt;br/&gt;This test is also useful to individuals.  If you want to know whether&#13;
you're the right sort of person to start a startup, ask yourself&#13;
whether you're relentlessly resourceful.  And if you want to know&#13;
whether to recruit someone as a cofounder, ask if they are.&lt;br/&gt;&lt;br/&gt;You can even use it tactically.  If I were running a startup, this&#13;
would be the phrase I'd tape to the mirror.  "Make something people&#13;
want" is the destination, but "Be relentlessly resourceful" is how&#13;
you get there.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]&#13;
I think the reason the dictionaries are wrong is that the&#13;
meaning of the word has shifted.  No one writing a dictionary from&#13;
scratch today would say that hapless meant unlucky.  But a couple&#13;
hundred years ago they might have.  People were more at the mercy&#13;
of circumstances in the past, and as a result a lot of the words&#13;
we use for good and bad outcomes have origins in words about luck.&lt;br/&gt;&lt;br/&gt;When I was living in Italy, I was once trying to tell someone&#13;
that I hadn't had much success in doing something, but I couldn't&#13;
think of the Italian word for success.  I spent some time trying&#13;
to describe the word I meant.  Finally she said "Ah! Fortuna!"&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]&#13;
There are aspects of startups where the recipe is to be&#13;
actively curious.  There can be times when what you're doing is&#13;
almost pure discovery.  Unfortunately these times are a small&#13;
proportion of the whole.  On the other hand, they are in research&#13;
too.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]&#13;
I'd almost say to most people, but I realize (a) I have no&#13;
idea what most people are like, and (b) I'm pathologically optimistic&#13;
about people's ability to change.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Trevor Blackwell and Jessica Livingston for reading drafts&#13;
of this.&lt;br/&gt;&lt;br/&gt;&lt;/br&gt;&lt;/p&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//relres.html</guid>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The Top Idea in Your Mind</title>
      <link>https://paulgraham.com//top.html</link>
      <description>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
July 2010&lt;br/&gt;&lt;br/&gt;I realized recently that what one thinks about in the shower in the
morn&lt;/p&gt;&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;&lt;table cellspacing="0" width="100%"&gt;
&lt;tr&gt;&lt;td bgcolor="#ff9922"&gt;&lt;img height="15" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;font size="2"&gt;
&lt;b&gt;Want to start a startup?&lt;/b&gt;  Get funded by
&lt;a href="http://ycombinator.com/apply.html"&gt;Y Combinator&lt;/a&gt;.
&lt;/font&gt;
&lt;br/&gt;&lt;img height="5" src="http://www.virtumundo.com/images/spacer.gif" width="1"/&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
July 2010&lt;br/&gt;&lt;br/&gt;I realized recently that what one thinks about in the shower in the
morning is more important than I'd thought.  I knew it was a good
time to have ideas.  Now I'd go further: now I'd say it's hard to
do a really good job on anything you don't think about in the shower.&lt;br&gt;&lt;br/&gt;Everyone who's worked on difficult problems is probably familiar
with the phenomenon of working hard to figure something out, failing,
and then suddenly seeing the answer a bit later while doing something
else. There's a kind of thinking you do without trying to.  I'm
increasingly convinced this type of thinking is not merely helpful
in solving hard problems, but necessary.  The tricky part is, you
can only control it indirectly.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/top.html#f1n"&gt;&lt;font color="#999999"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;I think most people have one top idea in their mind at any given
time.  That's the idea their thoughts will drift toward when they're
allowed to drift freely.  And this idea will thus tend to get all
the benefit of that type of thinking, while others are starved of
it.  Which means it's a disaster to let the wrong idea become the
top one in your mind.&lt;br/&gt;&lt;br/&gt;What made this clear to me was having an idea I didn't want as the
top one in my mind for two long stretches.&lt;br/&gt;&lt;br/&gt;I'd noticed startups got way less done when they started raising
money, but it was not till we ourselves raised money that I understood
why.  The problem is not the actual time it takes to meet with
investors.  The problem is that once you start raising money, raising
money becomes the top idea in your mind.  That becomes what you
think about when you take a shower in the morning.  And that means
other questions aren't.&lt;br/&gt;&lt;br/&gt;I'd hated raising money when I was running Viaweb, but I'd forgotten
why I hated it so much.  When we raised money for Y Combinator, I
remembered.  Money matters are particularly likely to become the
top idea in your mind.  The reason is that they have to be.  It's
hard to get money.  It's not the sort of thing that happens by
default.  It's not going to happen unless you let it become the
thing you think about in the shower.  And then you'll make little
progress on anything else you'd rather be working on.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/top.html#f2n"&gt;&lt;font color="#999999"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;(I hear similar complaints from friends who are professors.  Professors
nowadays seem to have become professional fundraisers who do a
little research on the side.  It may be time to fix that.)&lt;br/&gt;&lt;br/&gt;The reason this struck me so forcibly is that for most of the
preceding 10 years I'd been able to think about what I wanted.  So
the contrast when I couldn't was sharp.  But I don't think this
problem is unique to me, because just about every startup I've seen
grinds to a halt when they start raising money  or &lt;a href="https://paulgraham.com/corpdev.html"&gt;&lt;font color="#000099"&gt;talking
to acquirers&lt;/font&gt;&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;You can't directly control where your thoughts drift.  If you're
controlling them, they're not drifting.  But you can control them
indirectly, by controlling what situations you let yourself get
into.  That has been the lesson for me: be careful what you let
become critical to you.  Try to get yourself into situations where
the most urgent problems are ones you want to think about.&lt;br/&gt;&lt;br/&gt;You don't have complete control, of course.  An emergency could
push other thoughts out of your head.  But barring emergencies you
have a good deal of indirect control over what becomes the top idea
in your mind.&lt;br/&gt;&lt;br/&gt;I've found there are two types of thoughts especially worth
avoiding  thoughts like the Nile Perch in the way they push
out more interesting ideas.  One I've already mentioned: thoughts
about money. Getting money is almost by definition an attention
sink.
The other is disputes.  These too are engaging in the
wrong way: they have the same velcro-like shape as genuinely
interesting ideas, but without the substance.  So avoid disputes
if you want to get real work done.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/top.html#f3n"&gt;&lt;font color="#999999"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;Even Newton fell into this trap.  After publishing his theory of
colors in 1672 he found himself distracted by disputes for years,
finally concluding that the only solution was to stop publishing:
&lt;blockquote&gt;
  I see I have made myself a slave to Philosophy, but if I get free
  of Mr Linus's business I will resolutely bid adew to it eternally,
  excepting what I do for my privat satisfaction or leave to come
  out after me.  For I see a man must either resolve to put out
  nothing new or become a slave to defend it.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/top.html#f4n"&gt;&lt;font color="#999999"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
&lt;/blockquote&gt;
Linus and his students at Liege were among the more tenacious
critics.  Newton's biographer Westfall seems to feel he was
overreacting:
&lt;blockquote&gt;
  Recall that at the time he wrote, Newton's "slavery" consisted
  of five replies to Liege, totalling fourteen printed pages, over
  the course of a year.
&lt;/blockquote&gt;
I'm more sympathetic to Newton. The problem was not the 14 pages,
but the pain of having this stupid controversy constantly reintroduced
as the top idea in a mind that wanted so eagerly to think about
other things.&lt;br/&gt;&lt;br/&gt;Turning the other cheek turns out to have selfish advantages.
Someone who does you an injury hurts you twice: first by the injury
itself, and second by taking up your time afterward thinking about
it.  If you learn to ignore injuries you can at least avoid the
second half.  I've found I can to some extent avoid thinking about
nasty things people have done to me by telling myself: this doesn't
deserve space in my head.  I'm always delighted to find I've forgotten
the details of disputes, because that means I hadn't been thinking
about them.  My wife thinks I'm more forgiving than she is, but my
motives are purely selfish.&lt;br/&gt;&lt;br/&gt;I suspect a lot of people aren't sure what's the top idea in their
mind at any given time.  I'm often mistaken about it.  I tend to
think it's the idea I'd want to be the top one, rather than the one
that is.  But it's easy to figure this out: just take a shower.
What topic do your thoughts keep returning to?  If it's not what
you want to be thinking about, you may want to change something.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]
No doubt there are already names for this type of thinking, but
I call it "ambient thought."&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
This was made particularly clear in our case, because neither
of the funds we raised was difficult, and yet in both cases the
process dragged on for months.  Moving large amounts of money around
is never something people treat casually.  The attention required
increases with the amount—maybe not linearly, but definitely
monotonically.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]
Corollary: Avoid becoming an administrator, or your job will
consist of dealing with money and disputes.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;]
Letter to Oldenburg, quoted in Westfall, Richard, &lt;i&gt;Life of
Isaac Newton&lt;/i&gt;, p. 107.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Sam Altman, Patrick Collison, Jessica Livingston,
and Robert Morris for reading drafts of this.&lt;br/&gt;&lt;br/&gt;&lt;/br&gt;&lt;/p&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//top.html</guid>
      <pubDate>Thu, 01 Jul 2010 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Defining Property</title>
      <link>https://paulgraham.com//property.html</link>
      <description>&lt;font face="verdana" size="2"&gt;March 2012&lt;br/&gt;&lt;br/&gt;As a child I read a book of stories about a famous judge in eighteenth
century Japan called Ooka Tadasuke.  One of the cases he decided
was brought by the owner of a food shop.  A poor student who could
afford only rice was eating his rice while enjoying the delicious
cooking smells coming from the food shop.  The owner wanted the
student to pay for the smells he was enjoying.&lt;br/&gt;&lt;br/&gt;The student was
stealing his smells!&lt;br/&gt;&lt;br/&gt;This story ofte&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;March 2012&lt;br/&gt;&lt;br/&gt;As a child I read a book of stories about a famous judge in eighteenth
century Japan called Ooka Tadasuke.  One of the cases he decided
was brought by the owner of a food shop.  A poor student who could
afford only rice was eating his rice while enjoying the delicious
cooking smells coming from the food shop.  The owner wanted the
student to pay for the smells he was enjoying.&lt;br/&gt;&lt;br/&gt;The student was
stealing his smells!&lt;br/&gt;&lt;br/&gt;This story often comes to mind when I hear the RIAA and MPAA accusing
people of stealing music and movies.&lt;br/&gt;&lt;br/&gt;It sounds ridiculous to us to treat smells as property.  But I can
imagine scenarios in which one could charge for smells.  Imagine
we were living on a moon base where we had to buy air by the
liter.  I could imagine air suppliers adding scents at an extra
charge.&lt;br/&gt;&lt;br/&gt;The reason it seems ridiculous to us to treat smells as property
is that it wouldn't work to.  It would work on a moon base, though.&lt;br/&gt;&lt;br/&gt;What counts as property depends on what works to treat as property.
And that not only can change, but has changed.  Humans may always
(for some definition of human and always) have treated small items
carried on one's person as property.  But hunter gatherers didn't
treat land, for example, as property in the way we do.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/property.html#f1n"&gt;&lt;font color="#999999"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The reason so many people think of property as having a single
unchanging definition is that its definition changes very slowly.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/property.html#f2n"&gt;&lt;font color="#999999"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
But we are in the midst of such a change now.  The record
labels and movie studios used to distribute what they made like air
shipped through tubes on a moon base.  But with the arrival of
networks, it's as if we've moved to a planet with a breathable
atmosphere.  Data moves like smells now.  And through a combination
of wishful thinking and short-term greed, the labels and studios
have put themselves in the position of the food shop owner, accusing
us all of stealing their smells.&lt;br/&gt;&lt;br/&gt;(The reason I say short-term greed is that the underlying problem
with the labels and studios is that the people who run them are
driven by bonuses rather than equity.  If they were driven by equity
they'd be looking for ways to take advantage of technological change
instead of fighting it.  But building new things takes too long.
Their bonuses depend on this year's revenues, and the best way to
increase those is to extract more money from stuff they do already.)&lt;br/&gt;&lt;br/&gt;So what does this mean?  Should people not be able to charge for
content?  There's not a single yes or no answer to that question.
People should be able to charge for content when it works to charge
for content.&lt;br/&gt;&lt;br/&gt;But by "works" I mean something more subtle than "when they can get
away with it."  I mean when people can charge for content without
warping society in order to do it.  After all, the companies selling
smells on the moon base could continue to sell them on the Earth,
if they lobbied successfully for laws requiring us all to continue
to breathe through tubes down here too, even though we no longer
needed to.&lt;br/&gt;&lt;br/&gt;The crazy legal measures that the labels and studios have been
taking have a lot of that flavor.  Newspapers and magazines are
just as screwed, but they are at least declining gracefully.  The
RIAA and MPAA would make us breathe through tubes if they could.&lt;br/&gt;&lt;br/&gt;Ultimately it comes down to common sense.  When you're abusing the
legal system by trying to use mass lawsuits against randomly chosen
people as a form of exemplary punishment, or lobbying for laws
that would break the Internet if they passed, that's ipso facto
evidence you're using a definition of property that doesn't work.&lt;br/&gt;&lt;br/&gt;This is where it's helpful to have working democracies and multiple
sovereign countries.  If the world had a single, autocratic government,
the labels and studios could buy laws making the definition of
property be whatever they wanted.  But fortunately there are still
some countries that are not copyright colonies of the US, and even
in the US, &lt;a href="http://tctechcrunch2011.files.wordpress.com/2012/01/congress-on-sopa-done.png"&gt;politicians&lt;/a&gt;
still seem to be afraid of actual voters, in sufficient numbers.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/property.html#f3n"&gt;&lt;font color="#999999"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The people running the US may not like it when voters or other
countries refuse to bend to their will, but ultimately it's in all
our interest that there's not a single point of attack for people
trying to warp the law to serve their own purposes.  Private property
is an extremely useful idea — arguably one of our greatest inventions.
So far, each new definition of it has brought us increasing material
wealth.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/property.html#f4n"&gt;&lt;font color="#999999"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
It seems reasonable to suppose the newest one will
too.  It would be a disaster if we all had to keep running an
obsolete version just because a few powerful people were too lazy
to upgrade.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]
If you want to learn more about hunter gatherers I strongly
recommend Elizabeth Marshall Thomas's &lt;a href="http://www.amazon.com/Harmless-People-Elizabeth-Marshall-Thomas/dp/0394427793"&gt;&lt;i&gt;The
Harmless People&lt;/i&gt;&lt;/a&gt; and &lt;a href="http://www.amazon.com/Old-Way-Story-First-People/dp/0374225524"&gt;&lt;i&gt;The
Old Way&lt;/i&gt;&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
Change in the definition of property is driven mostly by
technological progress, however, and since technological progress
is accelerating, so presumably will the rate of change in the
definition of property.  Which means it's all the more important
for societies to be able to respond gracefully to such changes,
because they will come at an ever increasing rate.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]
As far as I know, the term "copyright colony" was first used
by &lt;a href="http://torrentfreak.com/australia-us-copyright-colony-or-just-a-good-friend-120121/"&gt;Myles
Peterson&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;]
The state of technology isn't simply a function of
the definition of property.  They each constrain the other.  But
that being so, you can't mess with the definition of property without
affecting (and probably harming) the state of technology.  The
history of the USSR offers a vivid illustration of that.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Thanks&lt;/b&gt; to Sam Altman and Geoff Ralston for reading drafts
of this.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//property.html</guid>
      <pubDate>Thu, 01 Mar 2012 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>How to Be an Expert in a Changing World</title>
      <link>https://paulgraham.com//ecw.html</link>
      <description>&lt;font face="verdana" size="2"&gt;December 2014&lt;br/&gt;&lt;br/&gt;If the world were static, we could have monotonically increasing
confidence in our beliefs.  The more (and more varied) experience
a belief survived, the less likely it would be false.  Most people
implicitly believe something like this about their opinions.  And
they're justified in doing so with opinions about things that don't
change much, like human nature.  But you can't trust your opinions
in the same way about things that change, which &lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;December 2014&lt;br/&gt;&lt;br/&gt;If the world were static, we could have monotonically increasing
confidence in our beliefs.  The more (and more varied) experience
a belief survived, the less likely it would be false.  Most people
implicitly believe something like this about their opinions.  And
they're justified in doing so with opinions about things that don't
change much, like human nature.  But you can't trust your opinions
in the same way about things that change, which could include
practically everything else.&lt;br/&gt;&lt;br/&gt;When experts are wrong, it's often because they're experts on an
earlier version of the world.&lt;br/&gt;&lt;br/&gt;Is it possible to avoid that?  Can you protect yourself against
obsolete beliefs?  To some extent, yes. I spent almost a decade
investing in early stage startups, and curiously enough protecting
yourself against obsolete beliefs is exactly what you have to do
to succeed as a startup investor.  Most really good startup ideas
look like bad ideas at first, and many of those look bad specifically
because some change in the world just switched them from bad to
good.  I spent a lot of time learning to recognize such ideas, and
the techniques I used may be applicable to ideas in general.&lt;br/&gt;&lt;br/&gt;The first step is to have an explicit belief in change.  People who
fall victim to a monotonically increasing confidence in their
opinions are implicitly concluding the world is static.  If you
consciously remind yourself it isn't, you start to look for change.&lt;br/&gt;&lt;br/&gt;Where should one look for it?  Beyond the moderately useful
generalization that human nature doesn't change much, the unfortunate
fact is that change is hard to predict.  This is largely a tautology
but worth remembering all the same: change that matters usually
comes from an unforeseen quarter.&lt;br/&gt;&lt;br/&gt;So I don't even try to predict it.  When I get asked in interviews
to predict the future, I always have to struggle to come up with
something plausible-sounding on the fly, like a student who hasn't
prepared for an exam.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/ecw.html#f1n"&gt;&lt;font color="#999999"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
But it's not out of laziness that I haven't
prepared.  It seems to me that beliefs about the future are so
rarely correct that they usually aren't worth the extra rigidity
they impose, and that the best strategy is simply to be aggressively
open-minded.  Instead of trying to point yourself in the right
direction, admit you have no idea what the right direction is, and
try instead to be super sensitive to the winds of change.&lt;br/&gt;&lt;br/&gt;It's ok to have working hypotheses, even though they may constrain
you a bit, because they also motivate you.  It's exciting to chase
things and exciting to try to guess answers.  But you have to be
disciplined about not letting your hypotheses harden into anything
more.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/ecw.html#f2n"&gt;&lt;font color="#999999"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;I believe this passive m.o. works not just for evaluating new ideas
but also for having them.  The way to come up with new ideas is not
to try explicitly to, but to try to solve problems and simply not
discount weird hunches you have in the process.&lt;br/&gt;&lt;br/&gt;The winds of change originate in the unconscious minds of domain
experts.  If you're sufficiently expert in a field, any weird idea
or apparently irrelevant question that occurs to you is ipso facto
worth exploring. 
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/ecw.html#f3n"&gt;&lt;font color="#999999"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
 Within Y Combinator, when an idea is described
as crazy, it's a compliment—in fact, on average probably a
higher compliment than when an idea is described as good.&lt;br/&gt;&lt;br/&gt;Startup investors have extraordinary incentives for correcting
obsolete beliefs.  If they can realize before other investors that
some apparently unpromising startup isn't, they can make a huge
amount of money.  But the incentives are more than just financial.
Investors' opinions are explicitly tested: startups come to them
and they have to say yes or no, and then, fairly quickly, they learn
whether they guessed right.  The investors who say no to a Google
(and there were several) will remember it for the rest of their
lives.&lt;br/&gt;&lt;br/&gt;Anyone who must in some sense bet on ideas rather than merely
commenting on them has similar incentives.  Which means anyone who
wants such incentives can have them, by turning their comments into
bets: if you write about a topic in some fairly durable and public
form, you'll find you worry much more about getting things right
than most people would in a casual conversation.
&lt;font color="#999999"&gt;[&lt;a href="https://paulgraham.com/ecw.html#f4n"&gt;&lt;font color="#999999"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;Another trick I've found to protect myself against obsolete beliefs
is to focus initially on people rather than ideas. Though the nature
of future discoveries is hard to predict, I've found I can predict
quite well what sort of people will make them.  Good new ideas come
from earnest, energetic, independent-minded people.&lt;br/&gt;&lt;br/&gt;Betting on people over ideas saved me countless times as an investor.
We thought Airbnb was a bad idea, for example. But we could tell
the founders were earnest, energetic, and independent-minded.
(Indeed, almost pathologically so.)  So we suspended disbelief and
funded them.&lt;br/&gt;&lt;br/&gt;This too seems a technique that should be generally applicable.
Surround yourself with the sort of people new ideas come from.  If
you want to notice quickly when your beliefs become obsolete, you
can't do better than to be friends with the people whose discoveries
will make them so.&lt;br/&gt;&lt;br/&gt;It's hard enough already not to become the prisoner of your own
expertise, but it will only get harder, because change is accelerating.
That's not a recent trend; change has been accelerating since the
paleolithic era.  Ideas beget ideas.  I don't expect that to change.
But I could be wrong.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]
My usual trick is to talk about aspects of the present that
most people haven't noticed yet.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
Especially if they become well enough known that people start
to identify them with you.  You have to be extra skeptical about
things you want to believe, and once a hypothesis starts to be
identified with you, it will almost certainly start to be in that
category.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]
In practice "sufficiently expert" doesn't require one to be
recognized as an expert—which is a trailing indicator in any
case.  In many fields a year of focused work plus caring a lot would
be enough.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;]
Though they are public and persist indefinitely, comments on
e.g. forums and places like Twitter seem empirically to work like
casual conversation.  The threshold may be whether what you write
has a title.&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Thanks&lt;/b&gt; to Sam Altman, Patrick Collison, and Robert Morris
for reading drafts of this.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//ecw.html</guid>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Charisma / Power</title>
      <link>https://paulgraham.com//pow.html</link>
      <description>&lt;font face="verdana" size="2"&gt;January 2017&lt;br/&gt;&lt;br/&gt;People who are powerful but uncharismatic will tend to be disliked.
Their power makes them a target for criticism that they don't have
the charisma to disarm. That was Hillary Clinton's problem. It also
tends to be a problem for any CEO who is more of a builder than a
schmoozer. And yet the builder-type CEO is (like Hillary) probably
the best person for the job.&lt;br/&gt;&lt;br/&gt;I don't think there is any solution to this problem. It's human
nature. Th&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;January 2017&lt;br/&gt;&lt;br/&gt;People who are powerful but uncharismatic will tend to be disliked.
Their power makes them a target for criticism that they don't have
the charisma to disarm. That was Hillary Clinton's problem. It also
tends to be a problem for any CEO who is more of a builder than a
schmoozer. And yet the builder-type CEO is (like Hillary) probably
the best person for the job.&lt;br/&gt;&lt;br/&gt;I don't think there is any solution to this problem. It's human
nature. The best we can do is to recognize that it's happening, and
to understand that being a magnet for criticism is sometimes a sign
not that someone is the wrong person for a job, but that they're
the right one.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//pow.html</guid>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The Airbnbs</title>
      <link>https://paulgraham.com//airbnbs.html</link>
      <description>&lt;font face="verdana" size="2"&gt;December 2020&lt;br/&gt;&lt;br/&gt;To celebrate Airbnb's IPO and to help future founders, I thought
it might be useful to explain what was special about Airbnb.&lt;br/&gt;&lt;br/&gt;What was special about the Airbnbs was how earnest they were. They
did nothing half-way, and we could sense this even in the interview.
Sometimes after we interviewed a startup we'd be uncertain what to
do, and have to talk it over. Other times we'd just look at one
another and smile. The Airbnbs' interview was&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;December 2020&lt;br/&gt;&lt;br/&gt;To celebrate Airbnb's IPO and to help future founders, I thought
it might be useful to explain what was special about Airbnb.&lt;br/&gt;&lt;br/&gt;What was special about the Airbnbs was how earnest they were. They
did nothing half-way, and we could sense this even in the interview.
Sometimes after we interviewed a startup we'd be uncertain what to
do, and have to talk it over. Other times we'd just look at one
another and smile. The Airbnbs' interview was that kind. We didn't
even like the idea that much. Nor did users, at that stage; they
had no growth. But the founders seemed so full of energy that it
was impossible not to like them.&lt;br/&gt;&lt;br/&gt;That first impression was not misleading. During the batch our
nickname for Brian Chesky was The Tasmanian Devil, because like the
&lt;a href="http://www.youtube.com/watch?v=StG2u5qfFRg&amp;amp;t=2m27s"&gt;cartoon
character&lt;/a&gt; he seemed a tornado of energy. All three of them were
like that. No one ever worked harder during YC than the Airbnbs
did. When you talked to the Airbnbs, they took notes. If you suggested
an idea to them in office hours, the next time you talked to them
they'd not only have implemented it, but also implemented two new
ideas they had in the process. "They probably have the best attitude
of any startup we've funded" I wrote to Mike Arrington during the
batch.&lt;br/&gt;&lt;br/&gt;They're still like that. Jessica and I had dinner with Brian in the
summer of 2018, just the three of us. By this point the company is
ten years old. He took a page of notes about ideas for new things
Airbnb could do.&lt;br/&gt;&lt;br/&gt;What we didn't realize when we first met Brian and Joe and Nate was
that Airbnb was on its last legs. After working on the company for
a year and getting no growth, they'd agreed to give it one last
shot. They'd try this Y Combinator thing, and if the company still
didn't take off, they'd give up.&lt;br/&gt;&lt;br/&gt;Any normal person would have given up already. They'd been funding
the company with credit cards. They had a &lt;i&gt;binder&lt;/i&gt; full of
credit cards they'd maxed out. Investors didn't think much of the
idea. One investor they met in a cafe walked out in the middle of
meeting with them. They thought he was going to the bathroom, but
he never came back. "He didn't even finish his smoothie," Brian
said. And now, in late 2008, it was the worst recession in decades.
The stock market was in free fall and wouldn't hit bottom for another
four months.&lt;br/&gt;&lt;br/&gt;Why hadn't they given up? This is a useful question to ask. People,
like matter, reveal their nature under extreme conditions. One thing
that's clear is that they weren't doing this just for the money.
As a money-making scheme, this was pretty lousy: a year's work and
all they had to show for it was a binder full of maxed-out credit
cards. So why were they still working on this startup? Because of
the experience they'd had as the first hosts.&lt;br/&gt;&lt;br/&gt;When they first tried renting out airbeds on their floor during a
design convention, all they were hoping for was to make enough money
to pay their rent that month. But something surprising happened:
they enjoyed having those first three guests staying with them. And
the guests enjoyed it too. Both they and the guests had done it
because they were in a sense forced to, and yet they'd all had a
great experience. Clearly there was something new here: for hosts,
a new way to make money that had literally been right under their
noses, and for guests, a new way to travel that was in many ways
better than hotels.&lt;br/&gt;&lt;br/&gt;That experience was why the Airbnbs didn't give up. They knew they'd
discovered something. They'd seen a glimpse of the future, and they
couldn't let it go.&lt;br/&gt;&lt;br/&gt;They knew that once people tried staying in what is now called "an
airbnb," they would also realize that this was the future. But only
if they tried it, and they weren't. That was the problem during Y
Combinator: to get growth started.&lt;br/&gt;&lt;br/&gt;Airbnb's goal during YC was to reach what we call &lt;a href="http://paulgraham.com/ramenprofitable.html"&gt;ramen profitability&lt;/a&gt;,
which means making enough money that the company can pay the founders'
living expenses, if they live on ramen noodles. Ramen profitability
is not, obviously, the end goal of any startup, but it's the most
important threshold on the way, because this is the point where
you're airborne. This is the point where you no longer need investors'
permission to continue existing. For the Airbnbs, ramen profitability
was $4000 a month: $3500 for rent, and $500 for food. They taped
this goal to the mirror in the bathroom of their apartment.&lt;br/&gt;&lt;br/&gt;The way to get growth started in something like Airbnb is to focus
on the hottest subset of the market. If you can get growth started
there, it will spread to the rest. When I asked the Airbnbs where
there was most demand, they knew from searches: New York City. So
they focused on New York. They went there &lt;a href="http://paulgraham.com/ds.html"&gt;in person&lt;/a&gt; to visit their
hosts and help them make their listings more attractive. A big part
of that was better pictures. So Joe and Brian rented a professional
camera and took pictures of the hosts' places themselves.&lt;br/&gt;&lt;br/&gt;This didn't just make the listings better. It also taught them about
their hosts. When they came back from their first trip to New York,
I asked what they'd noticed about hosts that surprised them, and
they said the biggest surprise was how many of the hosts were in
the same position they'd been in: they needed this money to pay
their rent. This was, remember, the worst recession in decades, and
it had hit New York first. It definitely added to the Airbnbs' sense
of mission to feel that people needed them.&lt;br/&gt;&lt;br/&gt;In late January 2009, about three weeks into Y Combinator, their
efforts started to show results, and their numbers crept upward.
But it was hard to say for sure whether it was growth or just random
fluctuation. By February it was clear that it was real growth. They
made $460 in fees in the first week of February, $897 in the second,
and $1428 in the third. That was it: they were airborne. Brian sent
me an email on February 22 announcing that they were ramen profitable
and giving the last three weeks' numbers.&lt;br/&gt;&lt;br/&gt;"I assume you know what you've now set yourself up for next week,"
I responded.&lt;br/&gt;&lt;br/&gt;Brian's reply was seven words: "We are not going to slow down."&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//airbnbs.html</guid>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Heresy</title>
      <link>https://paulgraham.com//heresy.html</link>
      <description>&lt;font face="verdana" size="2"&gt;April 2022&lt;br/&gt;&lt;br/&gt;One of the most surprising things I've witnessed in my lifetime is
the rebirth of the concept of heresy.&lt;br/&gt;&lt;br/&gt;In his excellent biography of Newton, Richard Westfall writes about the
moment when he was elected a fellow of Trinity College:
&lt;blockquote&gt;
  Supported comfortably, Newton was free to devote himself wholly
  to whatever he chose. To remain on, he had only to avoid the three
  unforgivable sins: crime, heresy, and marriage.
  &amp;lt;font co&lt;/blockquote&gt;&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;April 2022&lt;br/&gt;&lt;br/&gt;One of the most surprising things I've witnessed in my lifetime is
the rebirth of the concept of heresy.&lt;br/&gt;&lt;br/&gt;In his excellent biography of Newton, Richard Westfall writes about the
moment when he was elected a fellow of Trinity College:
&lt;blockquote&gt;
  Supported comfortably, Newton was free to devote himself wholly
  to whatever he chose. To remain on, he had only to avoid the three
  unforgivable sins: crime, heresy, and marriage.
  &lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f1n"&gt;&lt;font color="#dddddd"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;
&lt;/blockquote&gt;
The first time I read that, in the 1990s, it sounded amusingly
medieval. How strange, to have to avoid committing heresy. But when
I reread it 20 years later it sounded like a description of
contemporary employment.&lt;br/&gt;&lt;br/&gt;There are an ever-increasing number of opinions you can be fired
for. Those doing the firing don't use the word "heresy" to describe
them, but structurally they're equivalent. Structurally there are
two distinctive things about heresy: (1) that it takes priority
over the question of truth or falsity, and (2) that it outweighs
everything else the speaker has done.&lt;br/&gt;&lt;br/&gt;For example, when someone calls a statement "x-ist," they're also
implicitly saying that this is the end of the discussion. They do
not, having said this, go on to consider whether the statement is
true or not. Using such labels is the conversational equivalent of
signalling an exception. That's one of the reasons they're used:
to end a discussion.&lt;br/&gt;&lt;br/&gt;If you find yourself talking to someone who uses these labels a
lot, it might be worthwhile to ask them explicitly if they believe
any babies are being thrown out with the bathwater. Can a statement
be x-ist, for whatever value of x, and also true? If the answer is
yes, then they're admitting to banning the truth. That's obvious
enough that I'd guess most would answer no. But if they answer no,
it's easy to show that they're mistaken, and that in practice such
labels are applied to statements regardless of their truth or
falsity.&lt;br/&gt;&lt;br/&gt;The clearest evidence of this is that whether a statement is
considered x-ist often depends on who said it. Truth doesn't work
that way. The same statement can't be true when one person says it,
but x-ist, and therefore false, when another person does.
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f2n"&gt;&lt;font color="#dddddd"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The other distinctive thing about heresies, compared to ordinary
opinions, is that the public expression of them outweighs everything
else the speaker has done. In ordinary matters, like knowledge of
history, or taste in music, you're judged by the average of your
opinions. A heresy is qualitatively different. It's like dropping
a chunk of uranium onto the scale.&lt;br/&gt;&lt;br/&gt;Back in the day (and still, in some places) the punishment for
heresy was death. You could have led a life of exemplary goodness,
but if you publicly doubted, say, the divinity of Christ, you were
going to burn. Nowadays, in civilized countries, heretics only get
fired in the metaphorical sense, by losing their jobs. But the
structure of the situation is the same: the heresy
outweighs everything else. You could have spent the last ten years
saving children's lives, but if you express certain opinions, you're
automatically fired.&lt;br/&gt;&lt;br/&gt;It's much the same as if you committed a crime. No matter how
virtuously you've lived, if you commit a crime, you must still
suffer the penalty of the law. Having lived a previously blameless
life might mitigate the punishment, but it doesn't affect whether
you're guilty or not.&lt;br/&gt;&lt;br/&gt;A heresy is an opinion whose expression is treated like a crime —
one that makes some people feel not merely that you're mistaken,
but that you should be punished. Indeed, their desire to see you
punished is often stronger than it would be if you'd committed an
actual crime. There are many on the far left who believe
strongly in the reintegration of felons (as I do myself), and yet
seem to feel that anyone guilty of certain heresies should never
work again.&lt;br/&gt;&lt;br/&gt;There are always some heresies — some opinions you'd be punished
for expressing. But there are a lot more now than there were a few
decades ago, and even those who are happy about this would have to
agree that it's so.&lt;br/&gt;&lt;br/&gt;Why? Why has this antiquated-sounding religious concept come back
in a secular form? And why now?&lt;br/&gt;&lt;br/&gt;You need two ingredients for a wave of intolerance: intolerant
people, and an ideology to guide them. The intolerant people are
always there. They exist in every sufficiently large society. That's
why waves of intolerance can arise so suddenly; all they need is
something to set them off.&lt;br/&gt;&lt;br/&gt;I've already written an &lt;a href="https://paulgraham.com/conformism.html"&gt;&lt;u&gt;essay&lt;/u&gt;&lt;/a&gt; 
describing the aggressively
conventional-minded. The short version is that people can be
classified in two dimensions according to (1) how independent- or
conventional-minded they are, and (2) how aggressive they are about
it. The aggressively conventional-minded are the enforcers of
orthodoxy.&lt;br/&gt;&lt;br/&gt;Normally they're only locally visible. They're the grumpy, censorious
people in a group — the ones who are always first to complain when
something violates the current rules of propriety. But occasionally,
like a vector field whose elements become aligned, a large number
of aggressively conventional-minded people unite behind some ideology
all at once. Then they become much more of a problem, because a mob
dynamic takes over, where the enthusiasm of each participant is
increased by the enthusiasm of the others.&lt;br/&gt;&lt;br/&gt;The most notorious 20th century case may have been the Cultural
Revolution. Though initiated by Mao to undermine his rivals, the
Cultural Revolution was otherwise mostly a grass-roots phenomenon.
Mao said in essence: There are heretics among us. Seek them out and
punish them. And that's all the aggressively conventional-minded
ever need to hear. They went at it with the delight of dogs chasing
squirrels.&lt;br/&gt;&lt;br/&gt;To unite the conventional-minded, an ideology must have many of the
features of a religion. In particular it must have strict and
arbitrary rules that adherents can demonstrate their 
&lt;a href="https://www.youtube.com/watch?v=qaHLd8de6nM"&gt;&lt;u&gt;purity&lt;/u&gt;&lt;/a&gt; 
by obeying, and its adherents must believe that anyone who obeys these
rules is ipso facto morally superior to anyone who doesn't.
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f3n"&gt;&lt;font color="#dddddd"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;In the late 1980s a new ideology of this type appeared in US
universities. It had a very strong component of moral purity, and
the aggressively conventional-minded seized upon it with their usual
eagerness — all the more because the relaxation of social norms
in the preceding decades meant there had been less and less to
forbid. The resulting wave of intolerance has been eerily similar
in form to the Cultural Revolution, though fortunately much smaller
in magnitude.
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f4n"&gt;&lt;font color="#dddddd"&gt;4&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;I've deliberately avoided mentioning any specific heresies here.
Partly because one of the universal tactics of heretic hunters, now
as in the past, is to accuse those who disapprove of the way in
which they suppress ideas of being heretics themselves. Indeed,
this tactic is so consistent that you could use it as a way of
detecting witch hunts in any era.&lt;br/&gt;&lt;br/&gt;And that's the second reason I've avoided mentioning any specific
heresies. I want this essay to work in the future, not just now.
And unfortunately it probably will. The aggressively conventional-minded
will always be among us, looking for things to forbid. All they
need is an ideology to tell them what. And it's unlikely the current
one will be the last.&lt;br/&gt;&lt;br/&gt;There are aggressively conventional-minded people on both the right
and the left. The reason the current wave of intolerance comes from
the left is simply because the new unifying ideology happened to
come from the left. The next one might come from the right. Imagine
what that would be like.&lt;br/&gt;&lt;br/&gt;Fortunately in western countries the suppression of heresies is
nothing like as bad as it used to be. Though the window of opinions
you can express publicly has narrowed in the last decade, it's still
much wider than it was a few hundred years ago. The problem is the
derivative. Up till about 1985 the window had been growing ever
wider. Anyone looking into the future in 1985 would have expected
freedom of expression to continue to increase. Instead it has
decreased.
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f5n"&gt;&lt;font color="#dddddd"&gt;5&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The situation is similar to what's happened with infectious diseases
like measles. Anyone looking into the future in 2010 would have
expected the number of measles cases in the US to continue to
decrease. Instead, thanks to anti-vaxxers, it has increased. The
absolute number is still not that high. The problem is the derivative.
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/heresy.html#f6n"&gt;&lt;font color="#dddddd"&gt;6&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;In both cases it's hard to know how much to worry. Is it really
dangerous to society as a whole if a handful of extremists refuse
to get their kids vaccinated, or shout down speakers at universities?
The point to start worrying is presumably when their efforts start
to spill over into everyone else's lives. And in both cases that
does seem to be happening.&lt;br/&gt;&lt;br/&gt;So it's probably worth spending some amount of effort on pushing
back to keep open the window of free expression. My hope is that
this essay will help form social antibodies not just against current
efforts to suppress ideas, but against the concept of heresy in
general. That's the real prize. How do you disable the concept of
heresy? Since the Enlightenment, western societies have discovered
many techniques for doing that, but there are surely more to be
discovered.&lt;br/&gt;&lt;br/&gt;Overall I'm optimistic. Though the trend in freedom of expression
has been bad over the last decade, it's been good over the longer
term. And there are signs that the current wave of intolerance is
peaking. Independent-minded people I talk to seem more confident
than they did a few years ago. On the other side, even some of the
&lt;a href="https://www.nytimes.com/2022/03/18/opinion/cancel-culture-free-speech-poll.html"&gt;&lt;u&gt;leaders&lt;/u&gt;&lt;/a&gt; are starting to wonder if things have 
gone too far. And popular culture among the young has already moved on. 
All we have
to do is keep pushing back, and the wave collapses. And then we'll
be net ahead, because as well as having defeated this wave, we'll
also have developed new tactics for resisting the next one.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;] 
Or more accurately, biographies of Newton, since Westfall wrote
two: a long version called &lt;i&gt;Never at Rest&lt;/i&gt;, and a shorter one called
&lt;i&gt;The Life of Isaac Newton&lt;/i&gt;. Both are great. The short version moves
faster, but the long one is full of interesting and often very funny
details. This passage is the same in both.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]
Another more subtle but equally damning bit of evidence is
that claims of x-ism are never qualified. You never hear anyone say
that a statement is "probably x-ist" or "almost certainly y-ist."
If claims of x-ism were actually claims about truth, you'd expect
to see "probably" in front of "x-ist" as often as you see it in
front of "fallacious."&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;] 
The rules must be strict, but they need not be demanding. So
the most effective type of rules are those about superficial matters,
like doctrinal minutiae, or the precise words adherents must use.
Such rules can be made extremely complicated, and yet don't repel
potential converts by requiring significant sacrifice.&lt;br/&gt;&lt;br/&gt;The superficial demands of orthodoxy make it an inexpensive substitute
for virtue. And that in turn is one of the reasons orthodoxy is so
attractive to bad people. You could be a horrible person, and yet
as long as you're orthodox, you're better than everyone who isn't.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f4n"&gt;&lt;font color="#000000"&gt;4&lt;/font&gt;&lt;/a&gt;] 
Arguably there were two. The first had died down somewhat by
2000, but was followed by a second in the 2010s, probably caused
by social media.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f5n"&gt;&lt;font color="#000000"&gt;5&lt;/font&gt;&lt;/a&gt;] 
Fortunately most of those trying to suppress ideas today still
respect Enlightenment principles enough to pay lip service to them.
They know they're not supposed to ban ideas per se, so they have
to recast the ideas as causing "harm," which sounds like something
that can be banned. The more extreme try to claim speech itself is
violence, or even that silence is. But strange as it may sound,
such gymnastics are a good sign. We'll know we're really in trouble
when they stop bothering to invent pretenses for banning ideas —
when, like the medieval church, they say "Damn right we're banning
ideas, and in fact here's a list of them."&lt;br/&gt;&lt;br/&gt;[&lt;a name="f6n"&gt;&lt;font color="#000000"&gt;6&lt;/font&gt;&lt;/a&gt;] 
People only have the luxury of ignoring the medical consensus
about vaccines because vaccines have worked so well. If we didn't
have any vaccines at all, the mortality rate would be so high that
most current anti-vaxxers would be begging for them. And the situation
with freedom of expression is similar. It's only because they live
in a world created by the Enlightenment that kids from the suburbs
can play at banning ideas.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;font color="888888"&gt;&lt;b&gt;Thanks&lt;/b&gt; to Marc Andreessen, Chris Best, 
Trevor Blackwell, Nicholas
Christakis, Daniel Gackle, Jonathan Haidt, Claire Lehmann, Jessica
Livingston, Greg Lukianoff, Robert Morris, and Garry Tan for reading
drafts of this.&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//heresy.html</guid>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Good Writing</title>
      <link>https://paulgraham.com//goodwriting.html</link>
      <description>&lt;font face="verdana" size="2"&gt;May 2025&lt;br/&gt;&lt;br/&gt;There are two senses in which writing can be good: it can&#13;
sound good, and the ideas can be right. It can have nice,&#13;
flowing sentences, and it can draw correct conclusions&#13;
about important things. It might seem as if these two&#13;
kinds of good would be unrelated, like the speed of a car&#13;
and the color it's painted. And yet I don't think they&#13;
are. I think writing that sounds good is more likely to&#13;
be right.&lt;br/&gt;&lt;br/&gt;So here we have the most excitin&lt;/font&gt;</description>
      <content:encoded>&lt;font face="verdana" size="2"&gt;May 2025&lt;br/&gt;&lt;br/&gt;There are two senses in which writing can be good: it can&#13;
sound good, and the ideas can be right. It can have nice,&#13;
flowing sentences, and it can draw correct conclusions&#13;
about important things. It might seem as if these two&#13;
kinds of good would be unrelated, like the speed of a car&#13;
and the color it's painted. And yet I don't think they&#13;
are. I think writing that sounds good is more likely to&#13;
be right.&lt;br/&gt;&lt;br/&gt;So here we have the most exciting kind of idea: one that&#13;
seems both preposterous and true. Let's examine it. How&#13;
can this possibly be true?&lt;br/&gt;&lt;br/&gt;I know it's true from writing. You can't simultaneously&#13;
optimize two unrelated things; when you push one far&#13;
enough, you always end up sacrificing the other. And yet&#13;
no matter how hard I push, I never find myself having to&#13;
choose between the sentence that sounds best and the one&#13;
that expresses an idea best. If I did, it would be&#13;
frivolous to care how sentences sound. But in practice it&#13;
feels the opposite of frivolous. Fixing sentences that&#13;
sound bad seems to help get the ideas right.&#13;
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/goodwriting.html#f1n"&gt;&lt;font color="#dddddd"&gt;1&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;By right I mean more than just true. Getting the ideas&#13;
right means developing them well — drawing the&#13;
conclusions that matter most, and exploring each one to&#13;
the right level of detail. So getting the ideas right is&#13;
not just a matter of saying true things, but saying the&#13;
right true things.&lt;br/&gt;&lt;br/&gt;How could trying to make sentences sound good help you do&#13;
that? The clue to the answer is something I noticed 30&#13;
years ago when I was doing the layout for my first book.&#13;
Sometimes when you're laying out text you have bad luck.&#13;
For example, you get a section that runs one line longer&#13;
than the page. I don't know what ordinary typesetters do&#13;
in this situation, but what I did was rewrite the section&#13;
to make it a line shorter. You'd expect such an arbitrary&#13;
constraint to make the writing worse. But I found, to my&#13;
surprise, that it never did. I always ended up with&#13;
something I liked better.&lt;br/&gt;&lt;br/&gt;I don't think this was because my writing was especially&#13;
careless. I think if you pointed to a random paragraph in&#13;
anything written by anyone and told them to make it&#13;
slightly shorter (or longer), they'd probably be able to&#13;
come up with something better.&lt;br/&gt;&lt;br/&gt;The best analogy for this phenomenon is when you shake a&#13;
bin full of different objects. The shakes are arbitrary&#13;
motions. Or more precisely, they're not calculated to&#13;
make any two specific objects fit more closely together.&#13;
And yet repeated shaking inevitably makes the objects&#13;
discover brilliantly clever ways of packing themselves.&#13;
Gravity won't let them become less tightly packed, so any&#13;
change has to be a change for the better.&#13;
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/goodwriting.html#f2n"&gt;&lt;font color="#dddddd"&gt;2&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;So it is with writing. If you have to rewrite an awkward&#13;
passage, you'll never do it in a way that makes it &lt;i&gt;less&lt;/i&gt;&#13;
true. You couldn't bear it, any more than gravity could&#13;
bear things floating upward. So any change in the ideas&#13;
has to be a change for the better.&lt;br/&gt;&lt;br/&gt;It's obvious once you think about it. Writing that sounds&#13;
good is more likely to be right for the same reason that&#13;
a well-shaken bin is more likely to be tightly packed.&#13;
But there's something else going on as well. Sounding&#13;
good isn't just a random external force that leaves the&#13;
ideas in an essay better off. It actually helps you to&#13;
get them right.&lt;br/&gt;&lt;br/&gt;The reason is that it makes the essay easier to read.&#13;
It's less work to read writing that flows well. How does&#13;
that help the writer? &lt;i&gt;Because the writer is the first&#13;
reader.&lt;/i&gt; When I'm working on an essay, I spend far more&#13;
time reading than writing. I'll reread some parts 50 or&#13;
100 times, replaying the thoughts in them and asking&#13;
myself, like someone sanding a piece of wood, does&#13;
anything catch? Does anything feel wrong? And the easier&#13;
the essay is to read, the easier it is to notice if&#13;
something catches.&lt;br/&gt;&lt;br/&gt;So yes, the two senses of good writing are connected in&#13;
at least two ways. Trying to make writing sound good&#13;
makes you fix mistakes unconsciously, and also helps you&#13;
fix them consciously; it shakes the bin of ideas, and&#13;
also makes mistakes easier to see. But now that we've&#13;
dissolved one layer of preposterousness, I can't resist&#13;
adding another. Does sounding good do more than just help&#13;
you get the ideas right? Is writing that sounds good&#13;
&lt;i&gt;inherently&lt;/i&gt; more likely to be right? Crazy as it may&#13;
seem, I think that's true too.&lt;br/&gt;&lt;br/&gt;Obviously there's a connection at the level of individual&#13;
words. There are lots of words in English that sound like&#13;
what they mean, often in wonderfully subtle ways.&#13;
Glitter. Round. Scrape. Prim. Cavalcade. But the sound of&#13;
good writing depends even more on the way you put words&#13;
together, and there's a connection at that level too.&lt;br/&gt;&lt;br/&gt;When writing sounds good, it's mostly because it has good&#13;
rhythm. But the rhythm of good writing is not the rhythm&#13;
of music, or the meter of verse. It's not so regular. If&#13;
it were, it wouldn't be good, because the rhythm of good&#13;
writing has to match the ideas in it, and ideas have all&#13;
kinds of different shapes. Sometimes they're simple and&#13;
you just state them. But other times they're more subtle,&#13;
and you need longer, more complicated sentences to tease&#13;
out all the implications.&lt;br/&gt;&lt;br/&gt;An essay is a cleaned up train of thought, in the same&#13;
way dialogue is cleaned up conversation, and a train of&#13;
thought has a natural rhythm. So when an essay sounds&#13;
good, it's not merely because it has a pleasing rhythm,&#13;
but because it has its natural one. Which means you can&#13;
use getting the rhythm right as a heuristic for getting&#13;
the ideas right. And not just in principle: good writers&#13;
do both simultaneously as a matter of course. Often I&#13;
don't even distinguish between the two problems. I just&#13;
think Ugh, this doesn't sound right; what do I mean to&#13;
say here?&#13;
&lt;font color="#dddddd"&gt;[&lt;a href="https://paulgraham.com/goodwriting.html#f3n"&gt;&lt;font color="#dddddd"&gt;3&lt;/font&gt;&lt;/a&gt;]&lt;/font&gt;&lt;br/&gt;&lt;br/&gt;The sound of writing turns out to be more like the shape&#13;
of a plane than the color of a car. If it looks good, as&#13;
Kelly Johnson used to say, it will fly well.&lt;br/&gt;&lt;br/&gt;This is only true of writing that's used to develop&#13;
ideas, though. It doesn't apply when you have ideas in&#13;
some other way and then write about them afterward — for&#13;
example, if you build something, or conduct an&#13;
experiment, and then write a paper about it. In such&#13;
cases the ideas often live more in the work than the&#13;
writing, so the writing can be bad even though the ideas&#13;
are good. The writing in textbooks and popular surveys&#13;
can be bad for the same reason: the author isn't&#13;
developing the ideas, merely describing other people's.&#13;
It's only when you're writing to develop ideas that&#13;
there's such a close connection between the two senses of&#13;
doing it well.&lt;br/&gt;&lt;br/&gt;Ok, many people will be thinking, this seems plausible so&#13;
far, but what about liars? Is it not notoriously possible&#13;
for a smooth-tongued liar to write something beautiful&#13;
that's completely false?&lt;br/&gt;&lt;br/&gt;It is, of course. But not without method acting. The way&#13;
to write something beautiful and false is to begin by&#13;
making yourself almost believe it. So just like someone&#13;
writing something beautiful and true, you're presenting a&#13;
perfectly-formed train of thought. The difference is the&#13;
point where it attaches to the world. You're saying&#13;
something that would be true if certain false premises&#13;
were. If for some bizarre reason the number of jobs in a&#13;
country were fixed, then immigrants really would be&#13;
taking our jobs.&lt;br/&gt;&lt;br/&gt;So it's not quite right to say that better sounding&#13;
writing is more likely to be true. Better sounding&#13;
writing is more likely to be internally consistent. If&#13;
the writer is honest, internal consistency and truth&#13;
converge.&lt;br/&gt;&lt;br/&gt;But while we can't safely conclude that beautiful writing&#13;
is true, it's usually safe to conclude the converse:&#13;
something that seems clumsily written will usually have&#13;
gotten the ideas wrong too.&lt;br/&gt;&lt;br/&gt;Indeed, the two senses of good writing are more like two&#13;
ends of the same thing. The connection between them is&#13;
not a rigid one; the goodness of good writing is not a&#13;
rod but a rope, with multiple overlapping connections&#13;
running through it. But it's hard to move one end without&#13;
moving the other. It's hard to be right without sounding&#13;
right.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Notes&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;[&lt;a name="f1n"&gt;&lt;font color="#000000"&gt;1&lt;/font&gt;&lt;/a&gt;]&#13;
The closest thing to an exception is when you have&#13;
to go back and insert a new point into the middle of&#13;
something you've written. This often messes up the flow,&#13;
sometimes in ways you can never quite repair. But I think&#13;
the ultimate source of this problem is that ideas are&#13;
tree-shaped and essays are linear. You inevitably run&#13;
into difficulties when you try to cram the former into&#13;
the latter. Frankly it's suprising how much you can get&#13;
away with. But even so you sometimes have to resort to an&#13;
endnote.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f2n"&gt;&lt;font color="#000000"&gt;2&lt;/font&gt;&lt;/a&gt;]&#13;
Obviously if you shake the bin hard enough the&#13;
objects in it can become less tightly packed. And&#13;
similarly, if you imposed some huge external constraint&#13;
on your writing, like using alternating one and two&#13;
syllable words, the ideas would start to suffer.&lt;br/&gt;&lt;br/&gt;[&lt;a name="f3n"&gt;&lt;font color="#000000"&gt;3&lt;/font&gt;&lt;/a&gt;]&#13;
Bizarrely enough, this happened in the writing of&#13;
this very paragraph. An earlier version shared several&#13;
phrases in common with the preceding paragraph, and the&#13;
repetition bugged me each time I reread it. When I got&#13;
annoyed enough to fix it, I discovered that the&#13;
repetition reflected a problem in the underlying ideas,&#13;
and I fixed both simultaneously.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;font color="888888"&gt;&lt;b&gt;Thanks&lt;/b&gt; to Jessica Livingston &#13;
and Courtenay Pipkin for reading drafts of this.&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;/font&gt;</content:encoded>
      <guid isPermaLink="false">https://paulgraham.com//goodwriting.html</guid>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
